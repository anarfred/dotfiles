#             _   _     _      _                 _ _
#  __ _  ___ | |_| |__ | | ___| |_ _   _    __ _| (_) __ _ ___
# / _` |/ _ \| __| '_ \| |/ _ \ __| | | |  / _` | | |/ _` / __|
#| (_| | (_) | |_| |_) | |  __/ |_| |_| | | (_| | | | (_| \__ \
# \__, |\___/ \__|_.__/|_|\___|\__|\__,_|  \__,_|_|_|\__,_|___/
# |___/
#
#       DESC: ZSH/BASH Compatible Alias/Functions
#
#       http://www.youtube.com/user/gotbletu
#       https://twitter.com/gotbletu
#       https://plus.google.com/+gotbletu
#       https://github.com/gotbletu
#       gotbletu@gmail.com


####################
##### SYSTEM #######
####################

#-------- Exports {{{
#------------------------------------------------------
# set display
export DISPLAY=:0

# set 256color support (doesnt work with older apps like abook)
#export TERM="screen-256color"
# export TERM="xterm-256color"

# find alternative apps if it is installed on your system
find_alt() { for i;do which "$i" >/dev/null && { echo "$i"; return 0;};done;return 1; }

# set the default program
# the first program in the array that is detected on your system will be chosen as the default
export OPENER=$(find_alt xdg-open exo-open gnome-open )
export BROWSER=$(find_alt qutebrowser --target tab --backend webengine firefox google-chrome $OPENER )
export BROWSERCLI=$(find_alt w3m links2 links lynx elinks $OPENER )
# export COMICER=$(find_alt mcomix comix zathura $OPENER )
export EBOOKER=$(find_alt ebook-viewer $OPENER )
export EDITOR=$(find_alt nvim vim emacs nano leafpad gedit pluma $OPENER )
# export WORDPROCESSOR=$(find_alt wordgrinder $OPENER )
export FILEMANAGER=$(find_alt dolphin nautilus spacefm enlightenment_filemanager $OPENER )
export MUSICER=$(find_alt mplayer mpg123 mpv cvlc $OPENER )
export PAGER=$(find_alt less more most)
export PLAYER=$(find_alt mplayer mpv cvlc $OPENER )
export READER=$(find_alt okular evince $OPENER )
# export ROOTER=$(find_alt gksudo kdesudo )
export IMAGEVIEWER=$(find_alt feh display eog $OPENER )
export RANGER_LOAD_DEFAULT_RC=FALSE.

#}}}
#-------- Bash Color Code {{{
#------------------------------------------------------
# LINK: https://wiki.archlinux.org/index.php?title=Bash/Prompt_customization&oldid=419076#List_of_colors_for_prompt_and_Bash

# Reset
Color_Off='\e[0m'       # Text Reset

# Regular Colors
Black='\e[0;30m'        # Black
Red='\e[0;31m'          # Red
Green='\e[0;32m'        # Green
Yellow='\e[0;33m'       # Yellow
Blue='\e[0;34m'         # Blue
Purple='\e[0;35m'       # Purple
Cyan='\e[0;36m'         # Cyan
White='\e[0;37m'        # White

# Bold
BBlack='\e[1;30m'       # Black
BRed='\e[1;31m'         # Red
BGreen='\e[1;32m'       # Green
BYellow='\e[1;33m'      # Yellow
BBlue='\e[1;34m'        # Blue
BPurple='\e[1;35m'      # Purple
BCyan='\e[1;36m'        # Cyan
BWhite='\e[1;37m'       # White

# Underline
UBlack='\e[4;30m'       # Black
URed='\e[4;31m'         # Red
UGreen='\e[4;32m'       # Green
UYellow='\e[4;33m'      # Yellow
UBlue='\e[4;34m'        # Blue
UPurple='\e[4;35m'      # Purple
UCyan='\e[4;36m'        # Cyan
UWhite='\e[4;37m'       # White

# Background
On_Black='\e[40m'       # Black
On_Red='\e[41m'         # Red
On_Green='\e[42m'       # Green
On_Yellow='\e[43m'      # Yellow
On_Blue='\e[44m'        # Blue
On_Purple='\e[45m'      # Purple
On_Cyan='\e[46m'        # Cyan
On_White='\e[47m'       # White

# High Intensity
IBlack='\e[0;90m'       # Black
IRed='\e[0;91m'         # Red
IGreen='\e[0;92m'       # Green
IYellow='\e[0;93m'      # Yellow
IBlue='\e[0;94m'        # Blue
IPurple='\e[0;95m'      # Purple
ICyan='\e[0;96m'        # Cyan
IWhite='\e[0;97m'       # White

# Bold High Intensity
BIBlack='\e[1;90m'      # Black
BIRed='\e[1;91m'        # Red
BIGreen='\e[1;92m'      # Green
BIYellow='\e[1;93m'     # Yellow
BIBlue='\e[1;94m'       # Blue
BIPurple='\e[1;95m'     # Purple
BICyan='\e[1;96m'       # Cyan
BIWhite='\e[1;97m'      # White

# High Intensity backgrounds
On_IBlack='\e[0;100m'   # Black
On_IRed='\e[0;101m'     # Red
On_IGreen='\e[0;102m'   # Green
On_IYellow='\e[0;103m'  # Yellow
On_IBlue='\e[0;104m'    # Blue
On_IPurple='\e[10;95m'  # Purple
On_ICyan='\e[0;106m'    # Cyan
On_IWhite='\e[0;107m'   # White

# }}}
#-------- Set Path {{{
#------------------------------------------------------
# http://askubuntu.com/questions/49784/how-is-bin-added-to-my-path
# Local installed package
if [ -d "$HOME/.local/bin" ] ; then
        PATH="$HOME/.local/bin:$PATH"
fi
if [ -d "$HOME/.screenlayout" ] ; then
	PATH="$HOME/.screenlayout:$PATH"
fi

# Go Packages (Golang)
export GOPATH=~/.go
export PATH="$PATH:$GOPATH/bin"

# NPM NodeJS Packages
if [ -d "$HOME/node_modules/.bin" ] ; then
    export PATH="$HOME/node_modules/.bin:$PATH"
fi

# User Scripts
if [ -d "$HOME/.scripts" ] ; then
    export PATH="$HOME/.scripts:$PATH"
fi

# }}}
#-------- External Files {{{
#------------------------------------------------------
if [ -f ~/.hintrc ]; then
    . ~/.hintrc
fi

# }}}
#-------- Configurations {{{
#------------------------------------------------------
cfg-aliasrc() { $EDITOR ~/.aliasrc ;}
cfg-abookrc() { $EDITOR ~/.abook/abookrc ;}
cfg-addressbook() { $EDITOR ~/.abook/addressbook ;}
cfg-bashrc() { $EDITOR ~/.bashrc ;}
cfg-blocklist() { $EDITOR ~/.scripts/blocklist.sh ;}
cfg-clonezilla() { sudo $EDITOR /etc/drbl/drbl.conf ;}
# https://wiki.archlinux.org/index.php/Cursor_Themes#Choosing_and_Configuring_Cursor_Themes
cfg-cursor() { $EDITOR ~/.icons/default/index.theme ;}
cfg-cursor-list() { ls ~/.icons ;}
cfg-emacs() { $EDITOR ~/.emacs ;}
cfg-emulationstation() { $EDITOR ~/.emulationstation/es_systems.cfg ;}
cfg-emulationstation-input() { $EDITOR ~/.emulationstation/es_input.cfg ;}
cfg-flexget() { $EDITOR ~/.flexget/config.yml ;}
cfg-fstab() { sudo $EDITOR /etc/fstab ;}
cfg-gitignore() { $EDITOR ~/Public/dotfiles/.gitignore ;}
cfg-giftd() { $EDITOR ~/.giFT/giftd.conf ;}
cfg-group() { sudo $EDITOR /etc/group ;}
cfg-grub() { sudo $EDITOR /etc/default/grub ;}
cfg-hintrc() { $EDITOR ~/.hintrc ;}
cfg-hosts() { sudo $EDITOR /etc/hosts ;}
cfg-i3wm() { $EDITOR ~/.i3/config ;}
cfg-inputrc() { $EDITOR ~/.inputrc ;}
cfg-kodi-keyboard() { $EDITOR ~/.kodi/userdata/keymaps/keyboard.xml ;}
cfg-kodi-confluencethumbnailview() { sudo $EDITOR /usr/share/kodi/addons/skin.confluence/720p/MyVideoNav.xml ;}
cfg-lgogdownloader() { $EDITOR ~/.config/lgogdownloader/config.cfg ;}
cfg-livestreamer() { $EDITOR ~/.livestreamerrc ;}
cfg-mailcap() { $EDITOR ~/.mailcap ;}
cfg-mbsyncrc() { $EDITOR ~/.mbsyncrc ;}
cfg-mc() { $EDITOR ~/.config/mc/ini ;}
cfg-mcomix() { $EDITOR ~/.config/mcomix/keybindings.conf ;}
cfg-mpd() { $EDITOR ~/.mpd/mpd.conf ;}
cfg-mplayer() { $EDITOR ~/.mplayer/config ;}
cfg-mpv() { $EDITOR ~/.config/mpv/input.conf ;}
cfg-mocp() { $EDITOR ~/.moc/config ;}
cfg-muttrc() { $EDITOR ~/.muttrc ;}
cfg-nanorc() { $EDITOR ~/.nanorc;}
cfg-nap() { $EDITOR ~/.nap/napconf ;}
cfg-ncmpcpp() { $EDITOR ~/.ncmpcpp/config ;}
cfg-ncmpcpp-bindings() { $EDITOR ~/.ncmpcpp/bindings ;}
cfg-newsbeuter() { $EDITOR ~/.newsbeuter/config ;}
cfg-newsbeuter-queue() { $EDITOR ~/.newsbeuter/queue ;}
cfg-newsbeuter-urls() { $EDITOR ~/.newsbeuter/urls ;}
cfg-pastebinit() { $EDITOR ~/.pastebinit.xml ;}
cfg-periscope() { $EDITOR ~/.config/periscope/config ;}
cfg-pianobar() { $EDITOR ~/.config/pianobar/config ;}
cfg-pianobar-libao() { sudo $EDITOR /etc/libao.conf ;}
cfg-profile() { $EDITOR ~/.profile ;}
cfg-pulseaudio() { sudo $EDITOR /etc/pulse/default.pa ;}
cfg-pyload() { $EDITOR ~/.pyload/pyload.conf ;}
cfg-pyradio() { $EDITOR ~/.pyradio.csv ;}
cfg-qutebrowser() { $EDITOR ~/.config/qutebrowser/qutebrowser.conf ;}
cfg-qutebrowser-keys() { $EDITOR ~/.config/qutebrowser/keys.conf ;}
cfg-qutebrowser-quickmarks() { $EDITOR ~/.config/qutebrowser/quickmarks ;}
cfg-quicktile() { $EDITOR ~/.config/quicktile.cfg ;}
cfg-ranger() { $EDITOR ~/.config/ranger/rc.conf ;}
cfg-ranger-rifle() { $EDITOR ~/.config/ranger/rifle.conf ;}
cfg-ranger-commands() { $EDITOR ~/.config/ranger/commands.py ;}
cfg-retroarch() { $EDITOR ~/.config/retroarch/retroarch.cfg ;}
cfg-rtv() { $EDITOR ~/.config/rtv/rtv.cfg ;}
cfg-samba() { sudo $EDITOR /etc/samba/smb.conf ;}
cfg-skippyxd() { $EDITOR ~/.skippy-xd.rc ;}
cfg-slrnrc() { $EDITOR ~/.slrnrc ;}
cfg-ssh-client() { sudo $EDITOR /etc/ssh/ssh_config ;}
cfg-ssh-daemon() { sudo $EDITOR /etc/ssh/sshd_config ;}
cfg-sudoers() { sudo $EDITOR /etc/sudoers ;}
cfg-surfraw() { $EDITOR ~/.config/surfraw/bookmarks ;}
cfg-surfraw-conf() { $EDITOR ~/.config/surfraw/conf ;}
cfg-syncthing() { $EDITOR ~/.config/syncthing/config.xml ;}
cfg-tmuxrc() { $EDITOR ~/.tmux.conf ;}
cfg-torrentflix() { torrentflix --config=$EDITOR ;}
cfg-tpb() { $EDITOR ~/.scripts/tpb.sh ;}
cfg-transmission-daemon() { $EDITOR ~/.config/transmission-daemon/settings.json ;}
cfg-transmission-ncurse() { $EDITOR ~/.config/transmission-remote-cli/settings.cfg ;}
cfg-trz() { $EDITOR ~/.scripts/trz.sh ;}
cfg-urlview() { $EDITOR ~/.urlview ;}
cfg-updatedb() { sudo $EDITOR /etc/updatedb.conf ;}
cfg-vimrc() { $EDITOR ~/.vimrc ;}
cfg-w3m() { $EDITOR ~/.w3m/config ;}
cfg-w3m-keymap() { $EDITOR ~/.w3m/keymap ;}
cfg-w3m-urimethodmap() { $EDITOR ~/.w3m/urimethodmap ;}
cfg-wegorc() { $EDITOR ~/.wegorc ;}
cfg-xboxdrv() { sudo $EDITOR /etc/default/xboxdrv ;}
cfg-xresources() { $EDITOR ~/.Xresources ;}
cfg-yaourtrc() { $EDITOR ~/.yaourtrc ;}
cfg-zshrc() { $EDITOR ~/.zshrc ;}
cfg-zurlrc() { $EDITOR ~/.zurlrc ;}
#}}}
#-------- Configurations Reload {{{
#------------------------------------------------------
rld-bashrc() { source ~/.bashrc ;}
rld-font() { fc-cache -v -f ;}
rld-grub() { sudo grub-mkconfig -o /boot/grub/grub.cfg ;}
rld-updatedb() { sudo updatedb ;}
rld-xdefaults() { xrdb ~/.Xdefaults ;}
rld-xmodmap() { xmodmap ~/.Xmodmap ;}
rld-xresources() { xrdb -load ~/.Xresources ;}
rld-zshrc() { source ~/.zshrc ;}
# }}}
#-------- Alias (Substitution) {{{
#------------------------------------------------------
# DESC: alias for mainly for existing commands

alias bc='bc -q -l'					# dont show opening msg, use math library
alias c='clear'           # Empty screen
alias cal='cal -3'					# show 3 months
alias cp='cp -aiv'					# cp prompt confirmation
alias df='df -hT --total'				# human readable, print filetype, and total
alias du='du -d1 -h'					# max depth, human readable
alias emacs='emacs -nw'					# cli mode
alias feh='feh --auto-zoom --scale-down -g 1360x768 -B white'
alias free='free -h'					# human readable
alias g='gvim --servername master --remote' #Edit in vim server 
alias info='info --vi-keys'				# GNU info act like man command
alias ln='ln -iv'
alias lsblk='lsblk -o "KNAME,HOTPLUG,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID,MODEL,SERIAL"'
alias mkdir='mkdir -p -v'				# create if not exist, verbose
#alias xdg-open= 'mimeopen'
alias mocp='padsp mocp'                                 # moc player working with pulseaudio
alias mount='mount | column -t'				# align in column
alias mv='mv -iv'					# mv prompt confirmation
alias nano='nano -c -$'					# word wrapping
alias nvlc='nvlc --no-color'				# vlc black/white color
alias pdfgrep='pdfgrep -in'				# ignorecase, page number
alias qcp='qcp -f do'                                   # renameutils bulk copy (destination column only)
alias qmv='qmv -f do'                                   # renameutils bulk rename (destination column only)
alias rm='rm -Iv --preserve-root'			# rm interactive, prompt once only
alias sr='sr -browser=$BROWSERCLI'			# open in cli browser
alias surfraw='surfraw -browser=$BROWSER'		# open in gui browser
alias wget='wget -N -c'					# continues/resumes
alias youtube-viewer='youtube-viewer -C -f -4 --results=6'	# color, fullscreen, 480p, number of results
alias vim='nvim'
alias visudo='sudo EDITOR="$EDITOR" visudo'

# color for common commands
# tutorial video: http://www.youtube.com/watch?v=RbVCzxnKJL4
if [ -x /usr/bin/dircolors ]; then
    eval "`dircolors -b`"
    #alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

## }}}
#-------- Alias (Good List) {{{
#------------------------------------------------------
# DESC: custom alias

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ......="cd ../../../../.."
alias empty='gvfs-trash --empty'			# empty trash globally (all partitions)
alias garbage='gvfs-trash -f'
alias garbage-list='gvfs-ls -h trash://'
alias garbage-empty='gvfs-trash --empty'		# empty trash globally (all partitions)
export TODOTXT_DEFAULT_ACTION=ls
alias t="/home/nrfrd/Dropbox/todo.txt-cli/todo.sh"                                       # todotxt.sh program
alias trash='trash-put -v'
alias vless="/usr/share/vim/vim74/macros/less.sh"       # vim as a pager
alias vradio="vim ~/.pyradio.csv && killall mpg123"    # vim as radio player using pyradio.csv
alias wttr='curl wttr.in'                               # wego weather forcast using only curl
alias wttr-help='curl wttr.in/:help'

# }}}
#-------- Functions (Oneliner) {{{
#------------------------------------------------------

cpbak() { cp $1{,.bak} ;}		          # create backup copy
down4me() { curl -s "http://www.downforeveryoneorjustme.com/$1" | sed '/just you/!d;s/<[^>]*>//g';}
killall-zombies() { kill -HUP $(ps -A -ostat,ppid | grep -e '[zZ]'| awk '{ print $2 }') ;}
mkdircd() { mkdir -p -v $1; cd $1 ;}	          # create folder then cd into it
nohup-command() { nohup "$@" >/dev/null 2>&1& }   # background a process w/o error msg
alias newmusic='find ~/Musique/ -name "*.mp3" -mtime -15 | sort'
#open() { xdg-open "$@" > /dev/null 2>&1 ;}        # open with default GUI program
open() { mimeopen "$@" > /dev/null 2>&1 ;}        # open with default GUI program

# }}}
#-------- Functions (Good List) {{{
#------------------------------------------------------
# DESC: custom functions

update-grub() { sudo grub-mkconfig -o /boot/grub/grub.cfg ;}
grub-update() { sudo grub-mkconfig -o /boot/grub/grub.cfg ;}
grub-list() {
  RED='\033[0;31m'
  sudo grep "menuentry '" /boot/grub/grub.cfg | less -N
  echo -e "${RED} REMINDER: GRUB number starts at zero not one"
}

# DESC: color the manpages
# DEMO: http://www.youtube.com/watch?v=9BFaLAa428k
# LINK: https://wiki.archlinux.org/index.php/Man_page#Colored_man_pages
man() {
  env LESS_TERMCAP_mb=$'\E[01;31m' \
  LESS_TERMCAP_md=$'\E[01;31m' \
  LESS_TERMCAP_me=$'\E[0m' \
  LESS_TERMCAP_se=$'\E[0m' \
  LESS_TERMCAP_so=$'\E[01;44;33m' \
  LESS_TERMCAP_ue=$'\E[0m' \
  LESS_TERMCAP_us=$'\E[01;32m' \
  man "$@"
}

# list and grep with file permission
lsg() {
  keyword=$(echo "$@" |  sed 's/ /.*/g')
  ls -hlA --color=yes \
  | awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/)*2^(8-i));if(k)printf(" %0o ",k);print}' \
  | grep -iE $keyword
}

# ls recent items at bottom with green TODAY yellow YESTERDAY substituted with file permission also
# https://www.reddit.com/r/archlinux/comments/41s1w4/what_is_your_favorite_one_liner_to_use/cz50y1m
# http://askubuntu.com/a/152005
lst() {
  ls -vAFq --color=yes -got --si --time-style=long-iso "$@" \
  | sed "s/$(date +%Y-%m-%d)/\x1b[32m     TODAY\x1b[m/;s/$(date +'%Y-%m-%d' -d yesterday)/\x1b[33m YESTERDAY\x1b[m/" \
  | awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/)*2^(8-i));if(k)printf(" %0o ",k);print}' | tac
}

lsl() {
  ls -hl --color=yes "$@" \
  | awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/)*2^(8-i));if(k)printf(" %0o ",k);print}'
}

# DESC: cli calculator (Ctrl+D to exit)
# DEMO: http://www.youtube.com/watch?v=JkyodHenTuc
# LINK: http://docs.python.org/library/math.html
calc() {
  if which python2 &>/dev/null; then
    python2 -ic "from __future__ import division; from math import *; from random import *"
  elif which python3 &>/dev/null; then
    python3 -ic "from math import *; import cmath"
  elif which bc &>/dev/null; then
    bc -q -l
  else
    echo "Requires python2, python3 or bc for calculator features"
  fi
}

# }}}
#-------- System Information {{{
#------------------------------------------------------
m-sound() { arecord -L && arecord -l && cat /proc/asound/pcm ;} #List audio capture card/mic
m-distro() { uname -a && lsb_release -a ;}
m-connectip() {
  echo "--------------- Connected Devices -----------------"
    nmap -sn $(netstat -rn | awk 'FNR == 3 {print $2}')/24
  echo "---------------------------------------------------"
}

# uses ip or ifconfig, good on older or newer system
m-ip() {
  echo "--------------- Network Information ---------------"
  echo "router ip:" $(netstat -rn | awk 'FNR == 3 {print $2}')
  # newer system like archlinux
  ip addr | awk '/global/ {print $1,$2}' | cut -d\/ -f1
  ip addr | awk '/global/ {print $3,$4}'
  ip addr | awk '/ether/ {print $1,$2}'
  ip addr | awk '/scope link/ {print $1,$2}' | cut -d\/ -f1
  # older system like debian
  ifconfig | awk '/inet addr/ {print $1,$2}' | awk -F: '{print $1,$2}'
  ifconfig | awk '/Bcast/ {print $3}' | awk -F: '{print $1,$2}'
  ifconfig | awk '/inet addr/ {print $4}' | awk -F: '{print $1,$2}'
  ifconfig | awk '/HWaddr/ {print $4,$5}'
  ifconfig | awk '/Scope:Link/ {print $1,$3}' | cut -d\/ -f1
  # echo External IP $(curl -s http://checkip.dyndns.org/ | grep -o "[[:digit:].]\+")
  # echo External IP: $(curl -s http://ipaddr.io/)
  # echo External IP: $(curl -s https://icanhazip.com/)
  # echo External IP: $(curl -s https://ifconfig.co/)
  # echo External IP: $(curl -s http://pasteip.me/api/cli/ && echo)
  echo external ip: $(curl -s http://ipecho.net/plain)
  echo "---------------------------------------------------"
}
#}}}

####################
##### GRAPHICS #####
####################

#-------- Image Resizer (32|96|128|480|600|768|720|960|1080) {{{
#------------------------------------------------------
# Resizing Pictures to different resolutions

image-resize-32x32() {
  if [ $# -lt 1 ]
  then
    echo -e "resize pictures to another resolution"
    echo -e "\nUsage:\n$0 <picture>"
    echo -e "\nExample:\n$0 pic1.png pic2.png pic3.png"
    echo -e "$0 *.jpg"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    convert "$arg" -resize 32x32 "${arg%.*}"_32x32_resized."${arg##*.}"
  done
}

image-resize-96x96() {
  if [ $# -lt 1 ]
  then
    echo -e "resize pictures to another resolution"
    echo -e "\nUsage:\n$0 <picture>"
    echo -e "\nExample:\n$0 pic1.png pic2.png pic3.png"
    echo -e "$0 *.jpg"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    convert "$arg" -resize 96x96 "${arg%.*}"_96x96_resized."${arg##*.}"
  done
}

image-resize-128x128() {
  if [ $# -lt 1 ]
  then
    echo -e "resize pictures to another resolution"
    echo -e "\nUsage:\n$0 <picture>"
    echo -e "\nExample:\n$0 pic1.png pic2.png pic3.png"
    echo -e "$0 *.jpg"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    convert "$arg" -resize 128x128 "${arg%.*}"_128x128_resized."${arg##*.}"
  done
}

image-resize-640x480() {
  if [ $# -lt 1 ]
  then
    echo -e "resize pictures to another resolution"
    echo -e "\nUsage:\n$0 <picture>"
    echo -e "\nExample:\n$0 pic1.png pic2.png pic3.png"
    echo -e "$0 *.jpg"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    convert "$arg" -resize 640x480 "${arg%.*}"_640x480_resized."${arg##*.}"
  done
}

image-resize-800x600() {
  if [ $# -lt 1 ]
  then
    echo -e "resize pictures to another resolution"
    echo -e "\nUsage:\n$0 <picture>"
    echo -e "\nExample:\n$0 pic1.png pic2.png pic3.png"
    echo -e "$0 *.jpg"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    convert "$arg" -resize 800x600 "${arg%.*}"_800x600_resized."${arg##*.}"
  done
}

image-resize-1024x768() {
  if [ $# -lt 1 ]
  then
    echo -e "resize pictures to another resolution"
    echo -e "\nUsage:\n$0 <picture>"
    echo -e "\nExample:\n$0 pic1.png pic2.png pic3.png"
    echo -e "$0 *.jpg"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    convert "$arg" -resize 1024x768 "${arg%.*}"_1024x768_resized."${arg##*.}"
  done
}

image-resize-1280x720() {
  if [ $# -lt 1 ]
  then
    echo -e "resize pictures to another resolution"
    echo -e "\nUsage:\n$0 <picture>"
    echo -e "\nExample:\n$0 pic1.png pic2.png pic3.png"
    echo -e "$0 *.jpg"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    convert "$arg" -resize 1280x720 "${arg%.*}"_1280x720_resized."${arg##*.}"
  done
}

image-resize-1280x960() {
  if [ $# -lt 1 ]
  then
    echo -e "resize pictures to another resolution"
    echo -e "\nUsage:\n$0 <picture>"
    echo -e "\nExample:\n$0 pic1.png pic2.png pic3.png"
    echo -e "$0 *.jpg"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    convert "$arg" -resize 1280x960 "${arg%.*}"_1280x960_resized."${arg##*.}"
  done
}

image-resize-1920x1080() {
  if [ $# -lt 1 ]
  then
    echo -e "resize pictures to another resolution"
    echo -e "\nUsage:\n$0 <picture>"
    echo -e "\nExample:\n$0 pic1.png pic2.png pic3.png"
    echo -e "$0 *.jpg"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    convert "$arg" -resize 1920x1080 "${arg%.*}"_1920x1080_resized."${arg##*.}"
  done
}

# }}}

####################
##### INTERNET #####
####################

#-------- Youtube-dl (Stream|Download|RipAudio) {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=MFxlwVhwayg
# DESC: download/stream media from many online sites
youtube-dl-stream() { youtube-dl -o - "$1" | $PLAYER - ;}

# DESC: convert youtube to audio (youtube.com only)
# -f 171 = webm audio (vorbis)
# -f 140 = m4a (aac)
yt2ogg() { youtube-dl -c --restrict-filenames -x --audio-format vorbis -o "%(title)s.%(ext)s" -f 171 "$@" ;}
yt2wav() { youtube-dl -c --restrict-filenames -x --audio-format wav -o "%(title)s.%(ext)s" -f 171 "$@" ;}
yt2mp3() { youtube-dl -c --restrict-filenames -x --audio-format mp3 -o "%(title)s.%(ext)s" -f 171 "$@" ;}
yt2webmaudio() { youtube-dl -c --restrict-filenames -o "%(title)s.%(ext)s" -f 171 "$@" ;}
yt2m4a() { youtube-dl -c --restrict-filenames -o "%(title)s.%(ext)s" -f 140 "$@" ;}

# }}}
#-------- RipMe CLI (Bulk Image Downloader) {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=gX9-tYGB-mY
# DESC: image album downloader for wallpaper, comic, hentai, manga
# LINK: https://github.com/4pr0n/ripme
# REFF: https://github.com/4pr0n/ripme/wiki/How-To-Run-RipMe
# REFF: https://github.com/4pr0n/ripme/issues/8 (Supported Sites)

ripme-cli() { java -jar /usr/share/java/ripme-git-*.jar -l ~/Downloads -u "$@" ;}
ripme-help() { java -jar /usr/share/java/ripme-git-*.jar -h ;}
ripme-supported() { w3m -dump https://github.com/4pr0n/ripme/issues/8 | less ;}
ripme-cbz() {
  java -jar /usr/share/java/ripme-git-*.jar -l ~/Downloads -u "$@"
  zip -r "${$(ls -1dt ~/Downloads/*/ | head -1)%/}.cbz" "$(ls -1dt ~/Downloads/*/ | head -1)"
  gvfs-trash -f "$(ls -1dt ~/Downloads/*/ | head -1)"
}
ripme-tsp() {
  tsp java -jar /usr/share/java/ripme-git-*.jar -l ~/Downloads -u "$@"
  sleep 2
  tsp zip -r "${$(ls -1dt ~/Downloads/*/ | head -1)%/}.cbz" "$(ls -1dt ~/Downloads/*/ | head -1)"
  tsp gvfs-trash -f "$(ls -1dt ~/Downloads/*/ | head -1)"
}

# }}}
#-------- Quvi (Download/Stream Media CLI) {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jLw64k8CoMc
# LINK: http://quvi.sourceforge.net/
# DESC: media downloader and streamer using external player

quvi-dl() { quvi get "$1" ;}
quvi-stream() { quvi dump "$1" -b quiet --exec "$PLAYER %u" ;}

# }}}
#-------- Wget (Retrieve Files From The Web) {{{
#------------------------------------------------------
# http://stackoverflow.com/a/18709707
wget-extension() {
  if [ $# -lt 2 ]; then
    echo -e "Download all files with specific extension on a webpage"
    echo -e "\nUsage:   $0 <file_extension> <url>"
    echo -e "\nExample: $0 mp3 http://example.com/files/"
    echo -e "\nGoogle: http://lmgtfy.com/?q=intitle%3Aindex.of+mp3+-html+-htm+-php+-asp+-txt+-pls+madonna"
    return 1
  fi

  savepath=~/Downloads
  outputdir_name=$(echo "$2" | rev | cut -d\/ -f2 | rev)

  mkdir -pv "$savepath/$outputdir_name"
  cd "$savepath/$outputdir_name" && wget -r -l1 -H -t1 -nd -N -np -A "$1" -erobots=off "$2"
}

# }}}
#-------- Peerflix v2 (Popcorntime CLI) [last updated July 27, 2016] {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=NG13yOTPgfY
# LINK: https://github.com/saironiq/shellscripts
# DESC: popcorntime from terminal

peerflix-cvlc() {
  # choose a player (cvlc is default)
  PFLIX_VIDPLAYER=cvlc
  # PFLIX_VIDPLAYER=mpv
  # PFLIX_VIDPLAYER=mplayer

  # ip address and port for video player to connect to
  PFLIX_IPADDR=localhost
  PFLIX_PORT=55055

  # ping ip and port to see if channel is connectable before continuing to the next command
  until nc -vzw 2 "$PFLIX_IPADDR" "$PFLIX_PORT"; do sleep 2; done

  # open player to view sopcast channel
  ($PFLIX_VIDPLAYER http://"$PFLIX_IPADDR":"$PFLIX_PORT")

  # wait until player exit then killall peerflix process
  wait
  killall peerflix
}

# }}}
#-------- Skeet Skeet CLI {{{
#------------------------------------------------------
# requirements:
#     1. install nohup mpv vim youtube-dl
#     2. add this to your ~/.vimrc
#        map <F8> :exec '!nohup mpv ' . shellescape(getline('.'), 1) . ' >/dev/null 2>&1&'<CR><CR>
#
# how to use:
#     1. fap-xvideos ashlynn brooke
#     2. hit F8 on the link you want to play
#     3. hit ZZ or ZQ to quit vim


fap-youporn() {
  grepmatch=$(echo "$@" | sed 's/ /.*/g')
  keyword="$(echo "http://www.youporn.com/search?query=$@&type=straight" | sed 's/ /\+/g')"
  pagenum=3
  pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo "$keyword&page=$num"; done )
  videourl=$(echo "$pagenum_to_url" | while read line; do lynx -dump "$line" \
  | awk '/watch/ {print $2}' | cut -d\/ -f1-6 | grep -iE $grepmatch | awk '!x[$0]++' ; done)

  echo $videourl | sed 's/\ /\n/g' | awk '!x[$0]++' | vim -R -
}

fap-youjizz() {
  keyword="$(echo "http://www.youjizz.com/search/$@" | sed 's/ /\-/g')"
  pagenum=5
  pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo "$keyword-$num".html""; done )
  videourl=$(echo "$pagenum_to_url" | while read line; do lynx -dump "$line" \
  | awk '/\.com\/videos/ {print $2}' | awk '!x[$0]++' ; done)

  echo $videourl | sed 's/\ /\n/g' | awk '!x[$0]++' | vim -R -
}

fap-pornotube() {
  keyword="$(echo "http://www.pornotube.com/search.php?q=$@" | sed 's/ /\+/g')"
  pagenum=3
  pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo "$keyword&page=$num"; done )
  videourl=$(echo "$pagenum_to_url" | while read line; do curl -s "$line" \
  | awk '/pornotube.com\/m/ && !/class/' | cut -d\" -f 2 | awk '!x[$0]++' ; done)

  echo $videourl | sed 's/\ /\n/g' | awk '!x[$0]++' | vim -R -
}

fap-xvideos() {
  keyword="$(echo "http://www.xvideos.com/?k=$@" | sed 's/ /\+/g')"
  pagenum=5
  pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo "$keyword&p=$num"; done )
  videourl=$(echo "$pagenum_to_url" | while read line; do lynx -dump "$line" \
  | awk '/xvideos\.com\/video/ {print $2}' | awk '!x[$0]++' ; done)

  echo $videourl | sed 's/\ /\n/g' | awk '!x[$0]++' | vim -R -
}

fap-jizzhut() {
  keyword="$(echo "http://www.jizzhut.com/search/$@" | sed 's/ /\-/g')"
  pagenum=3
  pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo "$keyword-$num.html"; done )
  videourl=$(echo "$pagenum_to_url" | while read line; do lynx -dump "$line" \
  | awk '/jizzhut\.com\/videos/ {print $2}' | awk '!x[$0]++' ; done)

  echo $videourl | awk '!x[$0]++' | vim -R -
}

fap-redtube() {
  keyword="$(echo "http://www.redtube.com/?search=$@" | sed 's/ /\+/g')"
  pagenum=3
  pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo "$keyword&page=$num"; done )
  videourl=$(echo "$pagenum_to_url" | while read line; do lynx -source "$line" \
  | awk -F\" '/class="s"/ {print $4, "http://redtube.com"$2}' | awk '!x[$0]++' ; done)

  echo $videourl | awk '!x[$0]++' | vim -R -
}

fap-spankwire() {
  keyword="$(echo "http://www.spankwire.com/search/straight/keyword/$@" | sed 's/ /\%20/g')"
  pagenum=5
  pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo "$keyword?Sort=Relevance&Page=$num"; done )
  videourl=$(echo "$pagenum_to_url" | while read line; do lynx -dump "$line" \
  | awk '/www\.spankwire\.com/ && /video/ {print $2}' | awk '!x[$0]++' ; done)

  echo $videourl | sed 's/\ /\n/g' | vim -R -
}

# quvi not supported anymore
fap-tnaflix() {
  keyword="$(echo "&what=$@&category=&sb=relevance&su=anytime&sd=all&dir=desc" | sed 's/ /\%20/g')"
  pagenum=3
  pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo \
  	"http://www.tnaflix.com/search.php?page=$num$keyword"; done )
  videourl=$(echo "$pagenum_to_url" | while read line; do lynx -dump "$line" \
  | awk '/video[0-9]/ {print $2}' | awk '!x[$0]++' ; done)

  echo $videourl | sed 's/\ /\n/g' | vim -R -
}
fap-empflix() {
  keyword="$(echo "&what=$@&category=&sb=relevance&su=anytime&sd=all&dir=desc" | sed 's/ /\%20/g')"
  pagenum=3
  pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo \
  	"http://www.empflix.com/search.php?page=$num$keyword"; done )
  videourl=$(echo "$pagenum_to_url" | while read line; do lynx -dump "$line" \
  | awk '/empflix\.com\/videos/ {print $2}' | awk '!x[$0]++' ; done)

  echo $videourl | sed 's/\ /\n/g' | vim -R -
}

#}}}
#-------- Sopcast CLI v3 (Streaming P2P Videos) [last updated July 27, 2016] {{{
#------------------------------------------------------
# DEMO: http://www.youtube.com/watch?v=Dm7cFjhzgHo
# DESC: watch streaming movies/tv shows over p2p
# FEED: http://www.sopcast.com/chlist.xml
#       http://sopcast.ucoz.com
#       http://streams.magazinmixt.ro
#       google keyword: sop://broker.sopcast
#       https://www.google.com/#tbs=qdr:w&q=sop:%2F%2Fbroker.sopcast

# package:
# Archlinux: sopcast ( x64 https://www.archlinux.org/packages/multilib/x86_64/sopcast/)
# Archlinux: sopcast ( x32 https://www.archlinux.org/packages/community/i686/sopcast/)
# Ubuntu/Debian: sp-auth (https://launchpad.net/~jason-scheunemann/+archive/ppa)

sppc() {
  # choose a player (cvlc is default)
  SP_VIDPLAYER=(cvlc --file-caching=10000)
  # SP_VIDPLAYER=cvlc
  # SP_VIDPLAYER=vlc
  # SP_VIDPLAYER=(vlc --control=lirc)
  # SP_VIDPLAYER=mplayer
  # SP_VIDPLAYER=(mplayer -cache 1000)

  # sopcast port
  SP_LOCAL_PORT=55050

  # ip address and port for video player to connect to
  SP_PLAYER_IPADDR=localhost
  SP_PLAYER_PORT=55051

  # kill existing sopcast channel
  killall sp-sc &>/dev/null

  # connect to sopcast channel
  (sp-sc "$1" "$SP_LOCAL_PORT" "$SP_PLAYER_PORT" &>/dev/null &)

  # ping ip and port to see if channel is connectable before continuing to the next command
  until nc -vzw 2 "$SP_PLAYER_IPADDR" "$SP_PLAYER_PORT"; do sleep 2; done

  # open player to view sopcast channel
  ($SP_VIDPLAYER http://"$SP_PLAYER_IPADDR":"$SP_PLAYER_PORT")

  # wait until player exit then killall sopcast process
  wait
  killall sp-sc
}

# manually kill sopcast (sometimes it doesnt exit properly and still uses bandwidth in the background)
sppc-kill() { killall sp-sc ;}

# sopcast channel listing
spp-acasa() { sppc "sop://broker.sopcast.com:3912/149256" ;}
spp-acasagold() { sppc "sop://broker.sopcast.com:3912/253471" ;}
spp-antena1() { sppc "sop://broker.sopcast.com:3912/148083" ;}
spp-antenastars() { sppc "sop://broker.sopcast.com:3912/148255" ;}
spp-antena3() { sppc "sop://broker.sopcast.com:3912/148084" ;}
spp-axn() { sppc "sop://broker.sopcast.com:3912/253035" ;}
spp-b1() { sppc "sop://broker.sopcast.com:3912/148087" ;}
spp-bbcearth() { sppc "sop://broker.sopcast.com:3912/148257" ;}
spp-boomerang() { sppc "sop://broker.sopcast.com:3912/149264" ;}
spp-canal+hdliga() { sppc "sop://broker.sopcast.com:3912/258921" ;}
spp-cartoonnetwork() { sppc "sop://broker.sopcast.com:3912/148254" ;}
spp-cinemax() { sppc "sop://broker.sopcast.com:3912/148882" ;}
spp-digifilm() { sppc "sop://broker.sopcast.com:3912/149253" ;}
spp-digiworld() { sppc "sop://broker.sopcast.com:3912/148260" ;}
spp-discoverychannel() { sppc "sop://broker.sopcast.com:3912/256241" ;}
spp-discoveryid() { sppc "sop://broker.sopcast.com:3912/256244" ;}
spp-discoveryscience() { sppc "sop://broker.sopcast.com:3912/256243" ;}
spp-disneychannel() { sppc "sop://broker.sopcast.com:3912/253031" ;}
spp-disneyjunior() { sppc "sop://broker.sopcast.com:3912/256239" ;}
spp-diva() { sppc "sop://151.80.76.190:3912/253034" ;}
spp-divauniversal() { sppc "sop://broker.sopcast.com:3912/253034" ;}
spp-ducktv() { sppc "sop://broker.sopcast.com:3912/148259" ;}
spp-euforia() { sppc "sop://broker.sopcast.com:3912/253473" ;}
spp-filmcafe() { sppc "sop://broker.sopcast.com:3912/256238" ;}
spp-hbo() { sppc "sop://broker.sopcast.com:3912/259497" ;}
spp-hbo2() { sppc "sop://broker.sopcast.com:3912/149259" ;}
spp-historychannel() { sppc "sop://broker.sopcast.com:3912/253032" ;}
spp-kanald() { sppc "sop://broker.sopcast.com:3912/149258" ;}
spp-looktv() { sppc "sop://broker.sopcast.com:3912/148262" ;}
spp-megamax() { sppc "sop://broker.sopcast.com:3912/256328" ;}
spp-minimax() { sppc "sop://broker.sopcast.com:3912/148263" ;}
spp-mpfm() { sppc "sop://broker.sopcast.com:3912/148261" ;}
spp-natgeowild() { sppc "sop://broker.sopcast.com:3912/253037" ;}
spp-nationalgeographic() { sppc "sop://broker.sopcast.com:3912/148248" ;}
spp-nickelodeon() { sppc "sop://broker.sopcast.com:3912/253472" ;}
spp-paramount() { sppc "sop://broker.sopcast.com:3912/253033" ;}
spp-prima() { sppc "sop://151.80.76.190:3912/148086" ;}
spp-primatv() { sppc "sop://broker.sopcast.com:3912/148086" ;}
spp-procinema() { sppc "sop://broker.sopcast.com:3912/148249" ;}
spp-protv() { sppc "sop://broker.sopcast.com:3912/149252" ;}
spp-realitateatv() { sppc "sop://broker.sopcast.com:3912/253036" ;}
spp-romaniatv() { sppc "sop://broker.sopcast.com:3912/148258" ;}
spp-tlc() { sppc "sop://broker.sopcast.com:3912/148256" ;}
spp-traveltv() { sppc "sop://broker.sopcast.com:3912/148885" ;}
spp-tvpaprika() { sppc "sop://broker.sopcast.com:3912/148881" ;}
spp-tv1000() { sppc "sop://broker.sopcast.com:3912/256337" ;}
spp-tvr1() { sppc "sop://broker.sopcast.com:3912/148085" ;}
spp-tvr1() { sppc "sop://151.80.76.190:3912/148085" ;}
spp-zutv() { sppc "sop://broker.sopcast.com:3912/148252" ;}

# format channel list quicker
soprip() {
  if [ $# -lt 1 ]
  then
    echo -e "turn sopcast channel listing into functions"
    echo -e "http://sopcast.ucoz.com/search/?q=sopcast+full+2016"
    echo -e "\nUsage:\n$0 <filename.txt>"

    return 1
  fi

  # lowercase list; rm spaces/empty lines; merge name and link
  LIST=$(cat "$1" | tr '[:upper:]' '[:lower:]' | sed 's/ //g' | sed '$!N;s/\n/ /' | sed '/^$/d')
  echo $LIST | while read line; do
    SOPNAME=$(echo $line | awk '{print $1}')
    SOPLINK=$(echo $line | awk '{print $2}')
    # print into functions format
    echo "spp-"$SOPNAME"() { spp \""$SOPLINK"\" ;}"
  done
}


#}}}
#-------- MPSYT-Youtube Channels {{{
#------------------------------------------------------
# tutorial video: https://www.youtube.com/watch?v=VE2iCBkIs8E
mpsyt-movie-flicksandthecity() { mpsyt user UCS5C4dC1Vc3EzgeDO-Wu3Mg ;}
mpsyt-collider() { mpsyt user ColliderVideos ;}
mpsyt-collider-movietalk() { mpsyt pl "https://www.youtube.com/playlist?list=PLayt6616lBcmbuEa2cRW7Xe4_NrnVrxXn" ;}
mpsyt-collider-tvtalk() { mpsyt pl "https://www.youtube.com/playlist?list=PLayt6616lBcnTXiFU58Zqf3Ot8zwY32a7" ;}
mpsyt-collider-jedicouncil() { mpsyt pl "https://www.youtube.com/playlist?list=PLayt6616lBcnqEWU6U0D8I95SUiqVU3DR" ;}
mpsyt-collider-heroes() { mpsyt pl "https://www.youtube.com/playlist?list=PLayt6616lBcnaH7ltMEq0h8jBlfU79kwg" ;}
mpsyt-collider-mailbag() { mpsyt pl "https://www.youtube.com/playlist?list=PLayt6616lBcnuYS9PZhp3jgOSlb9BzaKs" ;}
mpsyt-collider-spoilers() { mpsyt pl "https://www.youtube.com/playlist?list=PLayt6616lBclxpYg1JdmqUYQnKCCiPcPd" ;}
mpsyt-collider-arrow() { mpsyt pl "https://www.youtube.com/playlist?list=PLayt6616lBcleKplDKkFuxLrcL9-7Gw8T" ;}
mpsyt-collider-flash() { mpsyt pl "https://www.youtube.com/playlist?list=PLayt6616lBcmOgOIwVNJV0G6YerPH_Fhp" ;}
mpsyt-collider-starwarsrebels() { mpsyt pl "https://www.youtube.com/playlist?list=PLayt6616lBckZWQgRqTXB2CYRdzNuhBJX" ;}
mpsyt-collider-walkingdead() { mpsyt pl "https://www.youtube.com/playlist?list=PLayt6616lBckJSHjt2QlwJ91YmNb_oH7k" ;}
mpsyt-afterbuzz-arrowaftershow() { mpsyt pl PL6THzna6gLceNeZoXKUOoDeO7cwI57rJn ;}
mpsyt-afterbuzz-flash() { mpsyt pl "https://www.youtube.com/playlist?list=PL6THzna6gLcdfHMhXnGy-O0kS0q-muucC" ;}
mpsyt-afterbuzz-gameofthrones() { mpsyt pl PL0404DAD1AD037666 ;}
mpsyt-thestreamtv-arrow() { mpsyt pl "https://www.youtube.com/playlist?list=PLgh_e6sv2kpr40BXrvZ2qONoSlxFspXGK" ;}
mpsyt-thestreamtv-flash() { mpsyt pl "https://www.youtube.com/playlist?list=PLgh_e6sv2kprr9KHr94poccrwkAILkCcU" ;}
mpsyt-btt-beyondthetrailer() { mpsyt user beyondthetrailer ;}
mpsyt-btt-thinkabouttheink() { mpsyt user thinkabouttheink ;}
mpsyt-movie-watchmojo() { mpsyt user watchmojo ;}
mpsyt-movie-robertjones() { mpsyt user owiseone1 ;}
mpsyt-movie-emergencyawesome() { mpsyt user emergencyawesome ;}
mpsyt-comic-variantcomics() { mpsyt user VariantComics ;}
mpsyt-tv-emergencyawesome() { mpsyt user emergencyawesome ;}
mpsyt-pickers-craigslisthunter() { mpsyt user Deepinthecity7 ;}
mpsyt-game-angryjoeshow() { mpsyt user AngryJoeShow ;}
mpsyt-game-cinemassacre() { mpsyt user cinemassacre ;}
mpsyt-game-craigslistgamefinds() { mpsyt user craigslistgamefinds ;}
mpsyt-game-happyconsolegamer() { mpsyt user happyconsolegamer ;}
mpsyt-game-jamesnintendonerd() { mpsyt user jamesnintendonerd ;}
mpsyt-game-gaminghistorian() { mpsyt user mcfrosticles ;}
mpsyt-game-metaljesusrocks() { mpsyt user metaljesusrocks ;}
mpsyt-game-ljndefender() { mpsyt user CygnusDestroyer20XX ;}
mpsyt-game-kacydagamenerd() { mpsyt user UCIPTb01OYV-H7iEBx7qjZwA ;}
mpsyt-game-retroliberty() { mpsyt user retroliberty ;}
mpsyt-game-lazygamereviews() { mpsyt user phreakindee ;}
mpsyt-game-bizznes17() { mpsyt user bizzNES17 ;}
mpsyt-game-gamester81() { mpsyt user Gamester81 ;}
mpsyt-game-seejayare() { mpsyt user SeeJayAre ;}
mpsyt-greatmilitarybattles() { mpsyt user greatmilitarybattles ;}
mpsyt-greentvgreentv() { mpsyt user greentvgreentv ;}
mpsyt-homeorganizing() { mpsyt user homeorganizing ;}
mpsyt-linux-linuxgamecast() { mpsyt user linuxgamecast ;}
mpsyt-linux-jupiterbroadcasting() { mpsyt user jupiterbroadcasting ;}
mpsyt-midwaysimplicity() { mpsyt user midwaysimplicity ;}
mpsyt-midwaysimplicity-mtohami() { mpsyt user mtohami ;}
mpsyt-minimalism-carriesimple() { mpsyt user UCtauuxrTG1yon8CNsgqhDkg ;}
mpsyt-minimalism-discernmylife() { mpsyt user UCJPp8gkjxH4T3A8rYO1S52A ;}
mpsyt-minimalism-poetskinny() { mpsyt user UC4O0Vd3UxFXGX-UQNelwTag ;}
mpsyt-minimalism-ticoandtina() { mpsyt user ticoandtina ;}
mpsyt-minimalism-unconventionalliving() { mpsyt user UC7uuFb0QztC-yC2CrcS-lJw ;}
mpsyt-minimalism-zenminimalism() { mpsyt user UCpD5Hqe60AJ79fupvuA6F1Q ;}
mpsyt-mma-arielhelwani() { mpsyt user arielhelwani ;}
mpsyt-mma-ufconfox() { mpsyt user UFCONFOXofficial ;}
mpsyt-mma-gracieacademy() { mpsyt user gracieacademy ;}
mpsyt-mma-graciebreakdown() { mpsyt user graciebreakdown ;}
mpsyt-mma-karynbryant() { mpsyt user karynbryant ;}
mpsyt-mma-mmaheat() { mpsyt user mmaheat ;}
mpsyt-mma-mmafightingonsbn() { mpsyt user mmafightingonsbn ;}
mpsyt-mma-thefightnetwork() { mpsyt user thefightnetwork ;}
mpsyt-mma-themmanuts() { mpsyt user themmanuts ;}
mpsyt-mma-ufc() { mpsyt user ufc ;}
mpsyt-mma-uncutsports() { mpsyt user uncutsports ;}
mpsyt-movie-cinefix() { mpsyt user CineFix ;}
mpsyt-peakmoment() { mpsyt user peakmoment ;}
mpsyt-poetskinny() { mpsyt user poetskinny ;}
mpsyt-poetskinnyUnleashed() { mpsyt user PoetskinnyUnleashed ;}
mpsyt-tinyhouse-kirstendirksen() { mpsyt user kirstendirksen ;}
mpsyt-tinyhouse-livingbigtinyhouse() { mpsyt user livingbigtinyhouse ;}
mpsyt-tinyhouse-relaxshacksDOTcom() { mpsyt user relaxshacksDOTcom ;}
mpsyt-tinyhouse-tinyhousegj() { mpsyt user tinyhousegj ;}
mpsyt-tmw-askhodgetwins() { mpsyt user askhodgetwins ;}
mpsyt-tmw-fastingtwins() { mpsyt user fastingtwins ;}
mpsyt-tmw-getfit4women() { mpsyt user getfit4women ;}
mpsyt-tmw-hodgetwins() { mpsyt user hodgetwins ;}
mpsyt-tmw-hodgetwinsonsports() { mpsyt user hodgetwinsonsports ;}
mpsyt-tmw-twinmuscleworkout() { mpsyt user twinmuscleworkout ;}
mpsyt-vanlife-aclarino() { mpsyt user AClarino ;}
mpsyt-vanlife-aguyagirlandacampervan() { mpsyt user UCVQCQJyZQcIioTDQ4SACvZQ ;}
mpsyt-vanlife-christravels() { mpsyt user tylerdurdeno9 ;}
mpsyt-vanlife-exploringalternatives() { mpsyt user explorealternatives ;}
mpsyt-vanlife-gonewiththewynns() { mpsyt user gonewiththewynns ;}
mpsyt-vanlife-justincredible() { mpsyt user JustinCredibleTV ;}
mpsyt-vanlife-nomadicfanatic() { mpsyt user nomadicfanatic ;}
mpsyt-vanlife-sailinglavagabonde() { mpsyt user UCZdQjaSoLjIzFnWsDQOv4ww ;}
mpsyt-vanlife-thetravelingtroy() { mpsyt user TheTravelingTroy ;}
mpsyt-vanlife-vanliving() { mpsyt user UCY0mtdgxJEj1X_kHcJUIHdg ;}
mpsyt-vanlife-findingsimon() { mpsyt user shelbyandsimon ;}
mpsyt-walkingdead() { mpsyt pl "http://www.youtube.com/playlist?list=PLC7EC9FB2E211A261" ;}
mpsyt-walkingdead-talkingdead() { mpsyt pl "http://www.youtube.com/playlist?list=PLP63B9XPsQt3H_5xGXifFxFJE7-RsKFb6" ;}
mpsyt-walkingdead-webisodes() { mpsyt pl "http://www.youtube.com/playlist?list=PLC09448134D906619" ;}
mpsyt-wwefannation() { mpsyt user wwefannation ;}

# }}}
#-------- Youtube-Viewer Channels {{{
#------------------------------------------------------
# tutorial video: http://www.youtube.com/watch?v=FnJ67oAxVQ4
# watch/login/comment/search/download...etc video on youtube, all from cli
# https://github.com/trizen/youtube-viewer
yt-listen() { youtube-viewer -n $@ ;}	# no video, music/audio only
yt-music() { youtube-viewer -n --category=Music --top ;}	# show top music list
yts-movie-movieclipstrailer() { youtube-viewer -u UCi8e0iOVk1fEOogdfu4YgfA ;}
yts-amcmovietalk() { youtube-viewer -p PLBFB97E5B9494EEBD ;}
yts-amcmovietalk-mailbag() { youtube-viewer -p PLYNW0PN4_jrqlBqzAVRv3rfpo6nhzJnKp ;}
yts-amctheatres() { youtube-viewer -u amctheatres ;}
yts-afterbuzz-arrowaftershow() { youtube-viewer -p PL6THzna6gLceNeZoXKUOoDeO7cwI57rJn ;}
yts-afterbuzz-gameofthrones() { youtube-viewer -p PL0404DAD1AD037666 ;}
yts-afterbuzz-revolution() { youtube-viewer -p PL6THzna6gLccSY_0Cmoy6DvfH0iC8fyLR ;}
yts-btt-beyondthetrailer() { youtube-viewer -u beyondthetrailer ;}
yts-btt-thinkabouttheink() { youtube-viewer -u thinkabouttheink ;}
yts-comic-watchmojo() { youtube-viewer -u watchmojo ;}
yts-game-cinemassacre() { youtube-viewer -u cinemassacre ;}
yts-game-craigslistgamefinds() { youtube-viewer -u craigslistgamefinds ;}
yts-game-happyconsolegamer() { youtube-viewer -u happyconsolegamer ;}
yts-game-jamesnintendonerd() { youtube-viewer -u jamesnintendonerd ;}
yts-game-metaljesusrocks() { youtube-viewer -u metaljesusrocks ;}
yts-game-mcfrosticles() { youtube-viewer -u mcfrosticles ;}
yts-game-seejayare() { youtube-viewer -u SeeJayAre ;}
yts-game-retroliberty() { youtube-viewer -u retroliberty ;}
yts-greatmilitarybattles() { youtube-viewer -u greatmilitarybattles ;}
yts-greentvgreentv() { youtube-viewer -u greentvgreentv ;}
yts-homeorganizing() { youtube-viewer -u homeorganizing ;}
yts-linuxgamecast() { youtube-viewer -u linuxgamecast ;}
yts-jupiterbroadcasting() { youtube-viewer -u jupiterbroadcasting ;}
yts-minimalism-carriesimple() { youtube-viewer -u UCtauuxrTG1yon8CNsgqhDkg ;}
yts-minimalism-poetskinny() { youtube-viewer -u UC4O0Vd3UxFXGX-UQNelwTag ;}
yts-minimalism-ticoandtina() { youtube-viewer -u ticoandtina ;}
yts-minimalism-unconventionalliving() { youtube-viewer -u UC7uuFb0QztC-yC2CrcS-lJw ;}
yts-minimalism-zenminimalism() { youtube-viewer -u UCpD5Hqe60AJ79fupvuA6F1Q ;}
yts-midwaysimplicity() { youtube-viewer -u midwaysimplicity ;}
yts-midwaysimplicity-mtohami() { youtube-viewer -u mtohami ;}
yts-mma-arielhelwani() { youtube-viewer -u arielhelwani ;}
yts-mma-fueltv() { youtube-viewer -u fueltv ;}
yts-mma-gracieacademy() { youtube-viewer -u gracieacademy ;}
yts-mma-graciebreakdown() { youtube-viewer -u graciebreakdown ;}
yts-mma-karynbryant() { youtube-viewer -u karynbryant ;}
yts-mma-mmaheat() { youtube-viewer -u mmaheat ;}
yts-mma-mmafightingonsbn() { youtube-viewer -u mmafightingonsbn ;}
yts-mma-thefightnetwork() { youtube-viewer -u thefightnetwork ;}
yts-mma-themmanuts() { youtube-viewer -u themmanuts ;}
yts-mma-ufc() { youtube-viewer -u ufc ;}
yts-mma-uncutsports() { youtube-viewer -u uncutsports ;}
yts-peakmoment() { youtube-viewer -u peakmoment ;}
yts-poetskinny() { youtube-viewer -u poetskinny ;}
yts-poetskinnyunleashed() { youtube-viewer -u PoetskinnyUnleashed ;}
yts-tinyhouse-kirstendirksen() { youtube-viewer -u kirstendirksen ;}
yts-tinyhouse-livingbigtinyhouse() { youtube-viewer -u livingbigtinyhouse ;}
yts-tinyhouse-relaxshacksDOTcom() { youtube-viewer -u relaxshacksDOTcom ;}
yts-tinyhouse-tinyhousegj() { youtube-viewer -u tinyhousegj ;}
yts-tmw-askhodgetwins() { youtube-viewer -u askhodgetwins ;}
yts-tmw-fastingtwins() { youtube-viewer -u fastingtwins ;}
yts-tmw-getfit4women() { youtube-viewer -u getfit4women ;}
yts-tmw-hodgetwins() { youtube-viewer -u hodgetwins ;}
yts-tmw-hodgetwinsonsports() { youtube-viewer -u hodgetwinsonsports ;}
yts-tmw-twinmuscleworkout() { youtube-viewer -u twinmuscleworkout ;}
yts-vanlife-christravels() { youtube-viewer -u tylerdurdeno9 ;}
yts-vanlife-happilyhouseless() { youtube-viewer -u TheNomadicvanman ;}
yts-vanlife-justincredible() { youtube-viewer -u JustinCredibleTV ;}
yts-walkingdead() { youtube-viewer -p PLC7EC9FB2E211A261 ;}
yts-walkingdead-talkingdead() { youtube-viewer -p PLP63B9XPsQt3H_5xGXifFxFJE7-RsKFb6 ;}
yts-walkingdead-webisodes() { youtube-viewer -p PLC09448134D906619 ;}
yts-wwefannation() { youtube-viewer -u wwefannation ;}
## }}}
#-------- NVLC Podcast RSS {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=7y_58wpHuFE
# DESC: play local and internet media using ncurses VLC

nvlc-player() { nvlc ${1:-cdda://} ;}		# other cdrom; cdda:///dev/cdrom ; cdda:///dev/sr0 ; cdda:///dev/sr1
nvlc-podcast() { nvlc -S podcast --podcast-urls "$@" ;}
podcast-nba-shaq() { nvlc-podcast "http://www.podcastone.com/podcast?categoryID2=779" ;}
podcast-mma-mmahour() { nvlc-podcast "http://feeds.feedburner.com/aol/fanhouse/mmahour/audio?format=xml" ;}
podcast-mma-mmabeat() { nvlc-podcast "http://feeds.podtrac.com/ZGWlPI2WWyVk" ;}
podcast-mma-mmajunkie() { nvlc-podcast "http://feeds.feedburner.com/MMAjunkieRadio?format=xml" ;}
podcast-mma-mmaproradio() { nvlc-podcast "http://feeds.feedburner.com/ProMmaRadio" ;}
podcast-mma-chaelsonnen() { nvlc-podcast "http://feeds.feedburner.com/YoureWelcomeWithChaelSonnen?format=xml" ;}
podcast-mma-mmareport() { nvlc-podcast "http://staticv3.fightnetwork.com/xml/itunes_mma.rss" ;}
podcast-mma-joerogan() { nvlc-podcast "http://joeroganexp.joerogan.libsynpro.com/rss" ;}
podcast-wwf-stonecold() { nvlc-podcast "http://www.podcastone.com/podcast?categoryID2=436" ;}
podcast-wwf-chrisjericho() { nvlc-podcast "http://www.podcastone.com/podcast?categoryID2=593" ;}
podcast-wwf-liveaudiowrestling() { nvlc-podcast "http://staticv3.fightnetwork.com/xml/itunes_law.rss" ;}
podcast-wwf-solomonster() { nvlc-podcast "http://solomonster.podbean.com/feed/" ;}
podcast-wwf-bookert() { nvlc-podcast "https://api.radio.com/v2/podcast/rss/1240?format=MP3_128K" ;}
podcast-movie-schmoesknow() { nvlc-podcast "http://feeds.feedburner.com/SchmoesKnowMoviesPodcast" ;}
podcast-movie-dcmovienews() { nvlc-podcast "http://popcorntalknetwork.com/category/shows/dc-movie-news-podcast/feed/" ;}
podcast-fitness-jillianmichaels() { nvlc-podcast "http://feeds.sideshownetwork.tv/JillianMichaels" ;}
podcast-talk-jessahinton() { nvlc-podcast "http://www.podcastone.com/podcast?categoryID2=797" ;}
podcast-talk-emilymorse() { nvlc-podcast "http://feeds.feedburner.com/SexWithEmily" ;}
podcast-talk-lorasomoza() { nvlc-podcast "https://s3.amazonaws.com/betweenthesheetswithlora/feeds/betweenthesheetsrss.xml" ;}
podcast-starwars-farfaraway() { nvlc-podcast "http://geeknation.com/podcast-feed/far-far-away/" ;}
podcast-linux-thirdworldlinux() { nvlc-podcast "http://feeds.feedburner.com/thirdworldlinuxogg" ;}
podcast-linux-linuxactionshow() { nvlc-podcast "http://feeds.feedburner.com/TheLinuxActionShowOGG" ;}
podcast-linux-linuxunplugged() { nvlc-podcast "http://feeds.feedburner.com/linuxunogg" ;}
podcast-linux-techtalktoday() { nvlc-podcast "http://feedpress.me/t3ogg" ;}
podcast-linux-everydaylinux() { nvlc-podcast "http://elementopie.com/feeds/everydaylinux/feed.xml" ;}
podcast-linux-goinglinux() { nvlc-podcast "http://goinglinux.com/oggpodcast.xml" ;}
podcast-linux-hackerpublicradio() { nvlc-podcast "http://hackerpublicradio.org/hpr_total_ogg_rss.php" ;}
podcast-science-nprradiolab() { nvlc-podcast "http://feeds.wnyc.org/radiolab" ;}
podcast-science-startalk() { nvlc-podcast "http://feeds.soundcloud.com/users/soundcloud:users:38128127/sounds.rss" ;}
podcast-science-thisweekinscience() { nvlc-podcast "http://feeds.feedburner.com/twis/science/" ;}

#}}}
#-------- Internet Music {{{
# URL: http://whatnotlinux.blogspot.com/2013/02/somafm-and-digitally-imported-bash.html
somafm() {
while true; do local station;echo "Select a station to listen to:";select station in "Doomed" "Groove Salad" "Lush" "Suburbs of Goa" "Secret Agent" "Drone Zone" "Space Station" "cliqhop idm" "Digitalis" "Sonic Universe" "Boot Liquor" "Covers" "Illinois Street Lounge" "indie pop rocks" "PopTron" "Tags Trip" "Beat Bender" "Mission Control";do station=$(echo -n "$station"|tr '[:upper:]' '[:lower:]'|sed 's/ //g');break;done; mplayer -playlist http://somafm.com/startstream=${station}.pls; done;
}

difm() {
while true; do local station;echo "Select a station to listen to:";select station in "trance" "vocaltrance" "electro" "chillout" "eurodance" "house" "soulfulhouse" "funkyhouse" "tribalhouse" "harddance" "minimal" "techno" "progressive" "goapsy" "hardstyle" "hardcore" "djmixes" "lounge" "drumandbass" "classictechno" "ambient" "breaks" "futuresynthpop";do station=$(echo -n "$station"|tr '[:upper:]' '[:lower:]'|sed 's/ //g');break;done; mplayer -playlist http://www.di.fm/mp3/${station}.pls; done;
}

#}}}
#-------- Acestream CLI (Streaming P2P Videos) {{{
#------------------------------------------------------
# DESC: view streaming videos using acestream live feeds
# LINK: https://github.com/jonian/acestream-launcher
# FEED: google keyword: acestream://
#       https://www.google.com/#q=acestream://&tbs=qdr:w
#       http://www.acesoplisting.in/
#       http://arenavision.in/
#       http://streams.magazinmixt.ro/

acestream-cvlc() { acestream-launcher --player cvlc "$@" ;}
acestream-mpv() { acestream-launcher --player mpv "$@" ;}
acestream-mplayer() { acestream-launcher --player mplayer "$@" ;}

# choose a player (default is cvlc)
ACE_PLAYER=cvlc
# ACE_PLAYER=mpv

acc-bbcone-eng() { acestream-launcher --player "$ACE_PLAYER" acestream://964d4a6632bf9c8c088de94e12a4597b2173e291 ;}
acc-tele5-spa() { acestream-launcher --player "$ACE_PLAYER" acestream://97f0eaa031804b7c9f5b7f60599047254d9128b1 ;}
acc-espn-eng() { acestream-launcher --player "$ACE_PLAYER" acestream://5d25598468b68aabc1d908921cea98062c7f8739 ;}
acc-espn-deportes-spa() { acestream-launcher --player "$ACE_PLAYER" acestream://0a0be3253e0374f5f6323391c62b244eed5673c6 ;}
acc-beinsports-fr() { acestream-launcher --player "$ACE_PLAYER" acestream://b5950a56db8f722876dc74443d74b565fb99368f ;}

# }}}
#-------- Simple HTTP Server v3 {{{
#------------------------------------------------------
# DEMO: http://www.youtube.com/watch?v=FFIjMYzkHhc
# DESC: python http server, host files and folders

SimpleHTTPserver() {
  if which python2 &>/dev/null; then
    python2 -m SimpleHTTPServer "${1:-8000}"
  elif which python3 &>/dev/null; then
    python3 -m http.server "${1:-8000}"
  else
    echo "Requires python2 or python3 for server features"
  fi
}
#}}}
#-------- Transmission CLI v2 {{{
#------------------------------------------------------
# DEMO: http://www.youtube.com/watch?v=ee4XzWuapsE
# DESC: lightweight torrent client; interface from cli, webui, ncurses, and gui
# WEBUI:  http://localhost:9091/transmission/web/
# 	  http://192.168.1.xxx:9091/transmission/web/

tsm-clearcompleted() {
  transmission-remote -l | grep 100% | grep Done | \
  awk '{print $1}' | xargs -n 1 -I % transmission-remote -t % -r
}

# display numbers of ip being blocked by the blocklist (credit: smw from irc #transmission)
tsm-count() {
  echo "Blocklist rules:" $(curl -s --data \
  '{"method": "session-get"}' localhost:9091/transmission/rpc -H \
  "$(curl -s -D - localhost:9091/transmission/rpc | grep X-Transmission-Session-Id)" \
  | cut -d: -f 11 | cut -d, -f1)
}

# DEMO: http://www.youtube.com/watch?v=TyDX50_dC0M
# DESC: merge multiple ip blocklist into one
# LINK: https://github.com/gotbletu/shownotes/blob/master/blocklist.sh
tsm-blocklist() {
  echo -e "${Red} Stopping Transmission Daemon ${Color_Off}"
    killall transmission-daemon
  echo -e "${Yellow} Updating Blocklist ${Color_Off}"
    ~/.scripts/blocklist.sh
  echo -e "${Green} Restarting Transmission Daemon ${Color_Off}"
    transmission-daemon
    sleep 3
  echo -e "${Red}--------------- Number of IP Blocking -------------${Color_Off}"
    tsm-count
}
tsm-altdownloadspeed() { transmission-remote --downlimit "${@:-900}" ;}	# download default to 900K, else enter your own
tsm-altdownloadspeedunlimited() { transmission-remote --no-downlimit ;}
tsm-limitupload() { transmission-remote --uplimit "${@:-10}" ;}	# upload default to 10kpbs, else enter your own
tsm-limituploadunlimited() { transmission-remote --no-uplimit ;}
tsm-askmorepeers() { transmission-remote -t"$1" --reannounce ;}
tsm-daemon() { transmission-daemon ;}
tsm-quit() { killall transmission-daemon ;}
tsm-add() { transmission-remote --add "$1" ;}
tsm-pause() { transmission-remote -t"$1" --stop ;}		# <id> or all
tsm-start() { transmission-remote -t"$1" --start ;}		# <id> or all
tsm-purge() { transmission-remote -t"$1" --remove-and-delete ;} # delete data also
tsm-remove() { transmission-remote -t"$1" --remove ;}		# leaves data alone
tsm-info() { transmission-remote -t"$1" --info ;}
tsm-speed() { while true;do clear; transmission-remote -t"$1" -i | grep Speed;sleep 1;done ;}
tsm-grep() { transmission-remote --list | grep -i "$1" ;}
tsm() { transmission-remote --list ;}

# DEMO: http://www.youtube.com/watch?v=hLz7ditUwY8
# LINK: https://github.com/fagga/transmission-remote-cli
# DESC: ncurses frontend to transmission-daemon
tsm-ncurse() { transmission-remote-cli ;}

#}}}
#-------- Ubooquity Ebook Comicbook Server # {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=qfLG9nKt3ew
# LINK: http://vaemendis.net/ubooquity/
# DESC: personal comic and ebook server

PATH_UBOOQUITY=~/.ubooquity
ubooquity() { cd $PATH_UBOOQUITY && nohup java -jar $PATH_UBOOQUITY/Ubooquity.jar -webadmin -headless >/dev/null 2>&1& }
ubooquity-gui() { cd $PATH_UBOOQUITY && nohup java -jar $PATH_UBOOQUITY/Ubooquity.jar -webadmin >/dev/null 2>&1& }
ubooquity-quit() { kill $(ps -ef | grep '[U]booquity.jar' | awk '{print $2}') ;}
ubooquity-status() {
  if ps -ef | grep '[U]booquity.jar' > /dev/null
  then
    echo "Ubooquity is running on http://localhost:2202"
    echo "To change settings use http://localhost:2202/admin"
  else
    echo "Ubooquity has stopped"
  fi
}

# }}}
#-------- Capture RTMP Streams (URL Sniffing) {{{
#------------------------------------------------------
# DEMO: http://www.youtube.com/watch?v=u1dQ81HT4AU
# REFF: https://github.com/gotbletu/shownotes/blob/master/rtmpdump_sniff_your_own_tutorial.txt
#       http://pclosmag.com/html/Issues/201104/page19.html

sniff-begin() { sudo iptables -t nat -A OUTPUT -p tcp --dport 1935 -m owner \! --uid-owner root -j REDIRECT ;}
sniff-capture-rtmpsrv() { rtmpsrv ;}
sniff-capture-rtmpsuck() { rtmpsuck ;}
sniff-end() { sudo iptables -t nat -D OUTPUT -p tcp --dport 1935 -m owner \! --uid-owner root -j REDIRECT ;}
tsniff-begin() { sudo tcpdump -ieth0 -nn -A | grep -e"rtmp" -e"connect" -e"play" > /tmp/tcpoutput.txt ;}
tsniff-less() { less /tmp/tcpoutput.txt ;}

#}}}
#-------- FreeTuxTV - Free IPTV Using Existing Database {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=ZTLIGP98zpk
# DESC: free iptv working list from freetuxtv webtv database
# REFF: http://database.freetuxtv.net/site/index
#       How to use nvlc: https://www.youtube.com/watch?v=7y_58wpHuFE

freetuxtv-nolang() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=none&isp=all" ;}
freetuxtv-french() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=fr&isp=all" ;}
freetuxtv-english() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=en&isp=all" ;}
freetuxtv-turkish() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=tr&isp=all" ;}
freetuxtv-spanish() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=es&isp=all" ;}
freetuxtv-german() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=de&isp=all" ;}
freetuxtv-arabic() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=ar&isp=all" ;}
freetuxtv-italian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=it&isp=all" ;}
freetuxtv-russian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=ru&isp=all" ;}
freetuxtv-chinese() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=zh&isp=all" ;}
freetuxtv-slovak() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=sk&isp=all" ;}
freetuxtv-czech() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=cs&isp=all" ;}
freetuxtv-hungerian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=hu&isp=all" ;}
freetuxtv-portuguese() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=pt&isp=all" ;}
freetuxtv-bulgarian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=bg&isp=all" ;}
freetuxtv-romanian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=ro&isp=all" ;}
freetuxtv-serbo-croatian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=sh&isp=all" ;}
freetuxtv-serbian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=sr&isp=all" ;}
freetuxtv-dutch() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=nl&isp=all" ;}
freetuxtv-croatian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=hr&isp=all" ;}
freetuxtv-persian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=fa&isp=all" ;}
freetuxtv-polish() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=pl&isp=all" ;}
freetuxtv-hindi() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=hi&isp=all" ;}
freetuxtv-albanian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=sq&isp=all" ;}
freetuxtv-macedonian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=mk&isp=all" ;}
freetuxtv-indonesian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=in&isp=all" ;}
freetuxtv-greek() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=el&isp=all" ;}
freetuxtv-korean() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=ko&isp=all" ;}
freetuxtv-hebrew() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=iw&isp=all" ;}
freetuxtv-ukrainian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=uk&isp=all" ;}
freetuxtv-vietnamese() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=vi&isp=all" ;}
freetuxtv-slovenian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=sl&isp=all" ;}
freetuxtv-thai() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=th&isp=all" ;}
# freetuxtv-japanese() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=ja&isp=all" ;}
freetuxtv-finnish() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=fi&isp=all" ;}
freetuxtv-lithuanian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=lt&isp=all" ;}
freetuxtv-danish() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=da&isp=all" ;}
freetuxtv-kurdish() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=ku&isp=all" ;}
freetuxtv-swedish() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=sv&isp=all" ;}
freetuxtv-azerbaijani() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=az&isp=all" ;}
freetuxtv-amharic() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=am&isp=all" ;}
freetuxtv-malay() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=ms&isp=all" ;}
freetuxtv-norwegian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=no&isp=all" ;}
freetuxtv-bengali-bangla() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=bn&isp=all" ;}
freetuxtv-armenian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=hy&isp=all" ;}
freetuxtv-georgian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=ka&isp=all" ;}
freetuxtv-urdu() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=ur&isp=all" ;}
# freetuxtv-latin() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=la&isp=all" ;}
freetuxtv-catalan() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=ca&isp=all" ;}
freetuxtv-tagalog() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=tl&isp=all" ;}
freetuxtv-estonian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=et&isp=all" ;}
freetuxtv-latvian-lettish() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=lv&isp=all" ;}
freetuxtv-afrikaans() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=af&isp=all" ;}
freetuxtv-kazakh() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=kk&isp=all" ;}
freetuxtv-cambodian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=km&isp=all" ;}
# freetuxtv-malayalam() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=ml&isp=all" ;}
freetuxtv-somali() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=so&isp=all" ;}
# freetuxtv-gujarati() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=gu&isp=all" ;}
freetuxtv-mongolian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=mn&isp=all" ;}
freetuxtv-maltese() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=mt&isp=all" ;}
freetuxtv-turkmen() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=tk&isp=all" ;}
freetuxtv-irish() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=ga&isp=all" ;}
# freetuxtv-interlingua() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=ia&isp=all" ;}
freetuxtv-moldavian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=mo&isp=all" ;}

# }}}

####################
##### MISC #########
####################


####################
#### MULTIMEDIA ####
####################

#-------- FFMPEG X11GRAB Screencasting {{{
#------------------------------------------------------
# DEMO: http://www.youtube.com/watch?v=mNz5Lrc06_s
# DESC: record desktop using ffmpeg (capture single mic source)
# REFF: http://ubuntuforums.org/showthread.php?t=1392026
#       https://github.com/gotbletu/wikimd/blob/master/ffmpeg-compile.md
#       https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu
#       https://trac.ffmpeg.org/wiki/Capture/ALSA
#       https://trac.ffmpeg.org/wiki/Capture/Desktop
#       http://nowardev.wordpress.com/2011/05/23/how-to-screencast/

# ffmpeg location
# FF_RECORDER=/usr/bin/ffmpeg
FF_RECORDER=~/Compile/ffmpeg/bin/ffmpeg

# use "arecord -L" to find name (this is the better option since your device can change numbers on reboot)
# use "arecord -l" to find mic number
# pavucontrol if using pulseaudio
# FF_MIC=pulse
# FF_MIC=hw:3,0
FF_MIC=front:CARD=Snowball


# mic channel mono or stereo
FF_MIC_CH="1"

# scale down resolution if needed
# ${FF_SCALE[*]}
# FF_SCALE=(-vf scale=1280:720)

FF_OUTPUT_MOVIE=~/Public/screencast/mm_movie_baking.mkv
FF_OUTPUT_VIDEO=~/Public/screencast/vv_video_baking.mkv
FF_OUTPUT_AUDIO=~/Public/screencast/aa_audio_baking.mp3

# movie = video and audio
# videotrack = video only
# audiotrack = audio only
ffcast-fullscreen-movie() {
  $FF_RECORDER -thread_queue_size 512 -f alsa -ac $FF_MIC_CH -i $FF_MIC -async 1 -f x11grab -r 30 \
  -s $(xwininfo -root | grep 'geometry' |awk '{print $2;}' | cut -d\+ -f1) \
  -i :0.0 -vcodec libx264 -pix_fmt yuv444p -preset ultrafast -crf 0 \
  -acodec libmp3lame -ab 320k -threads 0 -y $FF_OUTPUT_MOVIE
}

ffcast-fullscreen-videotrack() {
  $FF_RECORDER -f x11grab -r 30 \
  -s $(xwininfo -root | grep 'geometry' |awk '{print $2;}' | cut -d\+ -f1) \
  -i :0.0 -vcodec libx264 -pix_fmt yuv444p -preset ultrafast -crf 0 \
  -threads 0 -y $FF_OUTPUT_VIDEO
}

ffcast-audiotrack() {
  $FF_RECORDER -f alsa -ac $FF_MIC_CH -i $FF_MIC \
  -acodec libmp3lame -ab 320k \
  -threads 0 -y $FF_OUTPUT_AUDIO
}

# single window: select a window with mouse cursor to record
ffcast-window-movie() {
  INFO=$(xwininfo -frame)
  WIN_GEO=$(echo $INFO | grep -oEe 'geometry [0-9]+x[0-9]+' | grep -oEe '[0-9]+x[0-9]+')
  WIN_XY=$(echo $INFO | grep -oEe 'Corners:\s+\+[0-9]+\+[0-9]+' | grep -oEe '[0-9]+\+[0-9]+' | sed -e 's/\+/,/' )

  $FF_RECORDER -thread_queue_size 512 -f alsa -ac $FF_MIC_CH -i $FF_MIC -async 1 -f x11grab -r 30 \
  -s $WIN_GEO -i :0.0+$WIN_XY -vcodec libx264 -pix_fmt yuv444p \
  -preset ultrafast -crf 0 -acodec libmp3lame -ab 320k \
  -threads 0 -y $FF_OUTPUT_MOVIE
}

ffcast-window-videotrack() {
  INFO=$(xwininfo -frame)
  WIN_GEO=$(echo $INFO | grep -oEe 'geometry [0-9]+x[0-9]+' | grep -oEe '[0-9]+x[0-9]+')
  WIN_XY=$(echo $INFO | grep -oEe 'Corners:\s+\+[0-9]+\+[0-9]+' | grep -oEe '[0-9]+\+[0-9]+' | sed -e 's/\+/,/' )

  $FF_RECORDER -f x11grab -r 30 \
  -s $WIN_GEO -i :0.0+$WIN_XY -vcodec libx264 -pix_fmt yuv444p \
  -preset ultrafast -crf 0 \
  -threads 0 -y $FF_OUTPUT_VIDEO
}


# example references
# worked well on ffmpeg 0.11.1
# ffmpeg -f pulse -ac 1 -i hw:3,0 -async 1 -f x11grab -r 30 -s $(xwininfo -root | grep 'geometry' |awk '{print $2;}' | cut -d\+ -f1) -i :0.0 -vcodec libx264 -pix_fmt yuv444p -preset ultrafast -crf 0 -acodec libmp3lame -ab 128k -threads 0 -y ~/Public/screencast/aa_screencast_baking.mkv

# }}}
#-------- PulseAudio Switcher CLI v2 {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# REFF: http://askubuntu.com/a/18210

pa-global() {
  if [ $# -lt 1 ]; then
  echo -e "pulseaudio redirect audio of all running app to another device"
  echo -e "\nUsage:\n$0 <device_index_number>"
  echo -e "\nExample:\n$0 0 \n"
  echo "==============="
  echo "Sound Devices"
  pacmd list-sinks | awk '/index/ || /name:/'
  return 1
  fi

  # list all apps in playback tab (ex: cmus, mplayer, vlc)
  inputs=($(pacmd list-sink-inputs | awk '/index/ {print $2}'))
  # set the default output device
  pacmd set-default-sink $1 &> /dev/null
  # apply the changes to all running apps to use the new output device
  for i in ${inputs[*]}; do pacmd move-sink-input $i $1 &> /dev/null; done
}
pa-solo() {
  if [ $# -lt 2 ]; then
  echo -e "pulseaudio redirect audio of one running app to another device"
  echo -e "\nUsage:\n$0 <app_index_number> <device_index_number>"
  echo -e "\nExample:\n$0 2302 0 \n"
  echo "==============="
  echo "Running Apps"
  pacmd list-sink-inputs | awk '/index/ || /application.name /'
  echo "==============="
  echo "Sound Devices"
  pacmd list-sinks | awk '/index/ || /name:/'
  return 1
  fi

  # set the default output device
  pacmd set-default-sink "$2" &> /dev/null
  # apply changes to one running app to use the new output device
  pacmd move-sink-input "$1" "$2" &> /dev/null
}

#}}}
#-------- Convert to Audio {{{
#------------------------------------------------------
# REFF: https://trac.ffmpeg.org/wiki/Encode/MP3
#       https://trac.ffmpeg.org/wiki/Encode/AAC
#       https://trac.ffmpeg.org/wiki/TheoraVorbisEncodingGuide

convert2audio-mp3() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.m4a"
    echo -e "$0 file1.m4a file2.m4a file3.m4a"
    echo -e "$0 *.m4a"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".mp3 ]
    do
      ffmpeg -i "$arg" -codec:a libmp3lame -qscale:a 2 "${arg%.*}".mp3
    done
  done
}

convert2audio-m4a() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.mp3"
    echo -e "$0 file1.mp3 file2.mp3 file3.mp3"
    echo -e "$0 *.mp3"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".m4a ]
    do
      ffmpeg -i "$arg" -codec:a aac -qscale:a 6 -strict experimental "${arg%.*}".m4a
    done
  done
}

convert2audio-ogg() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.mp3"
    echo -e "$0 file1.mp3 file2.mp3 file3.mp3"
    echo -e "$0 *.mp3"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".ogg ]
    do
      ffmpeg -i "$arg" -codec:a libvorbis -qscale:a 5 -vn "${arg%.*}".ogg
    done
  done
}

convert2audio-wav() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.mp3"
    echo -e "$0 file1.mp3 file2.mp3 file3.mp3"
    echo -e "$0 *.mp3"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".wav ]
    do
      ffmpeg -i "$arg" "${arg%.*}".wav
    done
  done
}

convert2audio-webm() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.mp3"
    echo -e "$0 file1.mp3 file2.mp3 file3.mp3"
    echo -e "$0 *.mp3"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".webm ]
    do
      ffmpeg -i "$arg" -codec:a libvorbis -qscale:a 5 -vn "${arg%.*}".webm
    done
  done
}

convert2audio-wavmono() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.mp3"
    echo -e "$0 file1.mp3 file2.mp3 file3.mp3"
    echo -e "$0 *.mp3"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}"-monoaudiotrack.wav ]
    do
      ffmpeg -i "$arg" -codec:a pcm_mulaw -ar 8000 -ac 1 "${arg%.*}"-monoaudiotrack.wav
    done
  done
}

convert2audio-wma() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.mp3"
    echo -e "$0 file1.mp3 file2.mp3 file3.mp3"
    echo -e "$0 *.mp3"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".wma ]
    do
      ffmpeg -i "$arg" -codec:a wmav2 -b:a 128k "${arg%.*}".wma
    done
  done
}

# }}}
#-------- Convert to Video {{{
#------------------------------------------------------
# REFF: http://linuxconfig.org/ffmpeg-audio-format-conversions

convert2video-mp4-h265() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.avi"
    echo -e "$0 file1.avi file2.avi file3.avi"
    echo -e "$0 *.avi"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".mp4 ]
    do
      # ffmpeg -i "$arg" -codec:v libx264 -preset medium -crf 22 -codec:a aac -qscale:a 6 -strict experimental "${arg%.*}".mp4
      # ffmpeg -i "$arg" -codec:v libx265 -preset medium -crf 28 -codec:a aac -qscale:a 6 -strict experimental "${arg%.*}".mp4
      ffmpeg -i "$arg" -codec:v libx265 -preset medium -crf 28 -codec:a aac -qscale:a 6 "${arg%.*}".mp4
      # ffmpeg -i input -c:v libx265 -preset medium -crf 28 -c:a aac -b:a 128k output.mp4
    done
  done
}

convert2video-mp4() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.avi"
    echo -e "$0 file1.avi file2.avi file3.avi"
    echo -e "$0 *.avi"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".mp4 ]
    do
      ffmpeg -i "$arg" -codec:v libx264 -preset medium -crf 22 -codec:a aac -qscale:a 6 -strict experimental "${arg%.*}".mp4
    done
  done
}

convert2video-avi() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.mp4"
    echo -e "$0 file1.mp4 file2.mp4 file3.mp4"
    echo -e "$0 *.mp4"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".avi ]
    do
      ffmpeg -i "$arg" -codec:v mpeg4 -vtag xvid -qscale:v 3 -codec:a libmp3lame -qscale:a 4 "${arg%.*}".avi
    done
  done
}
convert2video-ogv() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.mp4"
    echo -e "$0 file1.mp4 file2.mp4 file3.mp4"
    echo -e "$0 *.mp4"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".ogv ]
    do
      ffmpeg -i "$arg" -codec:v libtheora -qscale:v 7 -codec:a libvorbis -qscale:a 5 "${arg%.*}".ogv
    done
  done
}
convert2video-mpg() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.mp4"
    echo -e "$0 file1.mp4 file2.mp4 file3.mp4"
    echo -e "$0 *.mp4"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".mpg ]
    do
      ffmpeg -i "$arg" -codec:v mpeg2video -qscale:v 2 -codec:a mp2 -b:a 192k "${arg%.*}".mpg
    done
  done
}
convert2video-mkv() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.mp4"
    echo -e "$0 file1.mp4 file2.mp4 file3.mp4"
    echo -e "$0 *.mp4"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".mkv ]
    do
      ffmpeg -i "$arg" -codec:v libx264 -preset medium -crf 22 -codec:a libvorbis -qscale:a 5 "${arg%.*}".mkv
    done
  done
}
convert2video-webm() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.mp4"
    echo -e "$0 file1.mp4 file2.mp4 file3.mp4"
    echo -e "$0 *.mp4"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".webm ]
    do
      ffmpeg -i "$arg" -codec:v libvpx -crf 10 -b:v 1M -codec:a libvorbis "${arg%.*}".webm
    done
  done
}

# }}}

####################
##### OFFICE #######
####################

#-------- Calibre CLI v3 [last updated July 29, 2016] {{{
#------------------------------------------------------
# DEMO: http://www.youtube.com/watch?v=FeoVsC4U_0A
# LINK: http://manual.calibre-ebook.com/cli/calibredb.html
# DESC: ebook manager supports many formats and devices; interfaces with cli, webui, gui

# define your library path
cbbook=~/MA_Calibre/Book
cbcomic=~/MA_Calibre/Comic
cbdojinshi=~/MA_Calibre/Dojinshi
cbsuper=~/MA_Calibre/Super

cmx-list() {
  if [ $# -lt 1 ]; then
    echo -e "calibredb list files within a library"
    echo -e "\nUsage:\n$0 <library>"
    echo -e "\nExample:\n$0 \$cbcomic\n"
    return 1
  fi

  calibredb list -f authors,title,tags,rating --library-path "$1"
}

cmx-search() {
  if [ $# -lt 2 ]; then
    echo -e "calibredb search files within a library"
    echo -e "\nUsage:\n$0 <library> <keywords>"
    echo -e "\nExample:\n$0 \$cbcomic marvel"
    echo -e "$0 \$cbcomic 'the walking dead'\n"
    return 1
  fi

  calibredb list -s "${@:2}" -f authors,title,tags,rating --library-path "$1"
}

cmx-add() {
  if [ $# -lt 2 ]; then
    echo -e "calibredb add new files to a library"
    echo -e "\nUsage:\n$0 <library> <file>"
    echo -e "\nExample:\n$0 \$cbcomic file.cbz"
    echo -e "$0 \$cbcomic file1.cbz file2.cbz"
    echo -e "$0 \$cbcomic file.epub file2.pdf file3.cbr\n"
    return 1
  fi

  calibredb add "${@:2}" --library-path "$1"
}

cmx-remove() {
  if [ $# -lt 2 ]; then
    echo -e "calibredb remove files from a library"
    echo -e "\nUsage:\n$0 <library> <id>"
    echo -e "$0 <library> <range>"
    echo -e "\nExample:\n$0 \$cbcomic 100"
    echo -e "$0 \$cbcomic 50-55"
    echo -e "$0 \$cbcomic 100,120-127"
    return 1
  fi

  calibredb remove "${@:2}" --library-path "$1"
}

cmx-show() {
  if [ $# -lt 2 ]; then
    echo -e "calibredb show file metadata from a library"
    echo -e "\nUsage:\n$0 <library> <id>"
    echo -e "\nExample:\n$0 \$cbcomic 16"
    return 1
  fi

  calibredb show_metadata "${@:2}" --library-path "$1" | html2text
}

# DESC: Calibre WebUI content server (open brower to http://192.168.1.xxx:port )
# LINK: http://manual.calibre-ebook.com/cli/calibre-server.html
cmx-server() {
  calibre-server -p 57770 --daemonize --with-library "$cbbook"
  calibre-server -p 57771 --daemonize --with-library "$cbcomic"
  calibre-server -p 57772 --daemonize --with-library "$cbdojinshi"
  calibre-server -p 57773 --daemonize --with-library "$cbsuper"
}
cmx-quit() { kill $(ps -ef | grep -i '[C]alibre-server' | awk '{print $2}') ;}
cmx-recipes() { ebook-convert --list-recipes | less ;}

#}}}

####################
##### STORAGE ######
####################

#-------- Clonezilla CLI (Clone and Restore Image) {{{
#------------------------------------------------------
### Full Disk Clone and Restore
clonezilla-disk-cloning() {
  if [ $# -lt 2 ]; then
    echo -e "clone fulldisk device to image"
    echo -e "\nUsage: $0 <output_file> <device>"
    echo -e "\nExample: $0 mydesktop sdx"
    echo -e "\nNote: <device> does not have numbers at the end (sdx)"
    echo -e "Note2: <output_file> will be saved to your current path"
    return 1
  fi

  # check if the device is mounted
  mount_status=$(mount | grep /dev/"$2" | wc -l)
  if [ "$mount_status" -ne 0 ]
  then
    lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$2"
    echo -e "${Red}/dev/$2 is mounted. You have to unmount /dev/$2 ${Color_Off}"
    return 1
  fi

  # set current pwd as the output path
  sudo sed -i 's:ocsroot=.*:ocsroot='\""$PWD"\"':g' /etc/drbl/drbl.conf

  # add current date to output filename
  OUTPUT_FILE="$1_clonezilla_fulldisk_`date +'%Y_%m_%d'`"
  DEVICE_DRIVE="$2"

  # start cloning
  sudo ocs-sr -q2 -c -j2 -z1p -i 5000000 -sc -p true savedisk "$OUTPUT_FILE" "$DEVICE_DRIVE"

  # set output file permissions to everyone
  sudo chmod -R 777 "$OUTPUT_FILE"
}

clonezilla-disk-restore() {
  if [ $# -lt 2 ]; then
    echo -e "restore fulldisk image to device"
    echo -e "\nUsage: $0 <input_file> <device>"
    echo -e "\nExample: $0 mydesktop_clonezilla_fulldisk_2016_07_02 sdx"
    echo -e "\nNote: <device> does not have numbers at the end (sdx)"
    return 1
  fi

  # check if the device is mounted
  mount_status=$(mount | grep /dev/"$2" | wc -l)
  if [ "$mount_status" -ne 0 ]
  then
    lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$2"
    echo -e "${Red}/dev/$2 is mounted. You have to unmount /dev/$2 ${Color_Off}"
    return 1
  fi

  # start restore process
  sudo /usr/sbin/ocs-sr -g auto -e1 auto -e2 -c -r -j2 -p true restoredisk "$1" "$2"
}

### Partition Clone and Restore
clonezilla-partition-cloning() {
  if [ $# -lt 2 ]; then
    echo -e "clone device partition to image"
    echo -e "\nUsage: $0 <output_file> <device>"
    echo -e "\nExample: $0 mylaptop sdx2"
    echo -e "\nNote: partition <device> usually have numbers at the end (sdx1)"
    echo -e "Note2: <output_file> will be saved to your current path"
    return 1
  fi

  # check if the device is mounted
  mount_status=$(mount | grep /dev/"$2" | wc -l)
  if [ "$mount_status" -ne 0 ]
  then
    lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$2"
    echo -e "${Red}/dev/$2 is mounted. You have to unmount /dev/$2 ${Color_Off}"
    return 1
  fi

  # set current pwd as the output path
  sudo sed -i 's:ocsroot=.*:ocsroot='\""$PWD"\"':g' /etc/drbl/drbl.conf

  # partition number
  PART_NUM=$(echo "$2" | sed 's/[^0-9]*//g')

  # add current date and partition number to output filename
  OUTPUT_FILE="$1_clonezilla_partition${PART_NUM}_`date +'%Y_%m_%d'`"
  DEVICE_DRIVE="$2"

  # start cloning
  sudo /usr/sbin/ocs-sr -q2 -c -j2 -z1p -i 5000000 -sc -p true saveparts "$OUTPUT_FILE" "$DEVICE_DRIVE"

  # set output file permissions to everyone
  sudo chmod -R 777 "$OUTPUT_FILE"
}

clonezilla-partition-restore() {
  if [ $# -lt 2 ]; then
    echo -e "restore image to device partition"
    echo -e "\nUsage: $0 <input_file> <device>"
    echo -e "\nExample: $0 mylaptop_clonezilla_partition2_2016_07_02 sdx2"
    echo -e "\nNote: partition <device> usually have numbers at the end (sdx1)"
    return 1
  fi

  # check if the device is mounted
  mount_status=$(mount | grep /dev/"$2" | wc -l)
  if [ "$mount_status" -ne 0 ]
  then
    lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$2"
    echo -e "${Red}/dev/$2 is mounted. You have to unmount /dev/$2 ${Color_Off}"
    return 1
  fi

  # start restore process
  sudo /usr/sbin/ocs-sr -g auto -e1 auto -e2 -c -r -j2 -k -p true restoreparts "$1" "$2"
}

# http://drbl.org/faq/fine-print.php?path=./2_System/102_restore_image_to_different_partition.faq#102_restore_image_to_different_partition.faq
clonezilla-partition-restore-differentparts() {
  if [ $# -lt 2 ]; then
    echo -e "restore image to device partition"
    echo -e "\nUsage: $0 <input_file> <device>"
    echo -e "\nExample: $0 mylaptop_clonezilla_partition2_2016_07_02 sdx2"
    echo -e "\nNote: partition <device> usually have numbers at the end (sdx1)"
    return 1
  fi

  # check if the device is mounted
  mount_status=$(mount | grep /dev/"$2" | wc -l)
  if [ "$mount_status" -ne 0 ]
  then
    lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$2"
    echo -e "${Red}/dev/$2 is mounted. You have to unmount /dev/$2 ${Color_Off}"
    return 1
  fi

  # create symlinks to change partition
  cd "$1"
  TARGET_DIR="/tmp/$1"
  mkdir -p "$TARGET_DIR"
  for arg in *; do
    ln -s "$PWD/$arg" "$TARGET_DIR/$arg"
  done

  # rename partition name in parts file
  rm "$TARGET_DIR/parts"
  echo "$2" > "$TARGET_DIR/parts"

  # rename partition filename (example: sdd1.vfat-ptcl-img.gz.aa --> sdd5.vfat-ptcl-img.gz.aa)
  IMG_NAME=$(ls "$TARGET_DIR" | grep .aa$)
  IMG_NAME_CUT=$(ls "$TARGET_DIR" | grep .aa$ | cut -d'.' -f2- )
  mv "$TARGET_DIR/$IMG_NAME" "$TARGET_DIR/$2.$IMG_NAME_CUT"

  # GET_BASENAME=$(basename "$1")

  # set root path
  cd "$TARGET_DIR"
  cd ..
  sudo sed -i 's:ocsroot=.*:ocsroot='\""$PWD"\"':g' /etc/drbl/drbl.conf

  # start restore process
  sudo /usr/sbin/ocs-sr -g auto -e1 auto -e2 -c -r -j2 -k -p true restoreparts "$1" "$2"

  # cleanup
  rm -rf "$TARGET_DIR"
}

# http://www.tonmann.com/2015/07/how-to-temporary-mount-clonezilla-images-to-restore-single-files-or-folders/
clonezilla-extract-img() {
  if [ $# -lt 2 ]; then
    echo -e 'unpack clonezilla gzip image so we can mount the image (foo-img.gz.aa ==> foo.img)'
    echo -e "\nUsage: $0 <input_file> <output_file>"
    echo -e "\nExample: $0 sdd1.vfat-ptcl-img.gz.aa /media/Storage/sdd1.vfat-ptcl.img"
    return 1
  fi
  sudo cat "${1%.*}"* | sudo gzip -d -c | sudo partclone.restore -W -o "$2"
  sudo chmod 777 "$2"
}

# }}}
#-------- Format USB Stick/HDD/SDCards {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=7txO1cdNJsQ
# DESC: format USB Stick/Hard Drive; It will create a single partition that fills the whole drive space

format2usb-ext2() {
  if [ $# -lt 2 ]; then
    echo -e "format and create a partition that fills up the whole device"
    echo -e "\nUsage: $0 <label> <device>"
    echo -e "Example: $0 MY_USB sdx"
    return 1
  fi

  # check if the device is mounted
  mount_status=$(mount | grep /dev/"$2" | wc -l)
  if [ "$mount_status" -ne 0 ]
  then
    lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$2"
    echo -e "${Red}/dev/$2 is mounted. You have to unmount /dev/$2 ${Color_Off}"
    return 1
  fi

  # list out all drives
  lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep --color -E "$2|$"
  
  echo -n -e "${Red}WARNING: You are about to FORMAT a drive. Do you want to continue? [y/n] ${Color_Off}"
  read REPLY
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    echo "... You chose to continue"
  else
    return 1
  fi

  # delete existing partition then create new linux partition
  echo -e "d\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\no\nn\np\n1\n\n\nw" | sudo fdisk /dev/"$2"

  # delete partiton x8 using d\n\n
  # d    delete a partition
  #      default, partition

  # o    create a new empty DOS partition table
  # n    add a new partition
  # p    print the partition table
  # 1    partition number 1
  #      default, start immediately after preceding partition
  #      default, extend partition to end of disk
  # w    write table to disk and exit

  # format device
  echo -e "y\n" | sudo mkfs.ext2 -L "$1" /dev/"$2"1

  # set permission
  mkdir -p /tmp/testmount
  sudo mount /dev/"$2"1 /tmp/testmount
  sudo chmod -R 777 /tmp/testmount
  sudo umount /tmp/testmount
  rmdir /tmp/testmount
}

format2usb-ext3() {
  if [ $# -lt 2 ]; then
    echo -e "format and create a partition that fills up the whole device"
    echo -e "\nUsage: $0 <label> <device>"
    echo -e "Example: $0 MY_USB sdx"
    return 1
  fi

  # check if the device is mounted
  mount_status=$(mount | grep /dev/"$2" | wc -l)
  if [ "$mount_status" -ne 0 ]
  then
    lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$2"
    echo -e "${Red}/dev/$2 is mounted. You have to unmount /dev/$2 ${Color_Off}"
    return 1
  fi

  # list out all drives
  lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep --color -E "$2|$"

  echo -n -e "${Red}WARNING: You are about to FORMAT a drive. Do you want to continue? [y/n] ${Color_Off}"
  read REPLY
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    echo "... You chose to continue"
  else
    return 1
  fi

  # delete existing partition then create new linux partition
  echo -e "d\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\no\nn\np\n1\n\n\nw" | sudo fdisk /dev/"$2"

  # delete partiton x8 using d\n\n
  # d    delete a partition
  #      default, partition

  # o    create a new empty DOS partition table
  # n    add a new partition
  # p    print the partition table
  # 1    partition number 1
  #      default, start immediately after preceding partition
  #      default, extend partition to end of disk
  # w    write table to disk and exit

  # format device
  echo -e "y\n" | sudo mkfs.ext3 -L "$1" /dev/"$2"1

  # set permission
  mkdir -p /tmp/testmount
  sudo mount /dev/"$2"1 /tmp/testmount
  sudo chmod -R 777 /tmp/testmount
  sudo umount /tmp/testmount
  rmdir /tmp/testmount
}

format2usb-ext4() {
  if [ $# -lt 2 ]; then
    echo -e "format and create a partition that fills up the whole device"
    echo -e "\nUsage: $0 <label> <device>"
    echo -e "Example: $0 MY_USB sdx"
    return 1
  fi

  # check if the device is mounted
  mount_status=$(mount | grep /dev/"$2" | wc -l)
  if [ "$mount_status" -ne 0 ]
  then
    lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$2"
    echo -e "${Red}/dev/$2 is mounted. You have to unmount /dev/$2 ${Color_Off}"
    return 1
  fi

  # list out all drives
  lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep --color -E "$2|$"

  echo -n -e "${Red}WARNING: You are about to FORMAT a drive. Do you want to continue? [y/n] ${Color_Off}"
  read REPLY
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    echo "... You chose to continue"
  else
    return 1
  fi

  # delete existing partition then create new linux partition
  echo -e "d\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\no\nn\np\n1\n\n\nw" | sudo fdisk /dev/"$2"

  # delete partiton x8 using d\n\n
  # d    delete a partition
  #      default, partition

  # o    create a new empty DOS partition table
  # n    add a new partition
  # p    print the partition table
  # 1    partition number 1
  #      default, start immediately after preceding partition
  #      default, extend partition to end of disk
  # w    write table to disk and exit

  # format device
  echo -e "y\n" | sudo mkfs.ext4 -L "$1" /dev/"$2"1

  # set permission
  mkdir -p /tmp/testmount
  sudo mount /dev/"$2"1 /tmp/testmount
  sudo chmod -R 777 /tmp/testmount
  sudo umount /tmp/testmount
  rmdir /tmp/testmount
}

format2usb-fat32() {
  if [ $# -lt 2 ]; then
    echo -e "format and create a partition that fills up the whole device"
    echo -e "\nUsage: $0 <label> <device>"
    echo -e "Example: $0 MY_USB sdx"
    return 1
  fi

  # check if the device is mounted
  mount_status=$(mount | grep /dev/"$2" | wc -l)
  if [ "$mount_status" -ne 0 ]
  then
    lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$2"
    echo -e "${Red}/dev/$2 is mounted. You have to unmount /dev/$2 ${Color_Off}"
    return 1
  fi

  # list out all drives
  lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep --color -E "$2|$"

  echo -n -e "${Red}WARNING: You are about to FORMAT a drive. Do you want to continue? [y/n] ${Color_Off}"
  read REPLY
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    echo "... You chose to continue"
  else
    return 1
  fi

  # delete existing partition then create new linux partition
  echo -e "d\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\no\nn\np\n1\n\n\nt\nb\nw" | sudo fdisk /dev/"$2"

  # delete partiton x8 using d\n\n
  # d    delete a partition
  #      default, partition

  # o    create a new empty DOS partition table
  # n    add a new partition
  # p    print the partition table
  # 1    partition number 1
  #      default, start immediately after preceding partition
  #      default, extend partition to end of disk
  # t    change a partition type (L to list all types)
  # b    W95 FAT32
  # w    write table to disk and exit

  # fat32 likes the labels to be in uppercase
  label_name=$(echo "$1" | tr '[:lower:]' '[:upper:]')

  # format device
  sudo mkfs.fat -F 32 -n "$label_name" -I /dev/"$2"1

  # set permission
  mkdir -p /tmp/testmount
  sudo mount /dev/"$2"1 /tmp/testmount
  sudo chmod -R 777 /tmp/testmount
  sudo umount /tmp/testmount
  rmdir /tmp/testmount
}

format2usb-ntfs() {
  if [ $# -lt 2 ]; then
    echo -e "format and create a partition that fills up the whole device"
    echo -e "\nUsage: $0 <label> <device>"
    echo -e "Example: $0 MY_USB sdx"
    return 1
  fi

  # check if the device is mounted
  mount_status=$(mount | grep /dev/"$2" | wc -l)
  if [ "$mount_status" -ne 0 ]
  then
    lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$2"
    echo -e "${Red}/dev/$2 is mounted. You have to unmount /dev/$2 ${Color_Off}"
    return 1
  fi

  # list out all drives
  lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep --color -E "$2|$"

  echo -n -e "${Red}WARNING: You are about to FORMAT a drive. Do you want to continue? [y/n] ${Color_Off}"
  read REPLY
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    echo "... You chose to continue"
  else
    return 1
  fi

  # delete existing partition then create new linux partition
  echo -e "d\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\no\nn\np\n1\n\n\nt\n7\nw" | sudo fdisk /dev/"$2"

  # delete partiton x8 using d\n\n
  # d    delete a partition
  #      default, partition

  # o    create a new empty DOS partition table
  # n    add a new partition
  # p    print the partition table
  # 1    partition number 1
  #      default, start immediately after preceding partition
  #      default, extend partition to end of disk
  # t    change a partition type (L to list all types)
  # 7    HPFS/NTFS/exFAT
  # w    write table to disk and exit

  # format device
  sudo mkfs.ntfs -f -L "$1" /dev/"$2"1

  # set permission
  mkdir -p /tmp/testmount
  sudo mount /dev/"$2"1 /tmp/testmount
  sudo chmod -R 777 /tmp/testmount
  sudo umount /tmp/testmount
  rmdir /tmp/testmount
}

# }}}
#-------- Mount Disc Images (ISO|NRG|BIN|MDF|IMG) {{{
#------------------------------------------------------

mount-discimage() {
  if [ $# -lt 1 ]
  then
    echo -e "mount ISO filesystem images (iso,nrg,bin,mdf,img)"
    echo -e "\nUsage:\n$0 <disc_image>"
    echo -e "\nExample:\n$0 disc_image.iso"
    echo -e "$0 disc_image.iso disc_image2.bin disc_image3.mdf"
    echo -e "$0 *.iso"
    return 1
  fi

  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    fuseiso -n -p "$arg" "/tmp/$arg"
  done

  # if mount was sucessful then cd and ls the mountpoint
  if [ $? -eq 0 ]; then
    cd "/tmp/$1" && ls
  else
    return 1
  fi
}

unmount-discimage() {
  if [ $# -lt 1 ]
  then
    echo -e "unmount ISO filesystem images (iso,nrg,bin,mdf,img)"
    echo -e "\nUsage:\n$0 <mount_point|disc_image>"
    echo -e "\nExample:\n$0 disc_image.iso"
    echo -e "$0 disc_image.iso disc_image2.bin"
    echo -e "$0 mount_point1 mount_point2"
    echo -e "cd /tmp && $0 mount_point"
    echo -e "cd /tmp && $0 *.iso"
    return 1
  fi

  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    fusermount -u "$arg"
  done
}

mount-img() {
  if [ $# -lt 1 ]; then
    echo -e "mount image to access files"
    echo -e "\nUsage: $0 <img_file>"
    echo -e "\nExample: $0 foo.img"
    return 1
  fi

  mkdir -p "/tmp/$1"
  sudo mount "$PWD/$1" "/tmp/$1"

  # if mount was sucessful then cd and ls the mountpoint
  if [ $? -eq 0 ]; then
    cd "/tmp/$1" && ls
  else
    return 1
  fi
}

unmount-img() {
  if [ $# -lt 1 ]; then
    echo -e "unmount image"
    echo -e "\nUsage: $0 <img_file>"
    echo -e "\nExample: $0 foo.img"
    return 1
  fi

  sudo umount "/tmp/$1"
  rmdir "/tmp/$1"
}

# }}}
#-------- Mount Archive (ISO|ZIP|RAR|TAR) {{{
#------------------------------------------------------
# http://ubuntuforums.org/showthread.php?t=1207096
mount-archive() {
  if [ $# -lt 1 ]
  then
    echo -e "mount archive files (iso|zip|rar|tar...etc)"
    echo -e "\nUsage:\n$0 <archive>"
    echo -e "\nExample:\n$0 file.zip"
    echo -e "$0 *.zip"
    return 1
  fi

  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    gvfs-mount "archive://$( ( echo -n 'file://' ; readlink -f $arg ; ) | perl -MURI::Escape -lne 'print uri_escape($_)')"
  done

  # if mount was sucessful then cd into gvfs dir and ls the mountpoint
  if [ $? -eq 0 ]; then
    cd "/run/user/$(id -u)/gvfs" && ls
  else
    return 1
  fi
}

unmount-archive() {
  if [ $# -lt 1 ]
  then
    echo -e "unmount archive files (iso|zip|rar|tar)"
    echo -e "\nUsage:\n$0 <mount_point>"
    echo -e "\nExample:\n$0 archive:host=file%253Afoo%bar.zip"
    echo -e "cd /run/user/${UID}/gvfs/ && $0 archive:host=file%253Afoo%bar.zip"
    return 1
  fi

  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    gvfs-mount -u "/run/user/$(id -u)/gvfs/$arg"
  done
}

# }}}

####################
##### OBSOLETE #####
####################
# Code that is still useful but I no longer use it, still here for references

#-------- Recordmydesktop CLI {{{
#------------------------------------------------------
# http://www.pclinuxos.com/forum/index.php/topic,97181.msg822796.html#msg822796
# Screen capture software
# Ctrl+C	Stop
# Ctrl+C x2	Cancle rendering
# BUG: RMD Adjusted recording window, which cuts 10 pixel from the height, thus we have to use offset -x -y
# https://wiki.archlinux.org/index.php/RecordMyDesktop
# http://sourceforge.net/p/recordmydesktop/discussion/590957/thread/cf788e96/
# https://groups.google.com/forum/#!topic/linux.debian.bugs.dist/reE8_9fqqAw
# native reso 1680x1050 -- > rmd reso 1080x1040, offset y axis -y 6
# SOUND LAG? lower the freq; 45000, 44100, 22050
# http://www.kkoncepts.net/blog/fixing-out-sync-audio-and-video-ffmpeg
RMD_OUTPUT=~/Public/screencast/rr_movie_baking.ogv

# Frequency; lower to fix sound lag; 45000, 44100, 22050
RMD_FREQ=22050

# Frames per second
RMD_FPS=30

# Channel (mono = 1 ; dual = 2)
RMD_CHANNELS=1

# SoundCard (pulse for pulseaudio; install pavucontrol to change pulse settings)
#            hw:0,1 for directly communicating with your soundcard
#            to get a list of sound device:
#            	arecord -l
#            	aplay -l
#            	cat /proc/asound/pcm
#            	alsamixer and hit F6
# FF_SOUNDCARD=pulse
# FF_SOUNDCARD=hw:0,1
RMD_SOUNDCARD=hw:3,0

rmd-all() { recordmydesktop --no-wm-check --no-frame --full-shots --fps $RMD_FPS --channels $RMD_CHANNELS --device $RMD_SOUNDCARD --freq $RMD_FREQ --overwrite -o $RMD_OUTPUT ;}

# Benq Monitor; 1680x1050 (make sure 2nd monitor is higher res)
# Initial recording window is set to:
# X:0   Y:0    Width:1680    Height:1050
# Adjusted recording window is set to:
# X:0   Y:0    Width:1680    Height:1056
rmd-benq() { recordmydesktop --no-wm-check --no-frame --full-shots --width 1680 --height 1050 --fps $RMD_FPS --channels $RMD_CHANNELS --device $RMD_SOUNDCARD --freq $RMD_FREQ --overwrite -o $RMD_OUTPUT ;}


# ProscanTV; 1920x1080 --> 1920x1072 ; X offset by 1680
# Initial recording window is set to:
# X:0   Y:0    Width:1920    Height:1080
# Adjusted recording window is set to:
# X:0   Y:4    Width:1920    Height:1072
rmd-proscantv() { recordmydesktop --no-wm-check --no-frame --full-shots -x 1680 --width 1920 --height 1072 --fps $RMD_FPS --channels $RMD_CHAN --device $RMD_DEV --freq $RMD_FREQ --overwrite -o $RMD_OUTPUT ;}

# Examples
# select window
# E1: (select window); recordmydesktop --no-frame --full-shots --fps 30 --channels 2 --freq 44100 --windowid $(xwininfo | awk '/Window id:/ {print $4}') --overwrite -o out.ogv ;}
# E2: recordmydesktop --no-wm-check --no-frame --width 1680 --height 1050 --fps 30 --channels 1 --device hw:3,0 --freq 44100 --overwrite -o out.ogv ;}
#E3: (fullscreen); recordmydesktop --no-frame --full-shots --fps 30 --channels 2 --freq 44100 --overwrite -o out.ogv ;}

#}}}
#-------- Air Comic Server # {{{
#------------------------------------------------------
# tutorial Video: http://www.youtube.com/watch?v=YceW_VcGA4A
# http://gnomewarrior32.blogspot.kr/2013/03/air-comic-server-english.html
ACSJar=~/.scripts/aircomic/AirComicServer.jar
ACSConf=~/.scripts/aircomic/AirComicServer.xml

cfg-aircomicserver() { $EDITOR $ACSConf ;}
aircomicserver() { nohup java -jar $ACSJar -c $ACSConf -n >/dev/null 2>&1& }
aircomicserver-lite() { nohup java -XX:+UseSerialGC -Xms32M -Xminf=5 -Xmaxf=10 -jar $ACSJar -c $ACSConf -n >/dev/null 2>&1& }
aircomicserver-gui() { nohup java -XX:+UseSerialGC -Xms32M -Xminf=5 -Xmaxf=10 -jar $ACSJar -c $ACSConf >/dev/null 2>&1& }
aircomicserver-quit() { kill $(ps -ef | grep '[A]irComicServer.jar' | awk '{print $2}') ;}
# }}}
#-------- Cherry Music Server # {{{
#------------------------------------------------------
# tutorial Video: https://www.youtube.com/watch?v=X2goFerMJDY

BIN_CHERRYMUSIC=~/.scripts/cherrymusic/cherrymusic
cherrymusic() { nohup python $BIN_CHERRYMUSIC --port 8442 >/dev/null 2>&1& }
cherrymusic-setup() { python $BIN_CHERRYMUSIC --setup --port 8442 ;}
cherrymusic-quit() { kill $(ps -ef | grep -i '[C]herrymusic' | awk '{print $2}') ;}
cfg-cherrymusic() { $EDITOR ~/.config/cherrymusic/cherrymusic.conf ;}

# }}}
#-------- Sharelin (Gnutella2 P2P Downloader) {{{
#------------------------------------------------------

# tutorial video: https://www.youtube.com/watch?v=Yi3JKyL-hxk
sharelin-daemon() { sharelin -d ;}
sharelin-quit() { killall sharelin ;}

# }}}
#-------- Aria2c WebUI {{{
#------------------------------------------------------
# downloader for torrents, magnet links, http, ftp, metalinks
# tutorial video: https://www.youtube.com/watch?v=LCr_0zFcbaM
alias magnet-to-torrent="aria2c -q --bt-metadata-only --bt-save-metadata"
aria2c-quit() {
   killall aria2c
   kill $(ps -ef | grep '[h]ttp.server' | awk '{print $2}')
   #kill $(ps -ef | grep '[S]impleHTTPServer' | awk '{print $2}')
}

aria2c-webui() {
    # download location
    DIR_DL=~/Downloads

    # run as daemon
    aria2c --enable-rpc --rpc-listen-all -D -d "$DIR_DL"


    # use python simplehttpserver to host the webui
    # this avoids download the index.html file on each computer
    # https://github.com/ziahamza/webui-aria2

    # path to the webui index.html
    DIR_WEBUI=~/.scripts/webui-aria2/

    # webui-aria2c uses port 6800 so we use 6801 for python_simple_http_server
    PORT=6801
    cd "$DIR_WEBUI"
    nohup python3 -m http.server "$PORT" >/dev/null 2>&1&

    # for older distro
    # nohup python2 -m SimpleHTTPServer "$PORT" >/dev/null 2>&1&

    echo "connect via http://localhost:$PORT or http://ip_address_of_server:$PORT"
}

# }}}
#-------- iPod 5G Device {{{
#------------------------------------------------------
# convert to ipod 5g compatible video format
# tutorial video: http://www.youtube.com/watch?v=gVVeR9KizBk

ipod5g() { HandBrakeCLI -i "$1" -o "${1%.*}.ipod5g.mp4" --preset="iPod" ;}
ipod5g-tsp() { tsp HandBrakeCLI -i "$1" -o "${1%.*}.ipod5g.mp4" --preset="iPod" ;}
ipod5g-rsync() {
# https://gist.github.com/nekobato/5998548
# including trailing slashes on $SRC
# rsync $SRC/Music/ $DEST/media/Ipod
rsync -avrm --delete-excluded --modify-window=2 --include '*/' --include '*.mp3' --exclude '*' "$1" "$2"
}

tsp-handbrake-normal() { tsp HandBrakeCLI -i "$1" -o "${1%.*}.normal.mp4" --preset="Normal" ;}
tsp-handbrake-high() { tsp HandBrakeCLI -i "$1" -o "${1%.*}.high.mp4" --preset="High Profile" ;}

# }}}

####################
##### QUEUE ########
####################
# Code that is working good but needs to be used for a while before including it to the next level up

#-------- FFMPEG X11GRAB Screencasting v2 (Mic + Speakers) {{{
#------------------------------------------------------
# DEMO: http://www.youtube.com/watch?v=mNz5Lrc06_s
# DESC: record desktop using ffmpeg (capture multiple source aka mic/speaker/others...etc)
# REFF: https://ask.fedoraproject.org/en/question/65662/recording-audio-from-mic-and-speakers-from-commandline/
#       https://www.youtube.com/watch?v=mEV2O8C272g (MrWhat record mic & speakers)
#       https://www.youtube.com/watch?v=Xbzh-T2kfJk (MrWhat keep audio synced)
#       https://www.youtube.com/watch?v=ynjFXmcpExE (MrWhat framedrop)

# list all audio sources
pa-sources() { pactl list sources | awk '/Source #/ ||/Name:/ || /Description:/ || /Sample Specification:/' ;}

# ffmpeg location
FFX_RECORDER=/usr/bin/ffmpeg
# FFX_RECORDER=~/Compile/ffmpeg/bin/ffmpeg

# speakers audio source (PC speakers or Headphones)
# note: using headphones since pc speakers will have audio feedback to mic
# FFX_SPEAKER="alsa_output.pci-0000_00_14.2.analog-stereo.monitor"
# FFX_SPEAKER_CH="2"
# FFX_SPEAKER_FREQ="44100"
FFX_SPEAKER="alsa_output.usb-NA_Lenovo_Wireless_Headset_W770-00.analog-stereo.monitor"
FFX_SPEAKER_CH="2"
FFX_SPEAKER_FREQ="32000"

# mic audio source
# note: when routed to pulseaudio the mic is very low
# so open pavucontrol > input device > [name of mic]
# then slide volume all the way to the right
# example: http://i.imgur.com/GFkifqB.png
FFX_MIC="alsa_input.usb-BLUE_MICROPHONES_Blue_Snowball-00.analog-mono"
FFX_MIC_CH="1"
FFX_MIC_FREQ="44100"

# sound system
FFX_SOUNDSYS="pulse"
# FFX_SOUNDSYS="alsa"

# resolution
FFX_RESO_FULL=$(xwininfo -root | grep 'geometry' |awk '{print $2;}' | cut -d\+ -f1)

# output location
FFX_OUTPUT_MOVIE=~/Public/screencast/mm_movie_baking.mkv
FFX_OUTPUT_VIDEO=~/Public/screencast/vv_video_baking.mkv
FFX_OUTPUT_AUDIO=~/Public/screencast/aa_audio_baking.mp3

ffxcast_fullscreen_movie() {
	$FFX_RECORDER \
	-f $FFX_SOUNDSYS -ac $FFX_SPEAKER_CH -ar $FFX_SPEAKER_FREQ -i $FFX_SPEAKER \
	-f $FFX_SOUNDSYS -ac $FFX_MIC_CH -ar $FFX_MIC_FREQ -i $FFX_MIC \
        -thread_queue_size 512 -f x11grab -r 30 -s $FFX_RESO_FULL -i :0.0 \
	-filter_complex "[0]asyncts[spkr],[1]asyncts[mic],[spkr][mic]amix=inputs=2" \
	-c:v libx264 -pix_fmt yuv420p -preset ultrafast -crf 0 \
	-c:a libmp3lame -ac 2 -ar 44100 -b:a 320k \
	-y $FFX_OUTPUT_MOVIE
}

# -vcodec libx264 -pix_fmt yuv444p -preset ultrafast -crf 0 \
# -acodec libmp3lame -ab 128k -ar 44100 -threads 0 -y $FF_OUTPUT_MOVIE

# ffmpeg \
# -f pulse -ac 2 -ar 44100 -i alsa_input.usb-BLUE_MICROPHONE_Blue_Snow­ball_201306-00-Snowball.analog-stereo \
# -f pulse -ac 2 -ar 44100 -i alsa_output.pci-0000_00_1b.0.analog-ster­eo.monitor \
# -f pulse -ac 2 -ar 44100 -i alsa_output.usb-Logitech_Inc_Logitech_US­B_Headset_H540_00000000-00-H540.iec958-s­tereo.monitor \
# -f x11grab -framerate 30 -video_size 1920x1080 -i :0 \
# -filter_complex \
# "[0]asyncts[m], \
# [1]asyncts[d], \
# [2]asyncts[h], \
# [m][d][h]amix=inputs=3" \
# -c:v libx264 -preset veryfast -crf 18 -pix_fmt yuv420p \
# -c:a libmp3lame -ac 2 -ar 44100 -b:a 320k \
# /home/b/Videos/AudioSync/AsyncTS_20150206.mkv

# different PRESET
# 1. -c:v libx264 -preset ultrafast -crf 18: Produced a 120.9 MB file at ~34-48% CPU load
# 2. -c:v libx264 -preset superfast -crf 18: Produced a 40.4 MB file at ~48-53% CPU load
# 3. -c:v libx264 -preset veryfast -crf 18: Produced a 26.1 MB file at ~62-78% CPU load

# different CRF
# 1. -c:v libx264 -preset ultrafast -crf 0 (Lossless): Produced a 471.7 MB file at ~32-50% CPU load
# 2. -c:v libx264 -preset ultrafast -crf 18: Produced a 120.9 MB file at ~34-48% CPU load
# 3. -c:v libx264 -preset ultrafast -crf 23: Produced a 67.1 MB file at ~32-45% CPU load
# 4. -c:v libx264 -preset ultrafast -crf 28: Produced a 31.1 MB file at ~30-40% CPU load

# image quality each setting produces (images are zoomed to in 285%)
# https://imgur.com/XF6t2Cv


# }}}
#-------- Alias Custom {{{
#------------------------------------------------------
# alias sudo='sudo -i'
# alias sudo='sudo '					# make aliases work with sudo
# alias ps="ps aux | grep -v grep | grep "
# alias ff="find . |grep "
# alias pp="ps aux |grep "
# alias oo="xdg-open "

# For emergencies
alias asdf='setxkbmap fr bepo'

alias xclipin='xclip -sel c -in <'
alias xclipout='xclip -sel c -out >'
alias psg='ps aux|grep -v grep|grep -i '
psgrep() { ps axuf | grep -v grep | grep "$@" -i --color=auto; }
alias sshxforwarding='ssh -XCc blowfish-cbc,arcfour'
alias sshxtrusted='ssh -Y'
alias stackexchange='lynx http://column80.com'		# lookup information
alias srb='surfraw -browser=$BROWSER'			# use for surfraw bookmarks
alias xev-keycode="xev | grep 'keycode\|button'"
# alias weechat='weechat-curses'
alias lsd='ls -1d */'					# ls folders only
alias l='ls -l'
alias lsf='ls --color=always -p | grep -v '/$''		# ls files only
alias lsa='ls -GghA'
alias lsx='ls -lX'
# alias lst='ls -Ggthrc'				# ls by time/changes, newest at bottom



# }}}
#-------- Functions {{{
#------------------------------------------------------

unlock() { keepassc -d ~/.keepass/masterlock.kdb ;}


# change font size (guake terminal)
# tutorial video: http://www.youtube.com/watch?v=i9aKFgxOjwQ
chfontsize() {
  # guake
  gconftool-2 --set '/apps/guake/style/font/style' --type string "Monospace ${1:-16}"
  
  #gnome-terminal
  dconf write /org/gnome/terminal/legacy/profiles:/$(dconf list /org/gnome/terminal/legacy/profiles:/)font "'Monospace ${1:-16}'"
}



# view markdown as manpages
# http://blog.metamatt.com/blog/2013/01/09/previewing-markdown-files-from-the-terminal/
mdless(){ pandoc -s -f markdown -t man "$*" | groff -T utf8 -man | less ;}

# quickly cd out of directories using numbers, example: up 2
up() { local x='';for i in $(seq ${1:-1});do x="$x../"; done;cd $x; }

# show file access permission
# http://unix.stackexchange.com/a/46921
file-permission() { stat --format '%a %n' "$@" ;}

# display mime of file application/zip, application/x-tar
file-type() { file --mime-type -b "$@" ;}

# call vim help page from shell prompt
function :h { vim +":h $1" +'wincmd o' +'nnoremap q :q!<CR>' ;}

# searches for manual locally or online
manned() {
  for arg in "$@"; do man $arg 2> /dev/null \
  || $arg -H 2> /dev/null || $arg -h 2> /dev/null \
  || $arg --help-all 2> /dev/null || $arg --help 2> /dev/null \
  || help $arg 2> /dev/null \
  || $BROWSERCLI "http://manned.org/browse/search?q=$@" 2> /dev/null \
  || $BROWSER "http://manned.org/browse/search?q=$@" 2> /dev/null \
  || open "http://manned.org/browse/search?q=$@" 2> /dev/null \
  || xdg-open "http://manned.org/browse/search?q=$@"
  done
}

# search commandlinefu.com
cmdfu() { curl "http://www.commandlinefu.com/commands/matching/$(echo "$@" \
	| sed 's/ /-/g')/$(echo -n $@ | base64)/plaintext" ;}

# display one random command from commandlinefu.com
cmdfu-random() { echo -e "`curl -sL http://www.commandlinefu.com/commands/random/json|sed -re 's/.*,"command":"(.*)","summary":"([^"]+).*/\\x1b[1;32m\2\\n\\n\\x1b[1;33m\1\\x1b[0m/g'`\n" ;}

# w3m browser with inline images
# https://plus.google.com/102499719144563443986/posts/Vja8W69iHoi
# tutorial video: http://www.youtube.com/watch?v=R2bMUtCOGko
w3mimg() { w3m -o imgdisplay=/usr/lib/w3m/w3mimgdisplay $1 ;}

#}}}
#-------- Clipboard and Upload {{{
#------------------------------------------------------
# DEMO: http://www.youtube.com/watch?v=fKP0FLp3uW0 (xclip)
# 	https://www.youtube.com/watch?v=Ww7Sl4d8F8A (pastebinit)
# DESC: copy/paste for linux machines (Mac style)

alias pbcopy='xclip -selection clipboard'	# copy to clipboard, ctrl+c, ctrl+shift+c
alias pbpaste='xclip -selection clipboard -o'	# paste from clipboard, ctrl+v, ctrl+shitt+v
alias pbselect='xclip -selection primary -o'	# paste from highlight, middle click, shift+insert
alias pbnoformatting='xclip -selection clipboard -o | xclip -selection clipboard'


# dump text from clipboard to pastebin server and copy link
alias pbclipboard2slexy='pbpaste | pastebinit -b "slexy.org" | pbcopy && echo "URL has been copied to clipboard" && pbpaste'
alias pbclipboard2sprungeus="pbpaste | curl -F 'sprunge=<-' http://sprunge.us | pbcopy && echo 'URL has been copied to clipboard' && pbpaste"
alias pbclipboard2ixio="pbpaste | curl -F 'f:1=<-' ix.io | pbcopy && echo 'URL has been copied to clipboard' && pbpaste"
alias pbclipboard2pastebindotcom='pbpaste | pastebinit -b "pastebin.com" | pbcopy && echo "URL has been copied to clipboard" && pbpaste'


alias pbuploadslexy='pbpaste | pastebinit -b "slexy.org" | pbcopy && echo "URL has been copied to clipboard" && pbpaste'

alias pbuploadsprungeus="cat "$@" | curl -F 'sprunge=<-' http://sprunge.us | pbcopy && echo 'URL has been copied to clipboard' && pbpaste"
alias pbuploadixio="cat "$1" | curl -F 'f:1=<-' ix.io | pbcopy && echo 'URL has been copied to clipboard' && pbpaste"



# }}}
#-------- Screenshot {{{
#------------------------------------------------------
# DEMO: http://www.youtube.com/watch?v=Hh8G1aBp8gc
# DESC: take screenshot fullscreen, single window or draw a box
export PATH_SCREENSHOT=~/Pictures/screenshots
pix() { scrot -d 2 "$PATH_SCREENSHOT/fullscr_`date +'%F_%Hh%Ms%S'`.png" ;}
pix-area() { sleep 2 && scrot -s "$PATH_SCREENSHOT/windowed_`date +'%F_%Hh%Ms%S'`.png" ;}

# }}}
#-------- Fuzzy Finder {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/playlist?list=PLqv94xWU9zZ2fMsMMDF4PjtNHCeBFbggD
# DESC: interactive fuzzy string matching
# LINK:  https://github.com/junegunn/fzf

# clipboard cli
# remove
fzf-anamnesis() {
  selected="$(anamnesis -l 1000 | tail -n +3 | awk -F" u" '{print $2}' | sed 's/^.//' | sed 's/\\n.)$//' | sed 's/.)$//' | sed '/^$/d' | sed 's/^ *//' | tac | fzf --tac --no-sort -e -i )"
  echo -n "$selected" | xclip -selection clipboard
}

anamnesis-clear() {
  anamnesis --stop
  rm -rf ~/.local/share/anamnesis
  anamnesis --start
}


fzf-dmenu() {
  # note: xdg-open has a bug with .desktop files, so we cant use that shit
  selected="$(ls /usr/share/applications | fzf -e -i )"
  nohup `grep '^Exec' "/usr/share/applications/$selected" | tail -1 | sed 's/^Exec=//' | sed 's/%.//'` >/dev/null 2>&1&
  # disown if exit 0 successfully
  if [[ $? = 0 ]] ; then disown; fi
}

fzf-surfraw() { surfraw "$(cat ~/.config/surfraw/bookmarks | sed '/^$/d' | sort -n | fzf -e -i )" ;}
fzf-surfrawtor() { surfraw -browser=tor-browser-en "$(cat ~/.config/surfraw/bookmarks | sed '/^$/d' | sort -n | fzf -e -i )" ;}

# alias srb='surfraw -browser=$BROWSER'			# use for surfraw bookmarks

fzf-locate() {
  xdg-open "$(locate "*" | fzf -e -i )"
  
  # some programs require a longer time to load
  sleep 1.5
  
  # if cancle or fail then exit
  # if [ $? -ne 0 ]
  # then
  #  	exit
  # fi
}

fzf-playonlinux() { playonlinux --run '$(ls ~/.PlayOnLinux/shortcuts | fzf -e -i )' ;}

# http://www.reddit.com/r/commandline/comments/3abtup/fzfr_fzf_bash_function/
fzfr() { fzf -m -x | xargs -d'\n' -r "$@" ; }

# edit single line snippet
cfg-snippetrc() { $EDITOR ~/.snippetrc ;}
cfg-multisnippetrc() { $EDITOR ~/.multisnippet/"$(ls ~/.multisnippet | fzf -e -i)" ;}
multisnippet() { $EDITOR ~/.multisnippet/"$1" ;}
fzf-snippet() {
  selected="$(cat ~/.snippetrc | sed '/^$/d' | sort -n | fzf -e -i )"
  # remove tags, leading and trailing spaces, also no newline
  echo "$selected" | sed -e s/\;\;\.\*\$// | sed 's/^[ \t]*//;s/[ \t]*$//' | tr -d '\n' | xclip -selection clipboard
}

fzf-multisnippet() {
  # location of snippets
  dir=~/.multisnippet
  
  # merge filename and tags into single line
  results=$(for FILE in $dir/*
  do
    getname=$(basename $FILE)
    gettags=$(head -n 1 $FILE)
    echo "$getname \t $gettags"
  done)
  
  # copy content into clipboard without tags
  filename=$(echo "$(echo $results | fzf -e -i )" | cut -d' ' -f 1)
  sed 1d $dir/$filename | xclip -selection clipboard
}

#}}}
#-------- Flexget (Torrent RSS) {{{
#------------------------------------------------------
# DEMO: http://www.youtube.com/playlist?list=PLqv94xWU9zZ0pVGrgKtMuhFHun8-MahSY
# LINK: http://flexget.com/
# DESC: auto download torrent similar to how a DVR works

alias flexget='~/.virtualenv/flexget/bin/flexget'
flexget-list() { flexget series list && flexget movie-queue list waiting && flexget movie-queue list downloaded ;}
flexget-check() { flexget check ;}			# check if config file has any errors
flexget-test() { flexget --test execute ;}		# dry run
flexget-execute() { flexget execute ;}
flexget-cron() { flexget execute --cron ;}		# skip writing to logs
flexget-version() { flexget -V ;}
flexget-learnall() { flexget execute --learn ;}		#bypass dling old torrents
flexget-add() { flexget movie-queue add "$@" ;}
flexget-del() { flexget movie-queue del "$@" ;}
flexget-forget() { flexget movie-queue forget "$@" ;}	# allow redownloading on waiting list

#}}}
#-------- Convert to iOS (iPod, Macs, iPhone, Apple TV) {{{
#------------------------------------------------------
# https://trac.handbrake.fr/wiki/BuiltInPresets

convert2iOS-ipod() {
    if [ $# -lt 1 ]; then
        echo -e "HandBrake's low resolution settings for the iPod (5G and up)"
        echo -e "Optimized for great playback on the iPod screen, with smaller file size."
        echo -e "\nUsage: $0 <file_name>"
        echo -e "\nsingle:   $0 file.avi"
        echo -e "\nmultiple: $0 file1.avi file2.avi file3.avi"
        echo -e "\nwildcard: $0 *.avi"
        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        while [ ! -f "${arg%.*}".ipod.mp4 ]
        do
            HandBrakeCLI -i "$arg" -o "${arg%.*}.ipod.mp4" --preset="iPod"
        done
    done
}
convert2iOS-universal() {
    if [ $# -lt 1 ]; then
        echo -e "HandBrake's universally compatible, full resolution settings for all current Apple devices: iPod (6G and up), iPhone, AppleTV, and Macs"
        echo -e "\nUsage: $0 <file_name>"
        echo -e "\nsingle:   $0 file.avi"
        echo -e "\nmultiple: $0 file1.avi file2.avi file3.avi"
        echo -e "\nwildcard: $0 *.avi"
        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        while [ ! -f "${arg%.*}".universal.mp4 ]
        do
            HandBrakeCLI -i "$arg" -o "${arg%.*}.universal.mp4" --preset="Universal"
        done
    done
}

convert2iOS-iphone() {
    if [ $# -lt 1 ]; then
        echo -e "HandBrake's settings for all iPhones and iPod Touches going back to the original iPhone 2G."
        echo -e "\nUsage: $0 <file_name>"
        echo -e "\nsingle:   $0 file.avi"
        echo -e "\nmultiple: $0 file1.avi file2.avi file3.avi"
        echo -e "\nwildcard: $0 *.avi"
        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        while [ ! -f "${arg%.*}".iphone.mp4 ]
        do
            HandBrakeCLI -i "$arg" -o "${arg%.*}.iphone.mp4" --preset="iPhone & iPod touch"
        done
    done
}

convert2iOS-ipodtouch() {
    if [ $# -lt 1 ]; then
        echo -e "HandBrake's settings for all iPhones and iPod Touches going back to the original iPhone 2G."
        echo -e "\nUsage: $0 <file_name>"
        echo -e "\nsingle:   $0 file.avi"
        echo -e "\nmultiple: $0 file1.avi file2.avi file3.avi"
        echo -e "\nwildcard: $0 *.avi"
        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        while [ ! -f "${arg%.*}".ipodtouch.mp4 ]
        do
            HandBrakeCLI -i "$arg" -o "${arg%.*}.ipodtouch.mp4" --preset="iPhone & iPod touch"
        done
    done
}

convert2iOS-ipad() {
    if [ $# -lt 1 ]; then
        echo -e "Usage: $0 <file_name>"
        echo -e "\nsingle:   $0 file.avi"
        echo -e "\nmultiple: $0 file1.avi file2.avi file3.avi"
        echo -e "\nwildcard: $0 *.avi"
        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        while [ ! -f "${arg%.*}".ipad.mp4 ]
        do
            HandBrakeCLI -i "$arg" -o "${arg%.*}.ipad.mp4" --preset="iPad"
        done
    done
}

convert2iOS-appletv() {
    if [ $# -lt 1 ]; then
        echo -e "HandBrake's settings for the AppleTV and 2009's iPhone and iPod Touch lineup. Provides a good balance between quality and file size, and pushes the devices to their limits. Includes Dolby Digital 5.1 AC3 sound for the AppleTV."
        echo -e "\nUsage: $0 <file_name>"
        echo -e "\nsingle:   $0 file.avi"
        echo -e "\nmultiple: $0 file1.avi file2.avi file3.avi"
        echo -e "\nwildcard: $0 *.avi"
        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        while [ ! -f "${arg%.*}".appletv.mp4 ]
        do
            HandBrakeCLI -i "$arg" -o "${arg%.*}.appletv.mp4" --preset="AppleTV"
        done
    done
}

convert2iOS-appletv2() {
    if [ $# -lt 1 ]; then
        echo -e "Usage: $0 <file_name>"
        echo -e "\nsingle:   $0 file.avi"
        echo -e "\nmultiple: $0 file1.avi file2.avi file3.avi"
        echo -e "\nwildcard: $0 *.avi"
        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        while [ ! -f "${arg%.*}".appletv2.mp4 ]
        do
            HandBrakeCLI -i "$arg" -o "${arg%.*}.appletv2.mp4" --preset="AppleTV 2"
        done
    done
}

convert2iOS-appletv3() {
    if [ $# -lt 1 ]; then
        echo -e "Usage: $0 <file_name>"
        echo -e "\nsingle:   $0 file.avi"
        echo -e "\nmultiple: $0 file1.avi file2.avi file3.avi"
        echo -e "\nwildcard: $0 *.avi"
        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        while [ ! -f "${arg%.*}".appletv3.mp4 ]
        do
            HandBrakeCLI -i "$arg" -o "${arg%.*}.appletv3.mp4" --preset="AppleTV 3"
        done
    done
}

# }}}
#-------- Convert to Devices (Other, Gaming Device) {{{
#------------------------------------------------------
# http://develop.participatoryculture.org/index.php/ConversionMatrix

convert2psp() {
    if [ $# -lt 1 ]; then
        echo -e "Usage: $0 <file_name>"
        echo -e "\nsingle:   $0 file.avi"
        echo -e "\nmultiple: $0 file1.avi file2.avi file3.avi"
        echo -e "\nwildcard: $0 *.avi"
        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        while [ ! -f "${arg%.*}".psp.mp4 ]
        do
            ffmpeg -i "$arg" -s 320x240 -b:v 512000 -ar 24000 -ab 64000 -f psp -r 29.97 -strict experimental "${arg%.*}".psp.mp4
        done
    done
}

convert2windowsphone8() {
if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <file_name>"
    echo -e "\nsingle:   $0 file.avi"
    echo -e "\nmultiple: $0 file1.avi file2.avi file3.avi"
    echo -e "\nwildcard: $0 *.avi"
    return 1
fi

myArray=( "$@" )
for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".windowsphone8.mp4 ]
    do
        HandBrakeCLI -i "$arg" -o "${arg%.*}.windowsphone8.mp4" --preset="Windows Phone 8"
    done
done
}

# }}}
#-------- VimWiki {{{
#------------------------------------------------------
wikimd()     { $EDITOR ~/.vimwiki/wikimd/index.md ;}
# }}}
#-------- Slice Videos {{{
#------------------------------------------------------

# movie = both audio & video
# audiotrack = audio only
# videotrack = video only

# mplayer OSD in milliseconds
mplayer-milliseconds() { mplayer -osd-fractions 1 -osdlevel 3 "$1" -ss "${2:-00:00:00}" ;}

slice_movie() {
    if [ $# -lt 5 ]
    then
        echo -e "Use ffmpeg to slice movie (video & audio tracks) with beginning and endpoint with accurate milliseconds"
        echo -e "\nUsage:\n$0 file hh:mm:ss ms hh:mm:ss ms"
        echo -e "\nexample:\n$0 file.mp4 00:01:00 00 00:05:00 00 \n"

        return 1
    fi

    # code
    BEGINTIME=${2}
    ENDTIME=${4}

    # Convert the times to seconds from the Epoch
    SEC1=`date +%s -d ${BEGINTIME}`
    SEC2=`date +%s -d ${ENDTIME}`

    # Use expr to do the math
    DIFFSEC=`expr ${SEC2} - ${SEC1}`
    DURATIONTIME=`date +%H:%M:%S -ud @${DIFFSEC}`

    ffmpeg -i "$1" -ss ${BEGINTIME}."$3" -t ${DURATIONTIME}."$5" -codec:v copy -codec:a copy "${1%.*}"-"$0"-`date +'%F_%Hh%Ms%S'`."${1##*.}"

}

slice_videotrack() {
    if [ $# -lt 5 ]
    then
        echo -e "Use ffmpeg to slice videotrack (no audio) with beginning and endpoint with accurate milliseconds"
        echo -e "\nUsage:\n$0 file hh:mm:ss ms hh:mm:ss ms"
        echo -e "\nexample:\n$0 file.mp4 00:01:00 00 00:05:00 00 \n"

        return 1
    fi

    BEGINTIME=${2}
    ENDTIME=${3}

    SEC1=`date +%s -d ${BEGINTIME}`
    SEC2=`date +%s -d ${ENDTIME}`

    DIFFSEC=`expr ${SEC2} - ${SEC1}`
    DURATIONTIME=`date +%H:%M:%S -ud @${DIFFSEC}`

    ffmpeg -i "$1" -ss ${BEGINTIME}."$3" -t ${DURATIONTIME}."$5" -an -codec:v copy "${1%.*}"-"$0"-`date +'%F_%Hh%Ms%S'`."${1##*.}"

}

slice_audiotrack() {
    if [ $# -lt 5 ]
    then
        echo -e "Use ffmpeg to slice audiotrack (no video) with beginning and endpoint with accurate milliseconds"
        echo -e "\nUsage:\n$0 file hh:mm:ss ms hh:mm:ss ms"
        echo -e "\nexample:\n$0 file.mp4 00:01:00 00 00:05:00 00 \n"

        return 1
    fi

    BEGINTIME=${2}
    ENDTIME=${3}

    SEC1=`date +%s -d ${BEGINTIME}`
    SEC2=`date +%s -d ${ENDTIME}`

    DIFFSEC=`expr ${SEC2} - ${SEC1}`
    DURATIONTIME=`date +%H:%M:%S -ud @${DIFFSEC}`

    ffmpeg -i "$1" -ss ${BEGINTIME}."$3" -t ${DURATIONTIME}."$5" -vn -codec:a copy "${1%.*}"-"$0"-`date +'%F_%Hh%Ms%S'`."${1##*.}"
}

# }}}
#-------- Virtualbox CLI {{{
#------------------------------------------------------
# DESC: Virtualbox is a general-purpose full virtualizer for x86 hardware, targeted at server, desktop and embedded use
# https://www.howtoforge.com/tutorial/running-virtual-machines-with-virtualbox-5.1-on-a-headless-ubuntu-16.04-lts-server/

vbx-list() {
  echo "===Available VM==="
  vboxmanage list vms
  echo "\n===Running VM====="
  vboxmanage list runningvms
}

vbx-dvdrom() {
  if [ $# -lt 2 ]; then
    echo -e "Mount an ISO Image as a DVDROM/CDROM Image on a Running Virtualbox VM"
    echo -e "\nUsage: $0 <vmname> <iso_image>"
    echo -e "\nExample: $0 'Windows 7' 'foobar.iso'"
    echo "\n===Running VM====="
    vboxmanage list runningvms
    return 1
  fi

  vboxmanage storageattach "$1" --storagectl IDE --port 1 --device 0 --type dvddrive --medium "$2"
}

vbx-start() {
  # Set to endless loop
  while true
  do
    # Set the prompt for the select command
    PS3="Type a number to select or 'Ctrl+C' to quit: "
    
    # Create a list to display on menu
    IFS=$'\n'
    fileList=($(vboxmanage list vms | cut -d '{' -f1 | sed 's/ *$//'))
    unset IFS
    
    # Show a menu and ask for input. If the user entered a valid choice then execute command
    select fileName in $fileList; do
      if [ -n "$fileName" ]; then
        # remove quotes from filename
        vm_name=($(echo "${fileName}" | sed 's:\"::g' ))
        vboxmanage startvm "$vm_name" --type headless
        echo -e "${Green} $vm_name Has Been Started ${Color_Off}"
      fi
      break
    done
  done
}

vbx-quit() {
  # Set to endless loop
  while true
  do
    # Set the prompt for the select command
    PS3="Type a number to select or 'Ctrl+C' to quit: "
    
    # Create a list to display on menu
    IFS=$'\n'
    fileList=($(vboxmanage list runningvms | cut -d '{' -f1 | sed 's/ *$//'))
    unset IFS
    
    # Show a menu and ask for input. If the user entered a valid choice then execute command
    select fileName in $fileList; do
      if [ -n "$fileName" ]; then
        # remove quotes from filename
        vm_name=($(echo "${fileName}" | sed 's:\"::g' ))
        vboxmanage controlvm "$vm_name" acpipowerbutton
        echo -e "${Yellow} $vm_name Is Shutting Down ${Color_Off}"
      fi
      break
    done
  done
}

vbx-forcequit() {
  # Set to endless loop
  while true
  do
    # Set the prompt for the select command
    PS3="Type a number to select or 'Ctrl+C' to quit: "
    
    # Create a list to display on menu
    IFS=$'\n'
    fileList=($(vboxmanage list runningvms | cut -d '{' -f1 | sed 's/ *$//'))
    unset IFS
    
    # Show a menu and ask for input. If the user entered a valid choice then execute command
    select fileName in $fileList; do
      if [ -n "$fileName" ]; then
        # remove quotes from filename
        vm_name=($(echo "${fileName}" | sed 's:\"::g' ))
        vboxmanage controlvm "$vm_name" poweroff
        echo -e "${Red} $vm_name Power Cable Has Been Pulled ${Color_Off}"
      fi
      break
    done
  done
}
# }}}
#-------- rDesktop v2 (Remote Desktop) [last updated July 29, 2016] {{{
#------------------------------------------------------

rdesktop-winxp() { 
  ipaddr=192.168.1.150
  port=3389
  username=administrator
  resolution=1920x1020

  until nc -vzw 2 "$ipaddr" "$port"; do sleep 2; done
  rdesktop -u "$username" -g "$resolution" "$ipaddr":"$port" -r sound:local
}

rdesktop-win10() { 
  ipaddr=192.168.1.252
  port=3389
  username=bonster
  resolution=1920x1020

  until nc -vzw 2 "$ipaddr" "$port"; do sleep 2; done
  rdesktop -u "$username" -g "$resolution" "$ipaddr":"$port" -r sound:local
}

rdesktop-win7() { 
  ipaddr=192.168.1.152
  port=3389
  username=bonster
  resolution=1920x1020

  until nc -vzw 2 "$ipaddr" "$port"; do sleep 2; done
  rdesktop -u "$username" -g "$resolution" "$ipaddr":"$port" -r sound:local
}

rdesktop-mintmate64() { 
  ipaddr=192.168.1.206
  port=3389
  username=bonster
  resolution=1920x1020

  until nc -vzw 2 "$ipaddr" "$port"; do sleep 2; done
  rdesktop -u "$username" -g "$resolution" "$ipaddr":"$port" -r sound:local
}

rdesktop-fedoramate64() { 
  ipaddr=192.168.1.52
  port=3389
  username=bonster
  resolution=1920x1020

  until nc -vzw 2 "$ipaddr" "$port"; do sleep 2; done
  rdesktop -u "$username" -g "$resolution" "$ipaddr":"$port" -r sound:local
}

# }}}
#-------- Webcam {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=oYTE3docGLA
# DESC: using external player to display webcam

# mplayer to display webcam
# hit 's' to take screenshot, will save in current folder
# hit 'S' to take series of screenshot, will save in current folder
# hit 'f' to toggle fullscreen
# hit 'T' to toggle stay-on-top
# hit 'q' or 'Esc' to quit
# https://wiki.archlinux.org/index.php/Webcam_Setup#MPlayer
webcam-list() { v4l2-ctl --list-formats-ext && v4l2-ctl --list-devices ;}
webcam-mplayer() { mplayer tv:// -tv driver=v4l2:width=640:height=360:device=/dev/video0 -fps 30 -vf screenshot -ontop -geometry "99%:95%" ;}
webcam-mplayer-noborder() { mplayer tv:// -tv driver=v4l2:width=640:height=360:device=/dev/video0 -fps 30 -vf screenshot -geometry "98%:98%" -ontop -noborder ;}
webcam-mplayer-screenshot() { mplayer tv:// -tv driver=v4l2:width=1920:height=1080:device=/dev/video0 -fps 30 -vf screenshot -ontop ;}

# DESC: use webcam to scan for barcode/qrcode
zbarcam-v4l() {
  # barcode/qrcode reader using webcam
  # this is for webcam that was not supported by default
  # https://fitzcarraldoblog.wordpress.com/2012/10/05/installing-and-using-zbar-in-linux-to-scan-bar-codes-with-your-webcam/
  # requires: v4l-utils
  LD_PRELOAD=/usr/lib/libv4l/v4l1compat.so zbarcam /dev/video0
}
# }}}
#-------- Sound Effects {{{
#------------------------------------------------------
# http://whatnotlinux.blogspot.com/2011/12/enterprise-ambiance.html
ambiance-whitenoise() { play -n -c1 synth whitenoise band -n 100 20 band -n 50 20 gain +25  fade h 1 864000 1 ;}
ambiance-whitenoisewider() { play -n -c2 synth whitenoise band -n 100 24 band -n 300 100 gain +20 ;}
ambiance-pinknoise() { play -c2 -n synth pinknoise band -n 280 80 band -n 60 25 gain +20 treble +40 500 bass -3 20 flanger 4 2 95 50 .3 sine 50 lin ;}

#}}}
#-------- Archive Manager CLI {{{
#------------------------------------------------------
archive-append() { atool -a "$@" ;}
archive-extract() { atool -x "$@" ;}
archive-list() { atool -l "$1" | less -N ;}
archive-search() { atool -l "$1" | grep -i "$2" ;}

# create archive
archive-create-7z() { atool -a archive.7z "$@" ;}
archive-create-zip() { atool -a archive.zip "$@" ;}
archive-create-rar() { atool -a archive.rar "$@" ;}
archive-create-tar() { atool -a archive.tar "$@" ;}
archive-create-targz() { atool -a archive.tar.gz "$@" ;}
archive-create-cbz() { atool -a archive.zip "$@" && mv -- archive.zip archive.cbz ;}
archive-create-cbr() { atool -a archive.rar "$@" && mv -- archive.rar archive.cbr ;}

# converting archive
convert2archive-tar() { arepack -F .tar -e "$@" ;}
convert2archive-zip() { arepack -F .zip -e "$@" ;}
convert2archive-rar() { arepack -F .rar -e "$@" ;}
convert2archive-targz() { arepack -F .tar.gz -e "$@" ;}
convert2archive-7z() { arepack -F .7z -e "$@" ;}
convert2archive-cbz() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    if [[ ! -f "${arg%%.*}".zip && ! -f "${arg%%.*}".cbz ]]; then
      arepack -F .zip -e "$arg" && mv -- "${arg%%.*}".zip "${arg%%.*}".cbz
    else
      if [[ -f "${arg%%.*}".zip && ! -f "${arg%%.*}".cbz ]]; then
        mv -v -- "${arg%%.*}".zip "${arg%%.*}".cbz
      fi
    fi
  done
}
convert2archive-cbr() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    if [[ ! -f "${arg%%.*}".rar && ! -f "${arg%%.*}".cbr ]]; then
      arepack -F .rar -e "$arg" && mv -- "${arg%%.*}".rar "${arg%%.*}".cbr
    else
      if [[ -f "${arg%%.*}".rar && ! -f "${arg%%.*}".cbr ]]; then
        mv -v -- "${arg%%.*}".rar "${arg%%.*}".cbr
      fi
    fi
  done
}

#}}}
#-------- Detox Filename Cleanup {{{
#------------------------------------------------------
# DESC: cleanup filename to different styles

# eg. FOO BAR LinuX.TAR.GZ --> foo_bar_linux.tar.gz
detox-unix() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    filter_name=$(echo "$arg" | sed 's/%20/ /g' | sed 's/ /_/g' | tr '[:upper:]' '[:lower:]')
    mv -- "$arg" "$filter_name"
  done
}

# eg. FOO BAR LinuX.TAR.GZ --> Foo Bar Linux.tar.gz
detox-human() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    filter_name=$(echo "$arg" | sed 's/%20/ /g' | sed 's/_/ /g' | tr '[:upper:]' '[:lower:]' | sed 's/\b\([[:alpha:]]\)\([[:alpha:]]*\)\b/\u\1\L\2/g' | sed -e "s/'\(.\)/'\l\1/g" | sed -e "s/\.\(.\)/\.\l\1/g" )
    mv -- "$arg" "$filter_name"
  done
}

# eg. FOO-BAR-LinuX.TAR.GZ --> Foo Bar Linux.tar.gz
detox-human-dash() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    filter_name=$(echo "$arg" | sed 's/%20/ /g' | sed 's/_/ /g' | sed 's/-/ /g' | tr '[:upper:]' '[:lower:]' | sed 's/\b\([[:alpha:]]\)\([[:alpha:]]*\)\b/\u\1\L\2/g' | sed -e "s/'\(.\)/'\l\1/g" | sed -e "s/\.\(.\)/\.\l\1/g" )
    mv -- "$arg" "$filter_name"
  done
}

detox-porn() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do

    # check if file is a valid video before continuing
    get_mimetype=$(mimetype -b "$arg" | cut -d '/' -f1)
    if [ "$get_mimetype"  = "video" ]; then
      duration=$(ffmpeg -i "$arg" 2>&1 | grep Duration | cut -d ' ' -f 4 | sed s/,// | cut -d '.' -f1 | awk -F: '{print $1"h"$2"m"$3"s"}')
      filesize=$(du -h "$arg" | awk '{print $1}')
      resolution=$(ffprobe -v error -of flat=s=_ -select_streams v:0 -show_entries stream=height "$arg" | cut -d '=' -f2)

      mv -- "$arg" "${arg%.*} [${duration},${filesize},${resolution}p].${arg##*.}"
    fi
  done
}

# }}}
#-------- Music Tagging CLI {{{
#------------------------------------------------------
tag-encoding-v2.3() { eyeD3 --encoding=utf8 --to-v2.3 "$@" ;}
tag-encoding-v2.4() { eyeD3 --encoding=utf8 --to-v2.4 "$@" ;}
tag-show() { eyeD3 "$@" ;}
tag-album() { eyeD3 -A "$1" "${@:2}" ;}
tag-albumartist() { eyeD3 -b "$1" "${@:2}" ;}
tag-artist() { eyeD3 -a "$1" "${@:2}" ;}
tag-title() { eyeD3 -t "$1" "${@:2}" ;}
tag-number() { eyeD3 -n "$1" "${@:2}" ;}
tag-genre() { eyeD3 -G "$1" "${@:2}" ;}
tag-listgenre() { eyeD3 --plugin=genres ;}
tag-year() { eyeD3 -Y "$1" "${@:2}" ;}
tag-comment() { eyeD3 -c "$1" "${@:2}" ;}
tag-image-remove() { eyeD3 --remove-all-images "$@" ;}
tag-image-add() { eyeD3 --add-image "$1":FRONT_COVER "${@:2}" ;}
tag-image-extract() { eyeD3 --write-images=. "$@" ;}

# use existing music tags to rename filename
tag-to-filename-num-title() { eyeD3 --rename '$track:num - $title' "$@" ;}
tag-to-filename-artist-album-num-title() { eyeD3 --rename '$artist - $album - $track:num - $title' "$@" ;}
tag-to-filename-artist-title() { eyeD3 --rename '$artist - $title' "$@" ;}
tag-to-filename-artist-album-title() { eyeD3 --rename '$artist - $album - $title' "$@" ;}


# use existing filename to fill in music tags
# 05 Desperado.mp3 --> fill in track/title
tag-filltag-from-filename-num-space-title() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    tracknum=$(echo "${arg%.*}" | cut -d ' ' -f1 | awk '{$1=$1};1' )
    titlename=$(echo "${arg%.*}" | cut -d ' ' -f2- | awk '{$1=$1};1' )
    eyeD3 --track "$tracknum" --title "$titlename" "$arg"
  done
}

# 05 - Desperado.mp3 --> fill in track/title
tag-filltag-from-filename-num-dash-title() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    tracknum=$(echo "${arg%.*}" | awk -F' - ' '{print $1}' | awk '{$1=$1};1' )
    titlename=$(echo "${arg%.*}" | awk -F' - ' '{print $2}' | awk '{$1=$1};1' )
    eyeD3 --track "$tracknum" --title "$titlename" "$arg"
  done
}

# Rihanna - Desperado.mp3 --> fill in artist/albumartist/title
tag-filltag-from-filename-artist-dash-title() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    artistname=$(echo "${arg%.*}" | awk -F' - ' '{print $1}' | awk '{$1=$1};1' )
    titlename=$(echo "${arg%.*}" | awk -F' - ' '{print $2}' | awk '{$1=$1};1' )
    eyeD3 --artist "$artistname" --title "$titlename" "$arg"
  done
}

# Desperado.mp3 --> fill in title
tag-filltag-from-filename-titleonly() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    eyeD3 --title "${arg%.*}" "$arg"
  done
}

# }}}
#-------- IPTV - Manual {{{
#------------------------------------------------------

IPTVPLAYER=cvlc
iptv-new-aljazeera() { "$IPTVPLAYER" 'rtmp://aljazeeraflashlivefs.fplive.net:1935/aljazeeraflashlive-live?videoId=883816736001&lineUpId=&pubId=665003303001&playerId=751182905001&affiliateId=/aljazeera_eng_high?videoId=883816736001&lineUpId=&pubId=665003303001&playerId=751182905001&affiliateId=.flv live=1' ;}

iptv-news-abc() { "$IPTVPLAYER" 'http://abclive.abcnews.com/i/abc_live1@136327/master.m3u8?b=500,300,700,900,1200#preview-http://abclive.abcnews.com/i/abc_live1@136327/master.m3u8?b=400' ;}

iptv-sports-motorsport() { "$IPTVPLAYER" 'http://motorsport.hopto.org:8080/' ;}
iptv-sports-pac12() { "$IPTVPLAYER" 'http://xrxs.net/video/live-p12baya-2328.m3u8' ;}
iptv-music-hearttv() { "$IPTVPLAYER" 'http://ooyalahd2-f.akamaihd.net/i/globalradio02_delivery@156522/master.m3u8' ;}
iptv-tv-planetgreen() { "$IPTVPLAYER" 'http://80.80.160.168/live/4/live.m3u8' ;}
iptv-tv-trtworld() { "$IPTVPLAYER" 'http://trtcanlitv-lh.akamaihd.net/i/TRTWORLD_1@321783/index_1500_av-p.m3u8?sd=10&rebase=on' ;}
iptv-music-vevo() { "$IPTVPLAYER" 'http://vevoplaylist-live.hls.adaptive.level3.net/vevo/ch1/06/prog_index.m3u8' ;}
iptv-music-virgintv() { "$IPTVPLAYER" 'http://wow01.105.net/live/virgin1/chunklist.m3u8' ;}

iptv-education-university-of-californiatv() { "$IPTVPLAYER" 'rtmp://ucsdtv-wowza.ucsd.edu:1935/live/live_800' ;}

#}}}
#-------- LUKS Disk Encryption using Cryptsetup (Linux Unified Key Setup) {{{
#------------------------------------------------------
# DEMO: 
# DESC: setup password protection and disk encryption on storage media
# LINK: https://gitlab.com/cryptsetup/cryptsetup
luks-setup-ext2() {
  if [ $# -lt 1 ]; then
    echo -e "format device and apply LUKS disk encryption (Linux Unified Key Setup)"
    echo -e "\nUsage: $0 <device|partition>"
    echo -e "Example: $0 sdx"
    echo -e "         $0 sdx1"
    return 1
  fi

  # check if the device is mounted
  mount_status=$(mount | grep /dev/"$1" | wc -l)
  if [ "$mount_status" -ne 0 ]
  then
    lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$1"
    echo -e "${Red}/dev/$1 is mounted. You have to unmount /dev/$2 ${Color_Off}"
    return 1
  fi

  # list out all drives
  lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep --color -E "$1|$"
  
  echo -n -e "${Red}WARNING: Setting up LUKS disk encryption and FORMATTING your device. Do you want to continue? [y/n] ${Color_Off}"
  read REPLY
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    echo "... You chose to continue"
  else
    return 1
  fi

  # setup LUKS on device
  mappername="$1"

  sudo cryptsetup -y -v luksFormat /dev/"$1"
  sudo cryptsetup luksOpen /dev/"$1" "$mappername"
  sudo mkfs.ext2 /dev/mapper/"$mappername"

  # set permission
  mkdir -p /tmp/testluks
  sudo mount /dev/mapper/"$mappername" /tmp/testluks
  sudo chmod -R 777 /tmp/testluks
  sudo umount /tmp/testluks
  sudo cryptsetup luksClose "$mappername"
  rmdir /tmp/testluks
}

luks-setup-ext3() {
  if [ $# -lt 1 ]; then
    echo -e "format device and apply LUKS disk encryption (Linux Unified Key Setup)"
    echo -e "\nUsage: $0 <device|partition>"
    echo -e "Example: $0 sdx"
    echo -e "         $0 sdx1"
    return 1
  fi

  # check if the device is mounted
  mount_status=$(mount | grep /dev/"$1" | wc -l)
  if [ "$mount_status" -ne 0 ]
  then
    lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$1"
    echo -e "${Red}/dev/$1 is mounted. You have to unmount /dev/$2 ${Color_Off}"
    return 1
  fi

  # list out all drives
  lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep --color -E "$1|$"
  
  echo -n -e "${Red}WARNING: Setting up LUKS disk encryption and FORMATTING your device. Do you want to continue? [y/n] ${Color_Off}"
  read REPLY
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    echo "... You chose to continue"
  else
    return 1
  fi

  # setup LUKS on device
  mappername="$1"

  sudo cryptsetup -y -v luksFormat /dev/"$1"
  sudo cryptsetup luksOpen /dev/"$1" "$mappername"
  sudo mkfs.ext3 /dev/mapper/"$mappername"

  # set permission
  mkdir -p /tmp/testluks
  sudo mount /dev/mapper/"$mappername" /tmp/testluks
  sudo chmod -R 777 /tmp/testluks
  sudo umount /tmp/testluks
  sudo cryptsetup luksClose "$mappername"
  rmdir /tmp/testluks
}

luks-setup-ext4() {
  if [ $# -lt 1 ]; then
    echo -e "format device and apply LUKS disk encryption (Linux Unified Key Setup)"
    echo -e "\nUsage: $0 <device|partition>"
    echo -e "Example: $0 sdx"
    echo -e "         $0 sdx1"
    return 1
  fi

  # check if the device is mounted
  mount_status=$(mount | grep /dev/"$1" | wc -l)
  if [ "$mount_status" -ne 0 ]
  then
    lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$1"
    echo -e "${Red}/dev/$1 is mounted. You have to unmount /dev/$2 ${Color_Off}"
    return 1
  fi

  # list out all drives
  lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep --color -E "$1|$"
  
  echo -n -e "${Red}WARNING: Setting up LUKS disk encryption and FORMATTING your device. Do you want to continue? [y/n] ${Color_Off}"
  read REPLY
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    echo "... You chose to continue"
  else
    return 1
  fi

  # setup LUKS on device
  mappername="$1"

  sudo cryptsetup -y -v luksFormat /dev/"$1"
  sudo cryptsetup luksOpen /dev/"$1" "$mappername"
  sudo mkfs.ext4 /dev/mapper/"$mappername"

  # set permission
  mkdir -p /tmp/testluks
  sudo mount /dev/mapper/"$mappername" /tmp/testluks
  sudo chmod -R 777 /tmp/testluks
  sudo umount /tmp/testluks
  sudo cryptsetup luksClose "$mappername"
  rmdir /tmp/testluks
}

# }}}
#-------- LUKS Headers Backup and Restore {{{
#------------------------------------------------------
luks-header-backup() {
  if [ $# -lt 2 ]; then
    echo -e "backup LUKS header"
    echo -e "\nUsage: $0 <output-file> <luks-device|partition>"
    echo -e "\nExample: $0 mybackup_header.luks sdX"
    echo -e "           $0 mybackup_header.luks sdX1"
    return 1
  fi
  sudo cryptsetup luksHeaderBackup --header-backup-file "$1" /dev/"$2"
  sudo chmod 644 "$1"
}

luks-header-restore() {
  if [ $# -lt 2 ]; then
    echo -e "restore LUKS header"
    echo -e "\nUsage: $0 <header-file> <luks-device|partition>"
    echo -e "\nExample: $0 mybackup_header.luks sdX"
    echo -e "           $0 mybackup_header.luks sdX1"
    return 1
  fi
  sudo cryptsetup luksHeaderRestore --header-backup-file "$1" /dev/"$2"
}

luks-header-unlock() {
  if [ $# -lt 2 ]; then
    echo -e "open LUKS device using external header file"
    echo -e "\nUsage: $0 <header-file> <luks-device|partition>"
    echo -e "\nExample: $0 mybackup_header.luks sdX"
    echo -e "           $0 mybackup_header.luks sdX1"
    return 1
  fi
  mappername="$2"
  sudo cryptsetup --header "$1" luksOpen /dev/"$2" "$mappername"
}


# }}}
#-------- LUKS Passphrase Management {{{
#------------------------------------------------------
luks-passphrase-list() {
  if [ $# -lt 1 ]; then
    echo -e "list all LUKS key slot"
    echo -e "\nUsage: $0 <luks-device|partition>"
    echo -e "\nExample: $0 sdX"
    echo -e "           $0 sdX1"
    return 1
  fi
  sudo cryptsetup luksDump /dev/"$1" | grep Slot
}

luks-passphrase-delete() {
  if [ $# -lt 1 ]; then
    echo -e "delete a LUKS passphrase key slot using any existing passphrase"
    echo -e "\nUsage: $0 <luks-device|partition>"
    echo -e "\nExample: $0 sdX"
    echo -e "           $0 sdX1"
    return 1
  fi

  # list key slot before
  sudo cryptsetup luksDump /dev/"$1" | grep Slot

  echo -n -e "${Red}Which Key Slot Do You Want to Delete? [Number 0-7] ${Color_Off}"
  read REPLY
  if [[ $REPLY =~ ^[01234567]$ ]]
  then
    sudo cryptsetup luksKillSlot /dev/"$1" "$REPLY"
  else
    return 1
  fi

  # list key slot after
  if [ $? -eq 0 ]; then
    echo -e "${Green}--------------- Updated Key Slot -------------${Color_Off}"
    sudo cryptsetup luksDump /dev/"$1" | grep Slot
  else
    return 1
  fi
}

luks-passphrase-remove() {
  if [ $# -lt 1 ]; then
    echo -e "remove a LUKS passphrase by re-entering the passphrase you want to remove"
    echo -e "\nUsage: $0 <luks-device|partition>"
    echo -e "\nExample: $0 sdX"
    echo -e "           $0 sdX1"
    return 1
  fi

  # list key slot before
  sudo cryptsetup luksDump /dev/"$1" | grep Slot

  echo -e "${Red}Remove a Key else hit Ctrl+C to cancle ${Color_Off}"
  sudo cryptsetup luksRemoveKey /dev/"$1"

  # list key slot after
  if [ $? -eq 0 ]; then
    echo -e "${Green}--------------- Updated Key Slot -------------${Color_Off}"
    sudo cryptsetup luksDump /dev/"$1" | grep Slot
  else
    return 1
  fi
}

luks-passphrase-add() {
  if [ $# -lt 1 ]; then
    echo -e "add new LUKS passphrase (8 slot maximum)"
    echo -e "\nUsage: $0 <luks-device|partition>"
    echo -e "\nExample: $0 sdX"
    echo -e "           $0 sdX1"
    return 1
  fi

  # list key slot before
  sudo cryptsetup luksDump /dev/"$1" | grep Slot

  echo -e "${Red}Add new Key if Slot is still unused (aka DISABLED) else hit Ctrl+C to cancle ${Color_Off}"
  sudo cryptsetup luksAddKey /dev/"$1"

  # list key slot after
  if [ $? -eq 0 ]; then
    echo -e "${Green}--------------- Updated Key Slot -------------${Color_Off}"
    sudo cryptsetup luksDump /dev/"$1" | grep Slot
  else
    return 1
  fi
}

# }}}
#-------- Mount LUKS {{{
#------------------------------------------------------
mount-udisksctl-luks() {
  if [ $# -lt 1 ]
  then
    echo -e "mount LUKS encrypted device like most GUI file manager"
    echo -e "\nUsage: $0 <luks-device|partition>"
    echo -e "Example: $0 sdx"
    echo -e "         $0 sdx1"
    echo -e "Multiple:$0 sdx sdy sdz"
    echo -e "         $0 sdx*"
    return 1
  fi

  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    udisksctl unlock -b /dev/"$arg"
    sleep 0.1
    dm_mountpoint=$(lsblk -o "KNAME,NAME" | grep -A 1 "$arg" | tail -1 | awk '{print $1}')
    udisksctl mount -b /dev/"$dm_mountpoint"
  done
}

unmount-udisksctl-luks() {
  if [ $# -lt 1 ]
  then
    echo -e "unmount LUKS encrypted device like most GUI file manager"
    echo -e "\nUsage: $0 <luks-device|partition>"
    echo -e "Example: $0 sdx"
    echo -e "         $0 sdx1"
    echo -e "Multiple:$0 sdx sdy sdz"
    echo -e "         $0 sdx*"
    return 1
  fi

  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    dm_mountpoint=$(lsblk -o "KNAME,NAME" | grep -A 1 "$arg" | tail -1 | awk '{print $1}')
    udisksctl unmount -b /dev/"$dm_mountpoint"
    udisksctl lock -b /dev/"$arg"
  done
}

mount-luks() {
  if [ $# -lt 1 ]; then
    echo -e "mount LUKS disk encrypted device"
    echo -e "\nUsage: $0 <luks-device|partition>"
    echo -e "Example: $0 sdX"
    echo -e "         $0 sdX1"
    echo -e "Multiple:$0 sdx sdy sdz"
    echo -e "         $0 sdx*"
    return 1
  fi

  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    mappername="$arg"

    sudo cryptsetup luksOpen /dev/"$arg" "$mappername"
    mkdir -p /tmp/"$arg"
    sudo mount /dev/mapper/"$mappername" /tmp/"$arg"
  done
}

unmount-luks() {
  if [ $# -lt 1 ]; then
    echo -e "unmount LUKS disk encrypted device"
    echo -e "\nUsage: $0 <luks-device|partition>"
    echo -e "Example: $0 sdX"
    echo -e "         $0 sdX1"
    echo -e "Multiple:$0 sdx sdy sdz"
    echo -e "         $0 sdx*"
    return 1
  fi

  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    mappername="$arg"

    sudo umount /tmp/"$arg"
    sudo cryptsetup luksClose "$mappername"
    rmdir "/tmp/$arg"
  done
}

# }}}


####################
##### DEAD LIST ####
####################
# Code that just went dead due to changes in API
#  waiting to see if changes can be made to bring it back to life

# DEMO: http://www.youtube.com/watch?v=7-9uYSGyvU0
# DESC: upload to imgur.com
# REFF: http://www.commandlinefu.com/commands/view/9341
upl-imgur() {
	curl -\# -F image=@"$1" -F "key=1913b4ac473c692372d108209958fd15" \
	http://api.imgur.com/2/upload.xml | grep -Eo "<original>(.)*</original>" \
	| grep -Eo "http://i.imgur.com/[^<]*"
}
# convert doc/docx to pdf (dont upload sensitive data)
# tutorial video: http://www.youtube.com/watch?v=r90IdQwF-hs
doc2pdf() { curl -# -F inputDocument=@"$1" http://www.doc2pdf.net/convert/document.pdf > "${1%.*}.pdf" ;}


####################
##### TESTING ######
####################
# New code dump, stuff I am creating or copy from others


#-------- Clonezilla CLI (Autorun LiveCD/USB) {{{
#------------------------------------------------------

# ///Note/// Due to the limitations of program mkisofs
# ocs-iso can not process an image file larger than 4.5 GB.
# For this reason, if your image is larger than 4.5 GB
# ocs-iso will refuse to process it.
# http://clonezilla.org/make-live-recovery-manually.php
# http://clonezilla.org/show-live-doc-content.php?topic=clonezilla-live/doc/04_Create_Recovery_Clonezilla
# https://rbgeek.wordpress.com/2013/04/16/part-2-creation-of-autorun-recovery-clonezilla-live-cddvd-from-image/#more-8366
clonezilla-create-recoveryiso() {
	if [ $# -lt 2 ]; then
		echo -e "create recovery autorun cd using existing clonezilla sarge image recovery-iso-zip feature in clonezilla"
		echo -e "\nUsage: $0 <existing_image> <device>"
		echo -e "\nExample: $0 mydesktop sdx"
		echo -e "\nNote: <device> is the harddrive that is on the machine this livecd is going to restore to (sdx)"
		echo -e "Note2: <output_file> will be saved to your current path"
		return 1
	fi
        # set current pwd as the output path
        sudo sed -i 's:ocsroot=.*:ocsroot='\""$PWD"\"':g' /etc/drbl/drbl.conf

        # the exisiting image you have already made with clonezilla aka sarge-image
        SARGE_IMAGE="$1"

        # device that the autorun cd will restore the image to (sdx for linux or hdx for windows)
        # use "ask_user" if you want the user to select the device
        DEVICE_DRIVE="$2"


        # convert sarge_image to ISO livecd
sudo ocs-iso -g en_US.UTF-8 -t -k NONE -e "-g auto -e1 auto -e2 -c -r -j2 -p true restoredisk $SARGE_IMAGE $DEVICE" "$SARGE_IMAGE"

        # set output file permissions to everyone
	# sudo chmod -R 777 "$OUTPUT_FILE"
}

# }}}
# #-------- Environment Variable {{{
# #------------------------------------------------------
# export HISTCONTROL=ignoreboth			#Remove Extra Commands
# export HISTCONTROL=erasedups			#Erase duplicates across the whole history
# HISTCONTROL=ignorespace				#Space follow by a cmd,will not be saved in history
# HISTCONTROL=ignoredups				#Rm Dupes, the continuous repeated entry from history
# HISTFILESIZE=3000				#Bash history size limit
# HISTSIZE=1000
# export HISTTIMEFORMAT="%d/%m/%y %T "		#History list shows digital time and date
# # Set 256 Colors
# # http://blog.sanctum.geek.nz/256-colour-terminals/
# # if [ -e /usr/share/terminfo/x/xterm-256color ]; then
# #    export TERM='xterm-256color'
# # fi
#
# #}}}
#-------- Weechat XDCC {{{
#------------------------------------------------------
# http://nibl.co.uk/bots.php?search=

xdcc-nibl() {
    if [ $# -lt 1 ]
    then
        echo -e "Download XDCC files from using weechat from (#nibl @ irc.rizon.net)"
        echo -e "Search using http://nibl.co.uk/bots.php?search="
        echo -e "\nUsage:\n$0 </msg>"
        echo -e "\nexample:\n$0 '/msg AHQ[Turtle] xdcc send #1721'"

        return 1
    fi

    echo "irc.rizon.#nibl *$1" > "$(ls ~/.weechat/weechat_fifo*)"
}




# }}}
#-------- Slrn (Text Base News Client) {{{
#------------------------------------------------------
# https://wiki.archlinux.org/index.php/Slrn
# http://news.gmane.org/search.php?match=linux
#
export NNTPSERVER='news.gmane.org'

# }}}
#-------- Battery Status {{{
#------------------------------------------------------
# https://www.reddit.com/r/debian/comments/41sw7g/checking_battery_status_in_terminal/cz68iwq
alias batterystatus="upower -i /org/freedesktop/UPower/devices/........ | grep time"
alias batteryshow='cat /sys/class/power_supply/BAT1/status'
# }}}
#-------- Binary / Shell Scripts {{{
#------------------------------------------------------


# lightweight image viewer
# tutorial video: https://www.youtube.com/watch?v=OMOIZlOEfb8
# https://wiki.archlinux.org/index.php/Feh#File_Browser_Image_Launcher
feh-browser() { ~/.scripts/feh_browser.sh $@ -B white -g 1280x800 & }
feh-slideshow() { ~/.scripts/feh_browser.sh $@ -B white -g 1280x800 -D 3 & }

# http://code.google.com/p/imgur-cli
# imgur image uploader http://imgur.com
imgur() { python2 ~/.scripts/imgur-cli/imgur.py $@ ;}

# manual tiling (similar compiz grid plugin)
# tutorial video: https://www.youtube.com/watch?v=ZF76DELEpjM
# http://ssokolow.com/quicktile
quicktile() { python2.7 ~/.config/quicktile/quicktile.py $@ ;}
quicktile-daemonize() { nohup python2.7 ~/.config/quicktile/quicktile.py -d >/dev/null 2>&1& }
quicktile-kill () { kill $(ps -ef | grep '[q]uicktile.py' | awk '{print $2}') ;}

# http://bash.cyberciti.biz/multimedia/linux-rip-audio-cd/
rip-audio-cd() { ~/.scripts/rip_audio_cd.sh ;}

# screenshot gallery generator
# tutorial video: https://www.youtube.com/watch?v=_4G4nMUTzX8
# http://cli-apps.org/content/show.php/Movie+Thumbnailer?content=74676
shot() { ~/.scripts/shot.sh -n 30 -r 80% -s $@ ;}

# take screenshot fullscreen, window, area selection using import command
# http://en.gentoo-wiki.com/wiki/Screenshot
sshot() { ~/.scripts/screenshot.sh area ;}

# Vim as a pager ( similar to the less command )
# tutorial video: https://www.youtube.com/watch?v=RefWl8I3nBg
	# issue: gg hotkey does not jump to exact line
	vlessold() { /usr/share/vim/vim73/macros/less.sh "$1" ;}

	# http://technotales.wordpress.com/2009/05/24/using-vim-as-a-pager/
	# vim readonly; to force write use :w!
	vless() { vim -R "$@" ;}

# https://bitbucket.org/antocuni/tty2gif
# convert ttyrec to gif files
tty2gif() { python3 ~/.scripts/tty2gif/tty2gif.py $@ ;}

# https://github.com/saironiq/shellscripts/blob/master/wolframalpha_com/wa.sh
# http://www.wolframalpha.com
wolframalpha() { ~/.scripts/shellscripts/wolframalpha_com/was.sh ;}

#}}}
#-------- Copy Move {{{
#------------------------------------------------------
cpr() {
	if [ $# -lt 1 ]; then
        echo -e "rsync copying files using task spooler queue"
        echo -e "\nUsage:\n$0 [-h help] [-t task-spooler] <source> <destination>"
        echo -e "\nInclude Parent Folder:\n$0 <source> <destination>"
        echo -e "\nExclude Parent Folder:\n$0 <source>/ <destination>"
        echo -e "\nRequirements: rsync task-spooler"
        return 1
	else
		case "$1" in
		  -t) tsp rsync -a "$@" ;;
		  -h) $0 ;;
		  -*) $0 ;;
		  *) rsync -av --progress "$@" ;;
		esac
	fi
}
mvr() {
	if [ $# -lt 1 ]; then
        echo -e "rsync moving files using task spooler queue"
        echo -e "\nUsage:\n$0 [-h help] [-t task-spooler] <source> <destination>"
        echo -e "\nInclude Parent Folder:\n$0 <source> <destination>"
        echo -e "\nExclude Parent Folder:\n$0 <source>/ <destination>"
        echo -e "\nRequirements: rsync task-spooler"
        return 1
	else
		case "$1" in
		  -t) tsp rsync -a --remove-source-files "$@" ;;
		  -h) $0 ;;
		  -*) $0 ;;
		  *) rsync -av --progress --remove-source-files "$@" ;;
		esac
	fi
}
# }}}
#-------- VirtualEnv (Python Isolated Environment) {{{
#------------------------------------------------------

# tutorial video: https://www.youtube.com/watch?v=n8ZzqsFeHOI
virtwrap-create() {
	mkdir -p ~/.virtualenv
	cd ~/.virtualenv
	virtualenv "$1" -p "${2:-python}"
	source "$1"/bin/activate
}
virtwrap-activate() {
	cd ~/.virtualenv
	source "$1"/bin/activate
}

# }}}
#-------- Convert to Image {{{
#------------------------------------------------------
# pdftoppm convert pdf to images
# http://askubuntu.com/a/50180
convert_pdf_to_png() {
    if [ $# -lt 1 ]
    then
        echo -e "convert PDF document to PNG image (default dpi is 150)"
        echo -e "\nUsage:\n$0 <pdf> <dpi> <startingpage> <endingpage>"
        echo -e "\nall pages to images:\n$0 file.pdf"
        echo -e "\nchange dpi (common dpi are 150, 300, 600):\n$0 file.pdf 300"
        echo -e "\nsingle page to image:\n$0 file.pdf 300 5"
        echo -e "\nmultiple pages to images:\n$0 file.pdf 300 5 12"

        return 1
    fi
    pdftoppm -png "$1" "${1%.*}"-"${2:-150}"DPI -r "${2:-150}" -f "$3" -l "${4:-$3}"
}

convert_pdf_to_jpg() {
    if [ $# -lt 1 ]
    then
        echo -e "convert PDF document to JPEG image (default dpi is 150)"
        echo -e "\nUsage:\n$0 <pdf> <dpi> <startingpage> <endingpage>"
        echo -e "\nall pages to images:\n$0 file.pdf"
        echo -e "\nchange dpi (common dpi are 150, 300, 600):\n$0 file.pdf 300"
        echo -e "\nsingle page to image:\n$0 file.pdf 300 5"
        echo -e "\nmultiple pages to images:\n$0 file.pdf 300 5 12"

        return 1
    fi
    pdftoppm -jpeg "$1" "${1%.*}"-"${2:-150}"DPI -r "${2:-150}" -f "$3" -l "${4:-$3}"
}

convert_pdf_to_tiff() {
    if [ $# -lt 1 ]
    then
        echo -e "convert PDF document to TIFF image (default dpi is 150)"
        echo -e "\nUsage:\n$0 <pdf> <dpi> <startingpage> <endingpage>"
        echo -e "\nall pages to images:\n$0 file.pdf"
        echo -e "\nchange dpi (common dpi are 150, 300, 600):\n$0 file.pdf 300"
        echo -e "\nsingle page to image:\n$0 file.pdf 300 5"
        echo -e "\nmultiple pages to images:\n$0 file.pdf 300 5 12"

        return 1
    fi
    pdftoppm -tiff "$1" "${1%.*}"-"${2:-150}"DPI -r "${2:-150}" -f "$3" -l "${4:-$3}"
}

convert_pdf_to_pgm-grayscale() {
    if [ $# -lt 1 ]
    then
        echo -e "convert PDF document to PGM Grayscale image (default dpi is 150)"
        echo -e "\nUsage:\n$0 <pdf> <dpi> <startingpage> <endingpage>"
        echo -e "\nall pages to images:\n$0 file.pdf"
        echo -e "\nchange dpi (common dpi are 150, 300, 600):\n$0 file.pdf 300"
        echo -e "\nsingle page to image:\n$0 file.pdf 300 5"
        echo -e "\nmultiple pages to images:\n$0 file.pdf 300 5 12"

        return 1
    fi
    pdftoppm -gray "$1" "${1%.*}"-"${2:-150}"DPI -r "${2:-150}" -f "$3" -l "${4:-$3}"
}

convert_pdf_to_pbm-monochrome() {
    if [ $# -lt 1 ]
    then
        echo -e "convert PDF document to PBM Monochrome image (default dpi is 150)"
        echo -e "\nUsage:\n$0 <pdf> <dpi> <startingpage> <endingpage>"
        echo -e "\nall pages to images:\n$0 file.pdf"
        echo -e "\nchange dpi (common dpi are 150, 300, 600):\n$0 file.pdf 300"
        echo -e "\nsingle page to image:\n$0 file.pdf 300 5"
        echo -e "\nmultiple pages to images:\n$0 file.pdf 300 5 12"

        return 1
    fi
    pdftoppm -mono "$1" "${1%.*}"-"${2:-150}"DPI -r "${2:-150}" -f "$3" -l "${4:-$3}"
}

# }}}
#-------- Disk Image to ISO {{{
#------------------------------------------------------

#  https://github.com/helmuthdu/dotfiles/blob/master/.bashrc
convert2discimage_iso () {
    if [[ $# == 0 || $1 == "--help" || $1 == "-h" ]]; then
      echo -e "Converts raw|bin|cue|ccd|img|mdf|nrg disc image to ISO"
      echo -e "Usage: $0 <disc_image>"
    fi
    for i in $*; do
      if [[ ! -f "$i" ]]; then
        echo "'$i' is not a valid file; jumping it"
      else
        echo -n "converting $i..."
        # OUT=`echo $i | cut -d '.' -f 1`
        case $i in
              *.raw ) bchunk "$i" "${i%.*}.iso" ;; #raw=bin
        *.bin|*.cue ) bchunk "${i%.*}.bin" "${i%.*}.cue" "${i%.*}.iso" ;; # bin,cue
        *.ccd|*.img ) ccd2iso "${i%.*}.img" "${i%.*}.iso" ;; # Clone CD images
              *.mdf ) mdf2iso "$i" "${i%.*}.iso" ;; # Alcohol images
              *.nrg ) nrg2iso "$i" "${i%.*}.iso" ;; # Nero images
                  * ) echo "$0 don't know de extension of '$i'";;
        esac
        if [[ $? != 0 ]]; then
          echo -e "${R}ERROR!${W}"
        else
          echo -e "${G}done!${W}"
        fi
      fi
    done
}

# https://help.ubuntu.com/community/ManageDiscImages#CloneCD.2FIMG_Images
convert_to_iso() {
 if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<bin|cue|img|nrg|mdf|mds>"
 else
    if [ -f "$1" ] ; then
        NAME=${1%.*}
        #mkdir $NAME && cd $NAME
        case "$1" in
          *.bin)       bchunk "$1" "${1%.*}".cue "${1%.*}".iso ;; # bin/cue
          *.cue)       bchunk "${1%.*}".bin "$1" "${1%.*}".iso ;; # bin/cue
          *.img)       ccd2iso "$1" "${1%.*}".iso ;; # CloneCD/IMG
          *.nrg)       nrg2iso "$1" "${1%.*}".iso ;;
          *.mdf)       mdf2iso "$1" "${1%.*}".iso ;;
          *.mds)       mdf2iso "${1%.*}".mdf "${1%.*}".iso ;;
          *)           echo "$0: '$1' - unsupported format" ;;
        esac
    else
        echo "'$1' - file does not exist"
    fi
fi
}

# ex() -- Extract compressed files (tarballs, zip, etc)
ex() {
    for file in "$@"; do
        if [ -f "$file" ]; then
            local file_type=$(file -bizL "$file")
            case "$file_type" in
                *application/x-tar*|*application/zip*|*application/x-zip*|*application/x-cpio*)
                    bsdtar -x -f "$file" ;;
                *application/x-gzip*)
                    gunzip -d -f "$file" ;;
                *application/x-bzip*)
                    bunzip2 -f "$file" ;;
                *application/x-rar*)
                    7z x "$file" ;;
                *application/octet-stream*)
                    local file_type=$(file -bzL "$file")
                    case "$file_type" in
                        7-zip*) 7z x "$file" ;;
                        *) echo -e "Unknown filetype for '$file'\n$file_type" ;;
                    esac ;;
                *)
                    echo -e "Unknown filetype for '$file'\n$file_type" ;;
            esac
        else
            echo "'$file' is not a valid file"
        fi
    done
}


# }}}
#-------- Convert to Documents {{{
#------------------------------------------------------
convert_images_to_pdf() {
    if [ $# -lt 1 ]
    then
        echo -e "convert images into one single pdf"
        echo -e "\nUsage:\n$0 <images>"
        echo -e "\nexample:\n$0 image1.jpg image2.jpg image3.jpg"
        echo -e "\n$0 *.jpg"
        echo -e "\n$0 *.png"

        return 1
    fi
    convert "$@" "${1%.*}"-`date +'%F_%Hh%Ms%S'`.pdf
}


# Using libreoffice
convert_to_html() { soffice --headless --convert-to "html:XHTML Writer File:UTF8" "$1" ;}
convert_to_txt() { soffice --headless --convert-to "txt:Text (encoded):UTF8" "$1" ;}


# convert_to_pdfo() {
#  if [ -z "$1" ]; then
#     # display usage if no parameters given
#     echo "Usage: extract <path/file_name>.<bin|cue|img|nrg|mdf|mds>"
#  else
#     if [ ! -f "${1%.*}".pdf ] ; then
#         NAME=${1%.*}
#         case "$1" in
#           *.doc|*.docx)    soffice --headless --convert-to pdf "$@" ;;
#           *.ppt|*.pptx)    soffice --headless --convert-to pdf "$@" ;;
#           *.xls|*.xlsx)    soffice --headless --convert-to pdf "$@" ;;
#           *.txt|*.rtf)     soffice --headless --convert-to pdf "$@" ;;
#           *.html)          soffice --headless --convert-to pdf "$@" ;;
#           *.epub)          soffice --headless --convert-to pdf "$@" ;;
#           *.cbr|*.cbz|*.cb7|*.cbt|*.cba)    ebook-convert "$1" .pdf ;;
#           *.jpg|*.jpeg)    convert "$@" "${1%.*}"-`date +'%F_%Hh%Ms%S'`.pdf ;;
#           *.pbm|*.pgm)     convert "$@" "${1%.*}"-`date +'%F_%Hh%Ms%S'`.pdf ;;
#           *.png)           convert "$@" "${1%.*}"-`date +'%F_%Hh%Ms%S'`.pdf ;;
#           *)               echo "'$1' - unsupported format or file does not exist" ;;
#         esac
#     else
#         echo "'${1%.*}.pdf' - file exist, skipping to prevent overwrite"
#     fi
# fi
# }

# http://duff-johnson.com/2014/02/17/the-8-most-popular-document-formats-on-the-web/
convert_to_pdf() {
	if [ $# -lt 1 ]; then
		echo -e "Usage: $0 <file_name>.<doc|docx|ppt|pptx|xls|xlsx|txt|rtf|html|epub|cbr|cbz|cbt|cb7|cba|jpg|jpeg|pbm|pgm|png>"
		echo -e "\nsingle:   $0 file.doc"
		echo -e "\nmultiple: $0 file1.jpg file2.jpg file3.jpg"
		echo -e "\nwildcard: $0 *.png"
		echo -e "\nRequirement: calibre imagemagick libreoffice"
        return 1
	else
		if [ ! -f "${1%.*}".pdf ] ; then
		NAME=${1%.*}
		case "$1" in
		  *.doc|*.docx)    soffice --headless --convert-to pdf "$@" ;;
		  *.ppt|*.pptx)    soffice --headless --convert-to pdf "$@" ;;
		  *.xls|*.xlsx)    soffice --headless --convert-to pdf "$@" ;;
		  *.txt|*.rtf)     soffice --headless --convert-to pdf "$@" ;;
		  *.html)          soffice --headless --convert-to pdf "$@" ;;
		  *.epub)          soffice --headless --convert-to pdf "$@" ;;
		  *.cbr|*.cbz|*.cb7|*.cbt|*.cba)    ebook-convert "$1" .pdf ;;
		  *.jpg|*.jpeg|*.pbm|*.pgm|*.png)   convert "$@" "${1%.*}"-`date +'%F_%Hh%Ms%S'`.pdf ;;
		  *)               echo "'$1' - unsupported format or file does not exist" ;;
		esac
		else
			echo "'${1%.*}.pdf' - file exist, skipping to prevent overwrite"
		fi
	fi
}

# }}}
#-------- Convert to Android (Smartphone, Tablet) {{{
#------------------------------------------------------
# http://develop.participatoryculture.org/index.php/ConversionMatrix
# https://trac.handbrake.fr/wiki/BuiltInPresets

ANDROID_DEVICE=(-acodec aac -ab 160k -vcodec libx264 -preset slow -profile:v baseline -level 30 -maxrate 10000000 -bufsize 10000000 -f mp4 -threads 0 -strict experimental)
convert2devices-android_720pnd()  { ffmpeg -i "$1" -s 1280x720  ${ANDROID_DEVICE[*]} "${1%.*}".android720p.mp4 ;}
convert2devices-android_1080p() { ffmpeg -i "$1" -s 1920x1080 ${ANDROID_DEVICE[*]} "${1%.*}".android1080p.mp4 ;}

convert2droid-kindlefire() {
	if [ $# -lt 1 ]; then
		echo -e "Usage: $0 <file_name>"
		echo -e "\nsingle:   $0 file.avi"
		echo -e "\nmultiple: $0 file1.avi file2.avi file3.avi"
		echo -e "\nwildcard: $0 *.avi"
		return 1
	fi

	myArray=( "$@" )
	for arg in "${myArray[@]}"; do
		while [ ! -f "${arg%.*}".kindlefire.mp4 ]
		do
			ffmpeg -i "$arg" -s 1024x600 -acodec aac -ab 96k -vcodec libx264 -preset slow -f mp4 -crf 22 -strict experimental "${arg%.*}".kindlefire.mp4
		done
	done
}

convert2droid-androidtablet() {
	if [ $# -lt 1 ]; then
		echo -e "A preset for Midrange Andriud Tablet devices."
		echo -e "\nUsage: $0 <file_name>"
		echo -e "\nsingle:   $0 file.avi"
		echo -e "\nmultiple: $0 file1.avi file2.avi file3.avi"
		echo -e "\nwildcard: $0 *.avi"
		return 1
	fi

	myArray=( "$@" )
	for arg in "${myArray[@]}"; do
		while [ ! -f "${arg%.*}".androidtablet.mp4 ]
		do
			HandBrakeCLI -i "$arg" -o "${arg%.*}.androidtablet.mp4" --preset="Android Tablet"
		done
	done
}

convert2droid-android() {
	if [ $# -lt 1 ]; then
		echo -e "A preset for Midrange android devices."
		echo -e "\nUsage: $0 <file_name>"
		echo -e "\nsingle:   $0 file.avi"
		echo -e "\nmultiple: $0 file1.avi file2.avi file3.avi"
		echo -e "\nwildcard: $0 *.avi"
		return 1
	fi

	myArray=( "$@" )
	for arg in "${myArray[@]}"; do
		while [ ! -f "${arg%.*}".android.mp4 ]
		do
			HandBrakeCLI -i "$arg" -o "${arg%.*}.android.mp4" --preset="Android"
		done
	done
}
convert2droid-high() {
	if [ $# -lt 1 ]; then
		echo -e "HandBrake's general-purpose preset for High Profile H.264 video, with all the bells and whistles."
		echo -e "\nUsage: $0 <file_name>"
		echo -e "\nsingle:   $0 file.avi"
		echo -e "\nmultiple: $0 file1.avi file2.avi file3.avi"
		echo -e "\nwildcard: $0 *.avi"
		return 1
	fi

	myArray=( "$@" )
	for arg in "${myArray[@]}"; do
		while [ ! -f "${arg%.*}".high.mp4 ]
		do
			HandBrakeCLI -i "$arg" -o "${arg%.*}.high.mp4" --preset="High Profile"
		done
	done
}

convert2droid-normal() {
	if [ $# -lt 1 ]; then
		echo -e "HandBrake's normal, default settings."
		echo -e "\nUsage: $0 <file_name>"
		echo -e "\nsingle:   $0 file.avi"
		echo -e "\nmultiple: $0 file1.avi file2.avi file3.avi"
		echo -e "\nwildcard: $0 *.avi"
		return 1
	fi

	myArray=( "$@" )
	for arg in "${myArray[@]}"; do
		while [ ! -f "${arg%.*}".normal.mp4 ]
		do
			HandBrakeCLI -i "$arg" -o "${arg%.*}.normal.mp4" --preset="Normal"
		done
	done
}

# }}}
#-------- Demuxing {{{
#------------------------------------------------------

demux-videotrack() { ffmpeg -i "$1" -an -codec:v copy "${1%.*}"."$0"."${1##*.}" ;}
demux-audiotrack() { ffmpeg -i "$1" -vn -codec:a copy "${1%.*}"."$0"."${1##*.}" ;}

# demux_subs
# demux_fonts/attachments

# }}}
#-------- Plowshare {{{
#------------------------------------------------------
# d/l cyberlocker files like rapidshare, mediafire ..etc
# tutorial video: http://www.youtube.com/watch?v=5AzFdX-EyeI
# http://code.google.com/p/plowshare/
# PPA: https://launchpad.net/~plowsharepackagers
plowdown-depositfiles() { plowdown -r 3 --max-rate 900K -m ~/.config/plowshare/depositfiles.txt ;}
plowdown-uploaded() { plowdown -r 3 --max-rate 900K -m ~/.config/plowshare/uploaded.txt ;}
plowdown-netloadin() { plowdown -r 3 --max-rate 900K -m ~/.config/plowshare/netloadin.txt ;}
plowdown-rapidgator() { plowdown -r 3 --max-rate 900K -m ~/.config/plowshare/rapidgator.txt ;}
plowdown-rapidshare() { plowdown -r 3 --max-rate 900K -m ~/.config/plowshare/rapidshare.txt ;}
plowdown-random() { plowdown -r 3 --max-rate 900K -m ~/.config/plowshare/random.txt ;}
alias plowup='plowup turbobit'

#}}}
# concat  = joinning files in a series (like a train)
# convert = change one format to another
# slice   = cut files into peices (video, sound, both)
# mux     = flatting files such as video and audio track in parallel
# demux   = extraction of video or sound tracks
# split   = split into peiceses (archive into peices like zip, rar)
# combine = join files together again (usually for splited archive files like 001, zip ..etc)
#-------- Rip Disc to Files {{{
#------------------------------------------------------

#http://www.reddit.com/r/commandline/comments/19ept5/open_discussion_cool_trick_thursday_what_are_your/c8neljz
convert_audiocd_to_mp3() { cdparanoia -B ; for f in *.wav ; do sox -S $f "${f%.wav}.mp3" ; rm $f ; done ;}
convert_audiocd_to_flac() { cdparanoia -B ; for f in *.wav ; do sox -S $f "${f%.wav}.flac" ; rm $f ; done ;}
convert_audiocd_to_ogg() { cdparanoia -B ; for f in *.wav ; do sox -S $f "${f%.wav}.ogg" ; rm $f ; done ;}
convert_audiocd_to_iso() { use dd or ddrescure or readom ;}


# has CDDB tags?
ripit-mydefault() {
	ripit -o ~/Downloads -p 0 -c 0 --nointeraction "$@"
	# -p ; playlist (m3u file) 0=disable
	# --nointeraction; use 1st CDDB it finds
	# -c ; 0 - Lame (for mp3), 1 - Oggenc, 2 - Flac, 3 - Faac,
	# 	4 - mp4als, 5 - Musepack, 6 - Wavpack, 7 - ffmpeg
	# $@ ; specfic tracks like 1-4,5,8
}

rip_to_mp3() { mkdir -p ~/Downloads/audiocd ; ripit -o ~/Downloads/audiocd -p 0 -c 0 --nointeraction "$@" ;}
rip_to_ogg() { mkdir -p ~/Downloads/audiocd ; ripit -o ~/Downloads/audiocd -p 0 -c 1 --nointeraction "$@" ;}
rip_to_flac() { mkdir -p ~/Downloads/audiocd ; ripit -o ~/Downloads/audiocd -p 0 -c 2 --nointeraction "$@" ;}
rip_to_aac() { mkdir -p ~/Downloads/audiocd ; ripit -o ~/Downloads/audiocd -p 0 -c 3 --nointeraction "$@" ;}

# }}}
#-------- Hardcoded Subtitles to Videos {{{
#------------------------------------------------------
# https://trac.ffmpeg.org/wiki/HowToBurnSubtitlesIntoVideo
# https://www.bunkus.org/videotools/mkvtoolnix/samples/
# install ttf-ms-fonts
# ffmpeg with --enable-libass

convert_to_ass() { ffmpeg -i "$1" "${1%.*}".ass ;} # srt --> ass
convert_to_srt() { ffmpeg -i "$1" "${1%.*}".srt ;} # ass --> srt

# The first 2 are alpha
# AABBGGRR = &HAABBGGRR

# usage: aliasname filename subtitles(srt/ass)
# convert_to_hardsubs() { ffmpeg -y -i "$1" -vf subtitles="$2":force_style="'Fontsize=35;FontName=DejaVu Serif,PrimaryColour=&H5014F0FF'" -codec:v libx264 -preset medium -crf 22 -codec:a aac -qscale:a 6 -strict experimental "${1%.*}"-hardsubs.mp4 ;}

convert_to_hardsubs() {
if [ $# -lt 2 ]
then
	echo -e "Use ffmpeg to hardcode subtitles into one movietrack"
	echo -e "\nUsage:\n$0 [file] [subtitle (srt/ass)] [fontsize (25)] [color code (yellow)] [fontname (dejavu sans mono)]"
	echo -e "\nexample:\n$0 file.mp4 file.srt"
	echo -e "$0 file.mp4 file.srt 30 5000FF14 Arial \n"
	echo -e "kml color code: http://www.zonums.com/gmaps/kml_color/"


	exit 1
fi

ffmpeg -y -i "$1" -vf subtitles="$2":force_style="'Fontsize=${3:-25},PrimaryColour=&H${4:-5014F0FF},FontName=${5:-DejaVu Sans Mono}'" -codec:v libx264 -preset medium -crf 22 -codec:a aac -qscale:a 6 -strict experimental "${1%.*}"-hardsubs.mp4
}

# 1min video testing
convert_to_testing() { ffmpeg -y -i "$1" -ss 00:05:00 -t 00:01:00 -vf subtitles="$2":force_style="'Fontsize=35;FontName=DejaVu Serif,PrimaryColour=&H5014F0FF'" -codec:v libx264 -preset medium -crf 22 -codec:a aac -qscale:a 6 -strict experimental "${1%.*}"-testing.mp4 ;}


# }}}
#-------- Concatenate Files {{{
#------------------------------------------------------

# tutorial video: http://www.youtube.com/watch?v=eQoOk5Xbt3M
concat_pdf() {
    if [ $# -lt 1 ]
    then
        echo -e "concatenate multiple pdf files into one single pdf"
        echo -e "\nUsage:\n$0 <pdfs>"
        echo -e "\nexample:\n$0 file1.pdf file2.pdf file3.pdf"
        echo -e "\n$0 *.pdf"

        return 1
    fi
	gs -dBATCH -dNOPAUSE -sDEVICE=pdfwrite -sOutputFile="${1%.*}"-`date +'%F_%Hh%Ms%S'`_concat.pdf -f "$@"
}

concat_png() {
    if [ $# -lt 1 ]
    then
        echo -e "concatenate multiple images into one single png"
        echo -e "\nUsage:\n$0 <images>"
        echo -e "\nexample:\n$0 file1.jpg file2.png file3.jpeg"
        echo -e "\n$0 *.jpg"
        echo -e "\n$0 *.png"

        return 1
    fi
	convert -append "$@" concatoutput.png
}
concat_jpg() {
    if [ $# -lt 1 ]
    then
        echo -e "concatenate multiple images into one single jpg"
        echo -e "\nUsage:\n$0 <images>"
        echo -e "\nexample:\n$0 file1.jpg file2.png file3.jpeg"
        echo -e "\n$0 *.jpg"
        echo -e "\n$0 *.png"

        return 1
    fi
	convert -append "$@" concatoutput.jpg
}

# }}}

#-------- Concatenate Videos {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# REFF: http://askubuntu.com/a/18210
# LINK: http://quvi.sourceforge.net/

# DEMO: https://www.youtube.com/watch?v=EAWGFJoZXAU
concat2video-avi() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <file>"
    echo -e "\nExample: \n$0 file1.avi file2.avi file3.avi"
    echo -e "$0 *.avi"
    echo -e "\nrequires package: transcode"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}"-movie.mp4 ]
    do
      avimerge -o "${1%.*}".concat.avi -i "$arg"
    done
done
}


# VIDEOCODEC="Xvid"
# AUDIOCODEC="MP3"
# for FIL in `ls *mp4 | sort` ; do
# avidemux2 --video-codec $VIDEOCODEC --audio-codec $AUDIOCODEC --force-alt-h264 --load "$FIL" --save ${FIL%.*}.avi --quit
# done


# concat_movie() {
# 	appendfile=$(echo "$@" | sed 's: : --append :g')
# 	avidemux2_cli --nogui --audio-codec copy --video-codec copy --output-format "${1##*.}" --load $(echo $appendfile) --save "${1%.*}"-appended."${1##*.}"
# }
#
concat2video-movie() {
	avidemux2_cli --nogui --force-alt-h264 \
	--audio-codec copy --video-codec copy --output-format "${1##*.}" \
	--load "$1" --append "$2" --append "$3" --append "$4" \
	--append "$5" --append "$6" --append "$7" --append "$8" \
	--save "${1%.*}"-appended."${1##*.}"
}

concat2video-mp4() {
	avidemux2_cli --nogui --force-alt-h264 \
	--audio-codec copy --video-codec copy --output-format "${1##*.}" \
	--load "$1" --append "$2" --append "$3" --append "$4" \
	--append "$5" --append "$6" --append "$7" --append "$8" \
	--save "${1%.*}"-appended."${1##*.}"
}


# }}}


#-------- Extract Files {{{
#------------------------------------------------------

# http://www.linuxjournal.com/content/tech-tip-extract-pages-pdf
extract_pdf() {
    if [ $# -lt 2 ]
    then
        echo -e "convert images into one single pdf"
        echo -e "\nUsage:\n$0 <input file> <startingpage> <endingpage>"
        echo -e "\nexample:\n$0 file.pdf 6"
        echo -e "\n$0 file.pdf 13 26"

        return 1
    fi

    gs -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -dSAFER -dFirstPage="${2}" -dLastPage="${3:-$2}" -sOutputFile="${1%.pdf}"_p"${2}"-p"${3:-$2}".pdf "${1}"
}

# }}}
#-------- Muxing {{{
#------------------------------------------------------
mux_to_mkv() {
	# mkvmerge -o newfile.mkv part1.mkv +part2.mkv
	# appendfile=$echo ${@} | sed 's: : +:g')
	appendfile=$(echo "$@" | sed 's: : +:g')
        # appendfile=$(echo "$@" | sed 's/ /\ +/g')

	mkvmerge -o "${1%.*}".mux.mkv $(echo $appendfile)
	echo $appendfile

	}

# }}}
#-------- Web Search Prefix {{{
#------------------------------------------------------
# Custom seaches
gg-comic() { sitelist=$(echo "avaxhome.ws h33t.com mycomicpost.com bdcomics.bdgamers.net" \
	  	| sed 's/ /\+OR\+site\:/g')
	url=$(echo "https://encrypted.google.com/search?hl=en&q=$@+site:$sitelist"\
		| sed 's/ /+/g'); $BROWSER $url; }
gg-cyberlocker() { sitelist=$(echo "hotfile.com rapidshare.com mediafire.com
	uploading.com depositfiles.com zshare.net filepost.com filefactory.com
	2shared.com zippyshare.com slingfile.com wuala.com filetram.com
	4shared.com rabidfiles.com" \
		| sed 's/ /\+OR\+site\:/g')
	url=$(echo "https://encrypted.google.com/search?hl=en&q=$@+site:$sitelist"\
		| sed 's/ /+/g'); $BROWSER $url; }
gg-dojin() { sitelist=$(echo "hentairules.net fakku.net hentaifromhell.net" \
		| sed 's/ /\+OR\+site\:/g')
	url=$(echo "https://encrypted.google.com/search?hl=en&q=$@+site:$sitelist"\
		| sed 's/ /+/g'); $BROWSER $url; }
gg-icons() { sitelist=$(echo "iconseeker.com iconarchive.com iconfinder.com
	deviantart.com veryicon.com iconspedia.com" \
		| sed 's/ /\+OR\+site\:/g')
	url=$(echo "https://encrypted.google.com/search?hl=en&q=$@+site:$sitelist"\
		| sed 's/ /+/g'); $BROWSER $url; }
gg-keygen() { sitelist=$(echo "crack.ms/cracks/crack.ms?id" \
		| sed 's/ /\+OR\+site\:/g')
	url=$(echo "https://encrypted.google.com/search?hl=en&q=$@+site:$sitelist"\
		| sed 's/ /+/g'); $BROWSER $url; }
gg-music() { url=$(echo "https://encrypted.google.com/search?hl=en&q=
	intitle:index.of+mp3+"$@"+-html+-htm+-txt"\
		| sed 's/ /+/g'); $BROWSER $url; }
gg-packages() { sitelist=$(echo "sourceforge.net github.com archlinux.org/packages
	freecode.com/projects gnome.org/extension python.org/pypi gentoo.org/package" \
		| sed 's/ /\+OR\+site\:/g')
	url=$(echo "https://encrypted.google.com/search?hl=en&q=$@+site:$sitelist"\
		| sed 's/ /+/g'); $BROWSER $url; }
gg-pastebin() { sitelist=$(echo "pastebin.com paste2.org pastie.org snipt.net
	heypasteit.com/clip pastee.org shell-fu.org commandlinefu.com catonmat.net
	linuxconfig.net github.com bitbucket.org slexy.org stackoverflow.com
	askubuntu.com superuser.com dotfiles.org dotshare.it gitorious.org
	serverfault.com wikia.com stackexchange.com" \
		| sed 's/ /\+OR\+site\:/g')
	url=$(echo "https://encrypted.google.com/search?hl=en&q=$@+site:$sitelist"\
		| sed 's/ /+/g'); $BROWSER $url; }
gg-piratebay() { url=$(echo "http://thepiratebay.org/search/$@" \
		| sed 's/ /+/g'); $BROWSER $url; }
gg-porn() { sitelist=$(echo "youporn.com redtube.com xvideos.com xhamster.com
	tube8.com grayvee.com pornhub.com/view_video.php?viewkey tnaflix.com
	youjizz.com hardsextube.com/video drtuber.com/video pornoxo.com limesteam.com
       	motherless.com xnxx.com cliphunter.com extremetube.com/video" \
		| sed 's/ /\+OR\+site\:/g')
	url=$(echo "https://encrypted.google.com/search?hl=en&q=$@+site:$sitelist"\
		| sed 's/ /+/g'); $BROWSER $url; }
gg-reader() { url=$(echo "https://encrypted.google.com/reader/view/#search/$@" \
		| sed 's/ /+/g'); $BROWSER $url; }
gg-search() { url=$(echo "https://encrypted.google.com/search?hl=en&q=$@" \
		| sed 's/ /+/g'); $BROWSER $url; }
gg-serial() { sitelist=$(echo "freeserials.com/serials/download.php?id= serials.ws/d.php?n" \
		| sed 's/ /\+OR\+site\:/g')
	url=$(echo "https://encrypted.google.com/search?hl=en&q=$@+site:$sitelist"\
		| sed 's/ /+/g'); $BROWSER $url; }
gg-torrent() { sitelist=$(echo "eztv.it thepiratebay.se torrentzap.com fenopy.com
	torrindex.com h33t.com tokyotosho.info nyaa.eu" \
		| sed 's/ /\+OR\+site\:/g')
	url=$(echo "https://encrypted.google.com/search?hl=en&q=$@+site:$sitelist"\
		| sed 's/ /+/g'); $BROWSER $url; }
gg-translate() {
	$BROWSER http://translate.google.com/#auto/en/"$*" ;}

#}}}
#-------- Internet Videos - Castalba.tv {{{
#------------------------------------------------------
# http://castalba.tv/channels
# Animation, Documentary, Entertainment, Sports, News

# sample of fail capture links
#rtmpdump -r "rtmp://live.castalba.tv/calive" -a "calive" -f "LNX 11,2,202,243" -W "http://static.castalba.tv/player.swf" -p "http://castalba.tv/channel/6768" -y "174956" -o 174956.flv

CTVPLAYER=mplayer
ctv-news-aljazeera() { rtmpdump -v -r "rtmp://aljazeeraflashlivefs.fplive.net/aljazeeraflashlive-live" \
	-a "aljazeeraflashlive-live" \
	-f "LNX 11,2,202,261" \
	-W "http://static.castalba.tv/player.swf" \
	-p "http://castalba.tv/channel/4182" \
	-y "aljazeera_eng_low" | "$CTVPLAYER" - ;}

#}}}
#-------- GNOME 2 configs {{{
#------------------------------------------------------

# function h-framebuffer() {
# echo -e '
# mplayer -vo fbdev -fs -vf scale=1280:-3 FileName
# mplayer -vo fbdev -fs -vf scale=-3:1024 FileName
#
# on Arch linux use fbdev2
# mplayer -vo fbdev2
#
# vlc video_file
# vlc --vout fb video_file
# '}
# function h-gconf-tweaks() {
# echo -e "
# #Wallpaper Changer
# bash -c 'gconftool-2 -t str -s /desktop/gnome/background/picture_filename "$(find ~/Pictures/Wallpapers -type f | shuf -n1)"'
#
# compiz --replace
# metacity --replace
# emerald --replace
# xkill
# gnome-system-monitor
# gnome-search-tool --hidden
#
# #Dont Dim When Asking for Password
# gconftool-2 --type boolean --set /apps/gksu/disable-grab "True"
# gconftool-2 --set "/apps/metacity/general/button_layout" --type string ":close"
#
# #Button Placement
# gconftool-2 --set "/apps/metacity/general/button_layout" --type string ":minimize,maximize,close"
# gconftool-2 --set "/apps/metacity/general/button_layout" --type string ":close"
#
# #Middle Click Minimize
# gconftool-2 --set "/apps/metacity/general/action_middle_click_titlebar" --type string "minimize"
#
# #Hide Desktop Icon Drives
# gconftool-2 --set "/apps/nautilus/desktop/volumes_visible" --type boolean "false"
#
# #Disable Lock on Idle
# gconftool-2 --set "/apps/gnome-power-manager/lock/gnome_keyring_hibernate" --type boolean "false"
# gconftool-2 --set "/apps/gnome-power-manager/lock/hibernate" --type boolean "false"
# gconftool-2 --set "/apps/gnome-power-manager/lock/suspend" --type boolean "false"
#
# #Enable Metacity Compositing
# gconftool-2 --set '/apps/metacity/general/compositing_manager' --type boolean "true"
#
# #Disable Screensaver
# gconftool-2 --set '/apps/gnome-screensaver/idle_activation_enabled' --type boolean "false"
# gconftool-2 --set '/apps/gnome-screensaver/lock_enabled' --type boolean "false"
#
# #Clock Format
# gconftool-2 --set '/apps/panel/applets/clock_screen0/prefs/format' --type string "custom"
# gconftool-2 --set '/apps/panel/applets/clock_screen0/prefs/custom_format' --type string "%a %b/%d/%y, %I:%M %p"
#
# #AWN Auto Hide
# Set awn setting behavior: Custom | Autohide mode: Fade Out | Icon Effects: Simple
# gconftool-2 --set '/apps/instances/avant-window-navigator/panel-1/panel/intellihide_mode' --type string "0"
#
# #AWN OLD WAY TO AUTO HIDE
# gconftool-2 --set '/apps/awn-applet-taskmanager/intellihide' --type boolean "false"
#
# # Default Open App, LINK CLICK
# gconftool-2 -t string -s /desktop/gnome/url-handlers/magnet/command "/usr/bin/transmission-gtk %s"
# gconftool-2 -s /desktop/gnome/url-handlers/magnet/needs_terminal false -t bool
# gconftool-2 -t bool -s /desktop/gnome/url-handlers/magnet/enabled true
#
#
# "}


# }}}
#-------- Clean Stuff {{{
#------------------------------------------------------

# http://www.commandlinefu.com/commands/view/954
symlinks() { find . -type l ! -exec test -e {} \; -print ;}
symlinks-delete() { find . -type l ! -exec test -e {} \; -print0 | xargs -0 rm ;}
rm-except() {
	find . -type f -not -name '*copy*' | xargs rm
}
rmdir-empty() { find -empty -print -delete ;}
# --// Cleanup //--
cleanup () {
    echo -e '\e[1;31m * Cleaning Thumbnails * \e[1;37m'
    rm -rfv ~/.thumbnails/*
    rm -rfv ~/.cache/thumbnails/*
    echo -e '\e[1;31m * Removing cache * \e[1;37m'
    rm -rfv ~/.cache/chromium/*
    rm -rfv ~/.cache/vlc/*
    echo -e '\e[1;31m * Cleaning Trash * \e[1;37m'
    gvfs-trash --empty
}
d-swiggle() { find . -type f -name '*~' -exec rm -v {} \; ;}
d-url() { find . -type f -iname '*.url' -exec rm -v {} \; ;}
d-thumbsdb() { find . -type f -iname 'Thumbs.db' -exec rm -v {} \; ;}
swiggle() { find . -name *~ -delete ;}
cleanlinks() {
	# not in the repos: inspired by http://www.xfree86.org/4.8.0/cleanlinks.1.html
	# delete empty folder
	find . -type d -empty -print0 | xargs -0 rmdir
	# delete broken symlinks
	find . -type l -xtype l | xargs -l rm
}
# }}}
#-------- Logitech K810 Keyboard {{{
#------------------------------------------------------

k810-battery() { echo Logitech K810 Battery: $(cat /sys/class/power_supply/hid-00:1f:20:a8:08:47-battery/capacity) ;}
k810-resync() { echo -e 'connect 00:1F:20:A8:08:47 \nexit' | bluetoothctl ;}
# }}}
#-------- TMSU (File Tagging CLI) {{{
#------------------------------------------------------

tmsu-add() { tmsu tag --tags "$@" ;}
tmsu-list() { tmsu tags ;}
tmsu-repair() { tmsu repair "$@" ;}
tmsu-search() { tmsu files "$@" ;}
fzf-tmsu() {
	nohup xdg-open "$(tmsu files "$@" | fzf -e -i )" >/dev/null 2>&1&

	# if cancle or fail then exit
	if [ $? -ne 0 ]
	then
	 	exit
	fi
}
# }}}
#-------- Surfraw Bookmarks {{{
#------------------------------------------------------
# surfraw completions testing
# https://blogs.oracle.com/AlejandroVargas/entry/awk_examples
# removes empty line, removes comments, prints 1st word, sort abc ordered
#
showbookmarks() { awk 'NF != 0 && !/#/ {print $1}' ~/.config/surfraw/bookmarks | sort -n ;}

#}}}
#-------- WINE Gaming {{{
#------------------------------------------------------
# get newest version
syu-winetrickz() { cd ~/Programs/appz/winetricks; rm -f winetricks; \
      	wget http://www.kegel.com/wine/winetricks; chmod +x winetricks ;}

# http://wiki.winehq.org/winetricks
# change wineprefix location so winetricks can be use on it
set-wineprefix() {
	WINEPREFIX="$PWD"
	echo "ex: /home/username/.PlayOnLinux/wineprefix/Office2007"
	echo "wineprefix is now set to: $WINEPREFIX"
}


#}}}
#-------- DPKG {{{
#------------------------------------------------------

alias pydeb='sudo python setup.py --command-packages=stdeb.command debianize'
alias dp-installed='dpkg --get-selections | grep $1'
alias dp-deb-show='dpkg --info'			#to examine archive files
alias dp-deb-content='dpkg --contents'		#to list their contents.
whichpkg() { dpkg -S $( which $1 ); }		#lookup for what package uses this command
cmdpkg() { PACKAGE=$(dpkg -S $(which $1) | cut -d':' -f1); echo "[${PACKAGE}]"; dpkg -s "${PACKAGE}" ;}


alias dp-history-install='cat /var/log/dpkg.log | grep "install "'
alias dp-history-upgrade='cat /var/log/dpkg.log | grep upgrade'
alias dp-history-remove='cat /var/log/dpkg.log | grep remove'
dp-history-rollback() { cat /var/log/dpkg.log | grep upgrade | grep "$2" -A10000000 | grep "$3" -B10000000 |awk '{print $4"="$5}';}


dp-hold()
{
echo -n "Please enter the package you wish to put a hold on:
"
read progID
echo "$progID hold" |sudo dpkg --set-selections
}

dp-unhold()
{
echo -n "Please enter the package you wish to remove the hold on:
"
read progID
echo "$progID install" |sudo dpkg --set-selections
}


killkernel() { #Removes all unused kernel, except the newest one
	dpkg -l 'linux-*' | sed '/^ii/!d;/'"$(uname -r \
	| sed "s/\(.*\)-\([^0-9]\+\)/\1/")"'/d;s/^[^ ]* [^ ]* \([^ ]*\).*/\1/;/[0-9]/!d' \
	| xargs sudo apt-get -y purge ;}

# }}}
#-------- Renaming Case {{{
#------------------------------------------------------

alias renameit="ls | rename -v 's/ /_/g'"	#change files with spaces to underscore
single-to-doubles() {
# for bash shell only
	for i in ?.jpg; do mv $i 0$i; done
	for i in ?.png; do mv $i 0$i; done
	for i in ?.PNG; do mv $i 0$i; done
}
doubles-to-triples() {
	for i in ??.jpg; do mv $i 0$i; done
	for i in ??.png; do mv $i 0$i; done
}
string-lowercase() { echo "$@" | tr '[:upper:]' '[:lower:]' ;}	# converts string to lowercase

# http://stackoverflow.com/a/3211670
nametodigit() {
	local a=1
	for i in `ls -v | grep -i "$1"`; do
	  new=$(printf "%04d.$1" "$a") #04 pad to length of 4
	  mv -- "${i}" "${new}"
	  let a=a+1
	done
}

paddy() {
for file in foo[0-9]*.png; do
  # strip the prefix ("foo") off the file name
  postfile=${file#foo}
  # strip the postfix (".png") off the file name
  number=${postfile%.png}
  # subtract 1 from the resulting number
  i=$((number-1))
  # copy to a new name in a new folder
  cp ${file} ../newframes/$(printf foo%08d.png $i)
done
}



# http://www.walkingrandomly.com/?p=2850
# adds leading zeros to digits in filenames

padme() {
	num=`expr match "$1" '[^0-9]*\([0-9]\+\).*'`
	paddednum=`printf "%03d" $num`
	echo ${1/$num/$paddednum}
}

# http://www.walkingrandomly.com/?p=2850
zeropadding() {
	num=`expr match "$1" '[^0-9]*\([0-9]\+\).*'`
	paddednum=`printf "%03d" $num`
	echo ${1/$num/$paddednum}
}



zeropad() { for i in "$@" ;do mv $i `padme $i`; done ;}
# http://www.youtube.com/watch?v=rE7ISiKoNec
#lower case bash/zsh
# lowercase() {
# 	# [bash] https://www.garron.me/en/bits/rename-files-from-uppercase-to-lowercase.html
# 	for i in *; do mv $i `echo $i | tr [:upper:] [:lower:]`; done
# 	# [zsh] https://lorenzod8n.wordpress.com/category/zsh/
# 	for file in *; do mv $file ${file:l}; done
# ;}

# http://stackoverflow.com/a/11824856
lowercase-extension() { find . -name '*.*' -exec sh -c ' a=$(echo "$0" | sed -r "s/([^.]*)\$/\L\1/"); [ "$a" != "$0" ] && mv "$0" "$a" ' {} \; ;}
# }}}
#-------- Keyboard related {{{
#------------------------------------------------------

touchpad-toggle() { synclient TouchpadOff=$(synclient -l | grep -c ‘TouchpadOff.*=.*0’) ;}
lang-toggle() { setxkbmap -option grp:alt_caps_toggle "us,jp" ;}
vim-toggle() {
# https://xpressrazor.wordpress.com/2014/03/30/script-to-toggle-keys
# toggle caplock and esc key
if xmodmap -pke | egrep -i "escape" | egrep -i "keycode.*9.*"; then
 echo "Changing from original to mapped"
 xmodmap -e "clear lock"
 xmodmap -e "keycode 66 = Escape"
 xmodmap -e "keycode 9 = Caps_Lock"
 xmodmap -e "add Lock = Caps_Lock"
else
 echo "Changing back from mapped to original"
 xmodmap -e "clear lock"
 xmodmap -e "keycode 9 = Escape"
 xmodmap -e "keycode 66 = Caps_Lock"
 xmodmap -e "add Lock = Caps_Lock"
fi
}
# }}}
#-------- Function Informations {{{
#------------------------------------------------------

function    osr              { shutdown -r now; }
function    osh              { shutdown -h now; }

function    mfloppy          { mount /dev/fd0 /mnt/floppy; }
function    umfloppy         { umount /mnt/floppy; }

function    mdvd             { mount -t iso9660 -o ro /dev/dvd /mnt/dvd; }
function    umdvd            { umount /mnt/dvd; }

function    mcdrom           { mount -t iso9660 -o ro /dev/cdrom /mnt/cdrom; }
function    umcdrom          { umount /mnt/cdrom; }


function    dub              { du -sclb $@; }
function    duk              { du -sclk $@; }
function    dum              { du -sclm $@; }

function    dfk              { df -PTak $@; }
function    dfm              { df -PTam $@; }
function    dfh              { df -PTah $@; }
function    dfi              { df -PTai $@; }
# }}}
#-------- OCR {{{
#------------------------------------------------------

ocr2clipboard() {
	# folder to dump it to
	DIR=/tmp

	# scale up the image resolution for better ocr-ing
	convert "$1" -resize 5000 "$DIR"/image_out.png
	# ocr the scaled image
	tesseract "$DIR"/image_out.png "$DIR"/result
	# copy to the clipboard
	xclip -selection clipboard -i "$DIR"/result.txt
}
# }}}
#-------- Midi Music {{{
#------------------------------------------------------

midplayer() { adlmidi "$1" > /dev/null 2>&1 ;}
# https://wiki.archlinux.org/index.php/FluidSynth#Standalone_mode
midi-fluidsynth() { fluidsynth -a alsa -m alsa_seq -l -i /usr/share/soundfonts/fluidr3/FluidR3GM.SF2 "$1" ;}
# }}}
#-------- SSD TRIM {{{
#------------------------------------------------------

# http://www.webupd8.org/2013/01/enable-trim-on-ssd-solid-state-drives.html
trim-check() {
#	sudo hdparm -I /dev/sda | grep "TRIM supported"
	sudo hdparm -I /dev/"$1" | awk '/.*TRIM supported.*/{ if ($1 == "*") print "Yes, TRIM is enabled"; else print "No, TRIM is not enabled." ;}'
}
trim-fstrim() { sudo fstrim -v "$1" ;}
gen-cron-trim() { sudo cp ~/.scripts/trim /etc/cron.daily/ ;}
# }}}
#-------- OLD CFG {{{
#------------------------------------------------------

cfg-ghsync() { $EDITOR ~/.scripts/ghsync-script.sh ;}
cfg-dircolors() { $EDITOR ~/.dircolors ;}
cfg-percol() { $EDITOR ~/.percol.d/rc.py ;}
cfg-sourcelist() { sudo $EDITOR /etc/apt/sources.list ;}
cfg-pacman() { sudo $EDITOR /etc/pacman.conf ;}
cfg-pacman-mirrorlist() { sudo $EDITOR /etc/pacman.d/mirrorlist ;}
# http://blog.dotsmart.net/2011/09/30/change-font-size-in-chrome-devtools/
cfg-chromium-devtoolsize() { $EDITOR ~/.config/chromium/Default/User\ StyleSheets/Custom.css ;}
cfg-chromium-noscript() { $EDITOR ~/.config/chromium/Default/Extensions/odjhifogjcknibkahlpidmdajjpkkcfn/*/CHANGE__PASSWORD__HERE.js ;}
cfg-timidity() { sudo $EDITOR /etc/timidity++/timidity.cfg ;}
cfg-xdg-mine() { $EDITOR ~/.local/share/applications/mimeapps.list ;}

# }}}
#-------- IMGUR {{{
#------------------------------------------------------

# imgur album downloader
# https://github.com/alexgisby/imgur-album-downloader
# tutorial video: https://www.youtube.com/watch?v=dW4co9f5Ors
imguralbum() { python ~/.scripts/imgur-album-downloader/imguralbum.py "$@" ;}

imguralbum_cbz() {
	# usage: imguralbum [link] [filename]

	local IMGUR_SAVE_PATH=/tmp

	# make a temp folder
	# mkdir -p "$IMGUR_SAVE_PATH"/"$2"

	#download album
	python ~/.scripts/imgur-album-downloader/imguralbum.py "$1" "$IMGUR_SAVE_PATH"/"$2"

	#create zip archive using .cbz extension for comics
	zip -r "${2%/}.cbz" "$IMGUR_SAVE_PATH"/"$2"

	#delete temp folder
	rm -rf "$IMGUR_SAVE_PATH"/"$2"
}
# }}}

quicksynergy-daemon() { /usr/bin/synergys --daemon --config ~/.quicksynergy/synergy.conf ;}
# mutt background fix
COLORFGBG="default;default"

jdownloader() { nohup java -jar ~/.scripts/JDownloader/JDownloader.jar >/dev/null 2>&1& }


date-global() {
# use tzselect to find timezone listing
    local SHOWTIMEZONE="$(
    alias date='date +"%a %D %l:%M %p"'
    echo "Current Location:" "$(date)"
    echo "USA LosAngeles:" "$(TZ='America/Los_Angeles' date)"
    echo "Canada Alberta:" "$(TZ='America/Edmonton' date)"
    echo "USA NewYork:" "$(TZ='America/New_York' date)"
    echo "EU London:" "$(TZ='Europe/London' date)"
    echo "Bangladesh Dhaka:" "$(TZ='Asia/Dhaka' date)"
    echo "China Xinjiang:" "$(TZ='Asia/Urumqi' date)"
    echo "Vietnam Saigon:" "$(TZ='Asia/Ho_Chi_Minh' date)"
    echo "China Beijing:" "$(TZ='Asia/Shanghai' date)"
    echo "HK HongKong:" "$(TZ='Asia/Hong_Kong' date)"
    echo "Japan Tokyo:" "$(TZ='Asia/Tokyo' date)"
    )"
    echo "$SHOWTIMEZONE" | column -t
}

# http://stackoverflow.com/a/13541721
git-sync-ignorelist() { git rm --cached `git ls-files -i --exclude-from=.gitignore` ;}

mp3cut() {

	# example: cut from 5s to 10s; mpgtx -s file.mp3 "[00:05-00:10]" -b file-output
	mpgtx -s "$1" "["$2":"$3"-"$4":"$5"]" -b "${1%.*}"-output."${1##*.}"

	}

#audiobooks
mpv-saveposition() { mpv --save-position-on-quit "$@" ;}
mplayer-createplaylist() { ls --ignore="*.m3u" --ignore="*.pos" | grep -i "$1" | sort -u > "$1".m3u ;}
mpv-pip() { tsp mpv --ontop --no-border --autofit=500x280 --geometry=99%:99% "$@" ;}



#List files only, the advantage is that it works just like normal 'ls' so you could do 'lf -al | grep blah' etc.
lf () {
ls -1p $@ | grep -v '\/$'
}


qrdecode() { zbarimg -S\*.disable -Sqrcode.enable "$1" -q | sed '1s/^[^:]\+://'; }

#checkexist() {
#if which lynx >/dev/null; then
#    echo exists
#else
#    echo does not exist
#fi
#}

pvcp() {
	# a better cp with pv; http://jrenard.info/blog/a-better-cp-with-pv.html
	SOURCE=$1

	if [ -d $2 ]
	then
	    DESTINATION=$2/`basename $SOURCE`
	else
	    DESTINATION=$2
	fi

	pv ${SOURCE} | > ${DESTINATION}
}

# http://www.falsyana.com/2010/linux/cp-mv-with-a-progress-bar/
# http://unix.stackexchange.com/questions/2577/move-files-with-progress-bar
# slower then regular mv or cp
#alias cp='rsync --progress -ah'
#alias mv='rsync --progress -ah --remove-sent-files'



# Readablity CLI
# Removes junk from websites and just give you the body of the post
# requires python2-2.7 & python2-chardet
# https://github.com/buriy/python-readability
# ebook-convert from http://manual.calibre-ebook.com/cli/ebook-convert.html
readability2html() {
	python2.7 -m readability.readability -u "$1" > /tmp/"$2".html
	ebook-convert /tmp/"$2".html ~/Downloads/"$2".epub
}

compile-cpp() { gcc -Wall -o "${1%.*}" "$1" ;}

#mplayer playlist
mplist(){ mplayer -playlist <(tree -aif "$1" | awk '/\.(mp3|wav|ogg|avi|mpg|iso)$/'); }
#mplist(){ mplayer -playlist <(find "$1" -regex '.*\.\(mp3\|wav\|ogg\|avi\|mpg\|iso\)' | sort); }

zombie-process() { ps aux | awk '{ print $8 " " $2 }' | grep -w Z ;}

getexe() {
	TEMPFILE1=$(mktemp)
	TEMPFILE2=$(mktemp)
	INPUTFILE="$1"
	        # Extract raw version resource:
        wrestool --extract --raw --type=version "$INPUTFILE" > $TEMPFILE1

        if [ -s $TEMPFILE1 ]
        then
                # Search for a sane version string.
                # This (especially the final regexp) took me really long time to figure out. Am I that lame?
                VERSION=$(< $TEMPFILE1 \
                        tr '\0, ' '\t.\0' \
                        | sed 's/\t\t/_/g' \
                        | tr -c -d '[:print:]' \
                        | sed -r -n 's/.*Version[^0-9]*([0-9]+\.[0-9]+(\.[0-9][0-9]?)?).*/\1/p'
                )
		echo $VERSION
        fi
}
function etym(){
    for term in "$@"
    do
        url="etymonline.com/index.php?term=$term"
        curl -s $url | grep "<dd " |
                sed -e 's/<a[^>]*>\([^<]*\)<[^>]*>/:\1:/g' -e 's/<[^>]*>//g' |
                fold -sw `[ $COLUMNS -lt 80 ] && echo $COLUMNS || echo 79 `
        echo
    done
}
DISTRO=$(cat /etc/*-release | head -1 | awk -F\" '{print $(NF-1)}')
alias m-windowmanager="wmctrl -m | grep "Name:" | awk '{print $2}'"
mbuffer() {
	mplayer -vo fbdev $1 -fs -subcp ${2:-cp1251} -vf scale=${3:-1280:720}
}
# MPlayer on /dev/ttyN
alias fbmplayer='mplayer -vo fbdev2 -vf scale=1280:1024 "$@"'
lanshare() {
	echo "Test Server: http://127.0.0.1:8000 or http://localhost:8000"
	echo "Server IP (LAN): $(ifconfig eth0 | awk '/inet / {print $2}' | cut -d\: -f2):8000"
	echo "Server IP (WWW): $(curl -s http://checkip.dyndns.org/ | grep -o "[[:digit:].]\+"):8000"
	echo "Hit Ctrl+C to Stop Sharing"
	python2 -m SimpleHTTPServer
}


menu() {
  { tput smcup ; clear; } >/dev/tty
  [ -n "$LINES" ] || local LINES=$(tput lines)
  local val; val=$(slmenu -i -l $((LINES-1)) -p "${1:->}")
  local ret=$?
  tput rmcup > /dev/tty
  printf %s\\n "$val"
  return $ret
}
normalizeaudio()       { sox --norm "$1" "${1%.*}"."$0"."${1##*.}" ;}
# usage: combine-zip file.zip -- join splited zip (z01, z02 ..etc)
unsplit_zip() { zip -s- "$1" -O "${1%.*}"-unsplited.zip ;}

# usage: combine-001 file.avi.001 -- only requires the 1st file
unsplit_001() { lxsplit -j "$1" ;}

# mkvinfo filename.mkv
# mkvextract tracks filename.mkv 2:subs.ass
# mkvextract tracks filename.mkv 2:subs.srt
# mkvextract attachments filename.mkv 1:BAARS___.TTF
# put the font files into ~/.fonts and then run `fc-cache -vf'
# cd to flac
# flac to wav
# wav to cd
# split bin/cue audio

# -b = -b:v
# -av = audio bitrate

# gif, vob, m4v, mov, wmv, wma, vob, cd_mp3, cd_flac, avi
# mp4 subtitles burn in hardcoded

web2png() { CutyCapt --url="$1" --out=web2png_output.png ;}
# url shortener
tiny-isgd() { wget -qO - "http://is.gd/create.php?format=simple&url=$1" ;}
# create qrcode
qrcode() { link=$(echo "http://qrcode.kaywa.com/img.php?s=8&d=$@" | sed 's/ /+/g'); $BROWSER $link ;}
quicktime() { mplayer -rtsp-stream-over-tcp -user-agent QuickTime/7.6.4 ;}	# -cache 3072

# http://sourceforge.net/projects/lesspipe/
# tutorial video: https://www.youtube.com/watch?v=ZEHxG1OhIFo
#export LESSOPEN='|/usr/bin/lesspipe.sh %s'
#export LESS='-R'

# Source-Highlight
#export LESSOPEN='|/usr/bin/src-hilite-lesspipe.sh %s'
#export LESS='R'

# http://zameermanji.com/blog/2012/12/30/using-vim-as-manpager/
# export MANPAGER="/bin/sh -c \"col -b | vim -c 'set ft=man ts=8 nomod nolist nonu noma' -\""

 # Goes up many dirs as the number passed as argument, if none goes up by 1 by default


# REMIND ME, ITS IMPORTANT!
    # usage: remindme <time> <text>
    # e.g.: remindme 10m "omg, the pizza"
    remindme() { sleep $1 && zenity --info --text "$2" & }
  #

# https://github.com/Daenyth/dotfiles/blob/master/.bashrc
# Environment variables
# if have less; then
#     export PAGER='less'
#     unset LESSCHARSET # Fix manpages looking funky
#     export LESS='--ignore-case --line-numbers --hilite-unread  -z-4 --hilite-search --LONG-PROMPT --no-init --quit-if-one-screen --quit-on-intr --RAW-CONTROL-CHARS'
#     # Colorized less, woohoo
#     export LESS_TERMCAP_mb=$'\E[01;31m'
#     export LESS_TERMCAP_md=$'\E[01;31m'
#     export LESS_TERMCAP_me=$'\E[0m'
#     export LESS_TERMCAP_se=$'\E[0m'
#     export LESS_TERMCAP_so=$'\E[01;44;33m'
#     export LESS_TERMCAP_ue=$'\E[0m'
#     export LESS_TERMCAP_us=$'\E[01;32m'
# elif have most; then
#     export PAGER='most'
# else
#     export PAGER='more'
# fi




#
# Run a command x times
# http://www.stefanoforenza.com/how-to-repeat-a-shell-command-n-times/
#
runx() {
    n=$1
    shift
    while [ $(( n -= 1 )) -ge 0 ]
    do
        "$@"
    done
}

# ask() -- ask user a yes/no question
function ask()
{
    echo -n "$@" '[y/N] ' ; read ans
    case "$ans" in
        y*|Y*) return 0 ;;
        *) return 1 ;;
    esac
}


# vim: set filetype=sh:
alias cue2flac="find -type f -name '*.cue' -execdir cue2tracks -R -n 19 -o '%N. %p ─ %t' {} \;"


# Git Shortcuts! ##
# alias g="git"
# alias gr="git rm -rf"
# alias gs="git status"
# alias ga="g add"
# alias gc="git commit -m"
# alias gp="git push origin master"
# alias gl="git pull origin master"

# load rbenv if available
if command -v rbenv >/dev/null; then
  eval "$(rbenv init - --no-rehash)"
fi
# https://github.com/nicknisi/dotfiles/blob/master/zsh/functions.zsh
# print available colors and their numbers
function colours() {
    for i in {0..255}; do
        printf "\x1b[38;5;${i}m colour${i}"
        if (( $i % 5 == 0 )); then
            printf "\n"
        else
            printf "\t"
        fi
    done
}


# Escape UTF-8 characters into their 3-byte format
function escape() {
    printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
    echo # newline
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
    perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
    echo # newline
}




function extract {
 if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
 else
    if [ -f "$1" ] ; then
        NAME=${1%.*}
        #mkdir $NAME && cd $NAME
        case "$1" in
          *.tar.bz2)   tar xvjf ./"$1"    ;;
          *.tar.gz)    tar xvzf ./"$1"    ;;
          *.tar.xz)    tar xvJf ./"$1"    ;;
          *.lzma)      unlzma ./"$1"      ;;
          *.bz2)       bunzip2 ./"$1"     ;;
          *.rar)       unrar x -ad ./"$1" ;;
          *.gz)        gunzip ./"$1"      ;;
          *.tar)       tar xvf ./"$1"     ;;
          *.tbz2)      tar xvjf ./"$1"    ;;
          *.tgz)       tar xvzf ./"$1"    ;;
          *.zip)       unzip ./"$1"       ;;
          *.Z)         uncompress ./"$1"  ;;
          *.7z)        7z x ./"$1"        ;;
          *.xz)        unxz ./"$1"        ;;
          *.exe)       cabextract ./"$1"  ;;
          *)           echo "extract: '$1' - unknown archive method" ;;
        esac
    else
        echo "'$1' - file does not exist"
    fi
fi
}




function thumbify() {
    if [ -f $1 ]; then
        cp $1 thumb-$1
        if [ $2 ]; then
            mogrify -resize $2 thumb-$1
        else
            mogrify -resize 250x250 thumb-$1
        fi
    else
        echo "$1: not a regular file"
    fi
}


alias cadate='TZ=America/Los_Angeles date'
alias frdate='TZ=Europe/Paris date'
alias ozdate='TZ=Australia/Brisbane date'

alias myip='wget -qO- http://ipecho.net/plain ; echo'

# no line wrapping in less
export LESS=$LESS" -S"




# Shortcut to get the disk size of a directory and contents
sizeof() {
    du -ch "$1" | grep total
}

# Shortcut to change directory and list contents
cdls() {
    if [ -d "$1" ]; then
        cd "$1"
        ls
    else
        echo "bash: cl: '$1': Directory not found"
    fi
}



# super stealth background launch
function daemon
{
    (exec "$@" >&/dev/null &)
}

  # Do something and receive a desktop alert when it completes `sudo apt-get install something | alert`
  alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'


  # Search for files and page it
  function search() { find . -iname "*$@*" | less; }
    # nohup "$@" > /dev/null 2>&1 < /dev/null &


            # *.dmg)      hdiutil mount $1                    ;;





function lsofg()
{
    if [ $# -lt 1 ] || [ $# -gt 1 ]; then
        echo "grep lsof"
        echo "usage: losfg [port/program/whatever]"
    else
        lsof | grep -i $1 | less
    fi
}



function psg()
{
    if [ $# -lt 1 ] || [ $# -gt 1 ]; then
        echo "grep running processes"
        echo "usage: psg [process]"
    else
        ps aux | grep USER | grep -v grep
        ps aux | grep -i $1 | grep -v grep
    fi
}

###### convert binaries
# copyright 2007 - 2010 Christopher Bratusek
function bin2all() {
	if [[ $1 ]]; then
		echo "binary $1 = octal $(bin2oct $1)"
		echo "binary $1 = decimal $(bin2dec $1)"
		echo "binary $1 = hexadecimal $(bin2hex $1)"
		echo "binary $1 = base32 $(bin2b32 $1)"
		echo "binary $1 = base64 $(bin2b64 $1)"
		echo "binary $1 = ascii $(bin2asc $1)"
	fi
}

###### DVD to ISO
function dvd2iso()
{
# to get desired device
df -h -x tmpfs -x usbfs
echo -n "Using the information in the terminal window, please enter the appropriate DVD drive:
"
read DVDDEVICE
echo -n "Please enter a name for the ISO file you will create:
"
read XVIDNAME
pv "$DVDDEVICE" | dd of="$XVIDNAME".iso
}

###### DVD to VOB
# requires vobcopy: sudo apt-get install vobcopy
# alias dvd2vob='vobcopy -i /dev/dvd -o ~/ -l'

function daemon()
{
    (exec "$@" >&/dev/null &)
}

function geniso() {
	# copyright 2007 - 2010 Christopher Bratusek
	if [[ $CD_WRITER ]]; then
		dd $DD_OPTS if=$CD_WRITER of="$1"
	else	dd $DD_OPTS if=/dev/dvdrw of="$1"
	fi
}

function lowercase()
{
    for file ; do
        filename=${file##*/}
        case "$filename" in
        */*) dirname==${file%/*} ;;
        *) dirname=.;;
        esac
        nf=$(echo $filename | tr A-Z a-z)
        newname="${dirname}/${nf}"
        if [ "$nf" != "$filename" ]; then
            mv "$file" "$newname"
            echo "lowercase: $file --> $newname"
        else
            echo "lowercase: $file not changed."
        fi
    done
}


# function rip() {
# handbrake -i /dev/dvd -o ${HOME}/${1}.mp4 -L -U -F -f mp4 -e x264 -b 4000 -B 192
# }

##################################################
# Slow down CPU and IO for process and its 	 #
# offsprings					 #
##################################################

###### requires gawk: sudo apt-get install gawk
function slow2() { ionice -c3 renice -n 20 $(pstree `pidof $1` -p -a -u -A|gawk 'BEGIN{FS=","}{print $2}'|cut -f1 -d " ") ; }




##################################################
# ISO-writer					 #
##################################################

function writeiso() {
	# copyright 2007 - 2010 Christopher Bratusek
	if [[ $CD_WRITER ]]; then
		cdrecord dev=$CD_WRITER "$1"
	else	cdrecord deV=/dev/dvdrw "$1"
	fi
}

alias cdcopy='pv /dev/cdrom | dd of=cd.iso'						# to backup a cd from a cdrom drive to an ISO

alias diskcopy='pv /dev/dvd | dd of=disk.iso'						# to backup the disc (cd/dvd/whatever) to an ISO
alias floppycopy='pv /dev/fd0 | dd of=floppy.image'					# to duplicate a floppy disk to hard drive image file
alias partitioncopy='sudo pv /dev/sda1 | dd of=/dev/sda2 bs=4096 conv=notrunc,noerror'	# to duplicate one hard disk partition to another
alias restore-sda='sudo pv /dev/hda | dd of=/dev/sda bs=64k conv=notrunc,noerror'	# to restore from ??? to the existing drive
alias scsicopy='sudo pv /dev/scd0 | dd of=cd.iso'					# if cdrom is scsi}

alias extundelete-d='sudo extundelete "$1" --restore-directory "$2"'		# restore all files possible from specified dir.  ("$2" = path/to/directory)
alias extundelete-f='sudo extundelete "$1" --restore-files "$2"'		# restore list of files (use to restore single file) ("$2" = filename)
alias extundelete-r='sudo extundelete "$1" --restore-all'			# restore all files possible to undelete
alias blankcd='cdrecord -v dev=/dev/cdrom blank=fast gracetime=3'
alias blankdvd='cdrecord -v dev=/dev/dvd blank=fast gracetime=3'
alias rdp='rdesktop -u "$USER" -g 1600x1200 -D -r disk:home=/home -r clipboard:PRIMARYCLIPBOARD'	# quick full screen RDP connection

##################################################
# Remastersys stuff				 #
##################################################

alias remastersys-backup-custom='sudo remastersys backup custom.iso'	# to make a livecd/dvd backup and call the iso custom.iso
alias remastersys-backup='sudo remastersys backup'			# to make a livecd/dvd backup of your system
alias remastersys-clean='sudo remastersys clean'			# to clean up temporary files of remastersys
alias remastersys-dist-cdfs='sudo remastersys dist cdfs'		# to make a distributable livecd/dvd filesystem only
alias remastersys-dist-custom='sudo remastersys dist iso custom.iso'	# to make a distributable iso named custom.iso but only if cdfs is present
alias remastersys-dist='sudo remastersys dist'				# to make a distributable livecd/dvd of your system


# Kill all the tabs in Chrome to free up memory
# [C] explained: http://www.commandlinefu.com/commands/view/402/exclude-grep-from-your-grepped-output-of-ps-alias-included-in-description
alias chromekill="ps ux | grep '[C]hrome Helper --type=renderer' | grep -v extension-process | tr -s ' ' | cut -d ' ' -f2 | xargs kill"



mountiso() { mkdir -p "$HOME"/.gvfs/"${1%.*}" && gvfs-mount "$1" "$HOME"/.gvfs/"${1%.*}" ;}

resize_images() {
	if [ $# -lt 1 ]; then
		echo -e "Usage: $0 <file_name>"
		echo -e "\nsingle:   $0 file.m4a"
		echo -e "\nmultiple: $0 file1.m4a file2.m4a file3.m4a"
		echo -e "\nwildcard: $0 *"
		echo -e "\nwildcard: $0 *.jpg"
		return 1
	fi

	myArray=( "${@:2}" )
	for arg in "${myArray[@]}"; do
	convert "$arg" -monitor -resize "$1" "${arg%.*}""$1"_resized."${arg##*.}"
	done
}
# If piping something in, copy it.
# If just doing `clip`, paste it.
function clip { [ -t 0 ] && pbpaste || pbcopy;}


sbg(){
  ("$@" & disown ) >/dev/null 2>&1 </dev/null
  which "$1" >/dev/null 2>&1
}

alias netlisten='lsof -i -P | grep LISTEN'   #listening ports
#internetinfo | Usage: ii
function ii()   # get current host related info
{
    echo -e "\n${RED}Kernel Information:$NC " ; uname -a
    echo -e "\n${RED}Users logged on:$NC " ; w -h
    echo -e "\n${RED}Current date :$NC " ; date
    echo -e "\n${RED}Machine stats :$NC " ; uptime
    echo -e "\n${RED}Memory stats :$NC " ; free
    echo -e "\n${RED}Disk Usage :$NC " ; df -Th
    echo -e "\n${RED}LAN Information :$NC" ; netinfoLAN
    echo
}

dd_clone() {
	if [ $# -lt 2 ]; then
		echo -e "image or clone <image|drive|parition> including free space and verify data"
		echo -e "\nUsage: $0 <input> <output>"
		echo -e "\nExample: $0 /dev/sdX /tmp/output.dd"
		echo -e "\n$0 /dev/sdX /dev/sdY"
		echo -e "\n$0 /tmp/output.img /dev/sdX"
		echo -e "\n$0 /dev/cdrom /tmp/output.iso"
		echo -e "\nList All Drives: sudo fdisk -l"
		echo -e "\nRequirement: pv dcfldd"
		return 1
	fi

	sudo sh -c "
		# clone
		pv -tpreb "$1" | dcfldd of="$2" bs=4M
		# verify data match or mismatch
		dcfldd if="$1" vf="$2"
	"
}

verify_md5sum() { pv "$1" | md5sum ;}



m-disconnect() { nmcli d disconnect enp5s0 ;}
m-connect() { nmcli d connect enp5s0 ;}


lynx-mp3() { lynx -dump "$1" | awk '/http/ && /mp3/ {print $2}' ;}

# nap() {
# 	~/.bin/nap-1.5.4.linux-amd64/nap \
# 	-r \
# 	-s share-it.loginto.me:3456 \
# 	-s 108.19.45.179:7777 \
# 	-s 108.19.45.179:8888 \
# 	-s spica.sytes.net:8888 \
# 	-s 84.24.69.59:6436 \
# 	-s 98.202.75.0:8877 \
# 	-s 87.13.117.33:8888 \
# 	-s 79.103.107.173:5995 \
# 	-s 79.31.239.174:8888 \
#         -s 95.248.174.8:8888 \
#         -s 82.53.30.153:3456 \
#         -s 80.181.212.54:8888 \
# 	"$@"
# }

nap() {	~/.bin/nap-1.5.4.linux-amd64/nap $@ ;}


# http://twit.altervista.org/linux-2/how-to-copy-an-entire-commandline-using-just-the-keyboard.html
# alias copylastcommand='echo "!!" | xclip -selection clipboard'
# alias copylastcommand='history -p !! | xsel -ib'
# alias copylastcommand='$(history -p !-1) | xsel -ib'

color_term() {
    for i in {0..255} ; do
        printf "\x1b[38;5;${i}mcolour${i}\n"
    done
}



mpv-transparent() {
    # prerequisite:
    #   1. enable compositor
    #   2. create devilspie for mpv (window_class, opacity, stick)

    # start devilspie
    # nohup 'devilspie' >/dev/null 2>&1&
    (devilspie) &

    # kill devilspie (after devilspie starts, it still works even if you kill the process)
    (sleep 5 && killall devilspie) &

    # start mpv bottom right corner
    mpv --ontop --no-border --on-all-workspaces --autofit=640x360 --geometry=99%:99% "$@"

    # start mpv bottom left corner
    # mpv --ontop --no-border --on-all-workspaces --autofit=640x360 --geometry=1%:99% "$@"

    # start mpv top right corner
    # mpv --ontop --no-border --on-all-workspaces --autofit=640x360 --geometry=99%:1% "$@"

    # start mpv top left corner
    # mpv --ontop --no-border --on-all-workspaces --autofit=640x360 --geometry=1%:1% "$@"

}


wxfce() {
    # for xfce =>4.12
    # monitor1
    xfconf-query -c xfce4-desktop -p /backdrop/screen0/monitor0/workspace0/last-image -s "$(find ~/Pictures/Wallpapers -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | sort -R | head -1)"

    # monitor2
    xfconf-query -c xfce4-desktop -p /backdrop/screen0/monitor1/workspace0/last-image -s "$(find ~/Pictures/Wallpapers -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | sort -R | head -1)"
}

mpv-secondmonitor() {
  title_name="$(wmctrl -pl | grep $(pidof mpv) | cut -d'-' -f2-)"
  (sleep 5 && wmctrl -r "$title_name" -e 0,1920,0,1920,1080 && wmctrl -r "$title_name" -b toggle,fullscreen) &
  mpv "$@"
}



#-------- Video Thumbnail Gallery {{{
#------------------------------------------------------

vcsi-width-3x5() {
	vcsi "$2" -t -w "$1" --background-color 000000 --metadata-font-color ffffff -g 3x5 --end-delay-percent 20
}
convert2image_jpg() {
    if [ $# -lt 1 ]
    then
        echo -e "convert images to jpg"
        echo -e "\nUsage:\n$0 <picture>"
        echo -e "\nexample:\n$0 pic1.png pic2.bmp pic3.png"
        echo -e "\n$0 *.png"

        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        convert -quality 50% "$arg" "${arg%.*}.jpg"
    done
}

vcsi-1280-3x4() {
    if [ $# -lt 1 ]
    then
        echo -e "vcsi"
        echo -e "\nUsage:\n$0 <picture>"
        echo -e "\nexample:\n$0 pic1.png pic2.png pic3.png"
        echo -e "\n$0 *.jpg"

        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        vcsi "$arg" -t -w 1024 --background-color 000000 --metadata-font-color ffffff -g 2x5 --end-delay-percent 20
    done
}

vcsi-auto-3x5() {
	eval $(ffprobe -v error -of flat=s=_ -select_streams v:0 -show_entries stream=height,width "$1")
	get_width=${streams_stream_0_width}
	vcsi "$1" -t -w "$get_width" --background-color 000000 --metadata-font-color ffffff -g 3x5 --end-delay-percent 20
}

vsheet-tonight-single() {
    if [ $# -lt 1 ]
    then
        echo -e "generate video sheet and add it to calibre"
        echo -e "\nUsage:\n$0 video.mp4"

        return 1
    fi

        # get width of video file
	eval $(ffprobe -v error -of flat=s=_ -select_streams v:0 -show_entries stream=height,width "$1")
	get_width=${streams_stream_0_width}
        # generate video sheet
	vcsi "$1" -t -w "$get_width" --background-color 000000 --metadata-font-color ffffff -g 2x5 --end-delay-percent 20

        # convert to jpg
        concat_jpg "$1".png
        # reduce jpg file size
	image-resize-1920x1080 concatoutput.jpg
        # rename to cover.jpg
	mv concatoutput_1920x1080_resized.jpg cover.jpg

        # add to calibre
        AUTHORS=$(echo "$1" | awk -F'_' '{print $3}' | cut -d' ' -f1,2 )
        TITLENAME="$1"

        cmx-add $cbsuper -e -a "$AUTHORS" -t "$TITLENAME" -T "korn" -c "cover.jpg"

        # delete leftovers
        garbage "${1}.png"
        garbage concatoutput.jpg
        garbage cover.jpg

}

vsheet-tonight() {
    if [ $# -lt 1 ]
    then
        echo -e "generate video sheet and add it to calibre"
        echo -e "\nUsage:\n$0 video.mp4"

        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
      vsheet-tonight-single "$arg"
    done
}

vsheet-fam-single() {
    if [ $# -lt 1 ]
    then
        echo -e "generate video sheet and add it to calibre"
        echo -e "\nUsage:\n$0 video.mp4"

        return 1
    fi

        # get width of video file
	eval $(ffprobe -v error -of flat=s=_ -select_streams v:0 -show_entries stream=height,width "$1")
	get_width=${streams_stream_0_width}
        # generate video sheet
	vcsi "$1" -t -w "$get_width" --background-color 000000 --metadata-font-color ffffff -g 2x5 --end-delay-percent 20

        # convert to jpg
        concat_jpg "$1".png
        # reduce jpg file size
	image-resize-1920x1080 concatoutput.jpg
        # rename to cover.jpg
	mv concatoutput_1920x1080_resized.jpg cover.jpg

        # add to calibre
        AUTHORS=$(echo "$1" | awk -F'_full_hi_' '{print $1}' | cut -d_ -f2- | sed 's:_: :g' | sed -e "s/\b\(.\)/\u\1/g" | sed 's/[0-9]*//g')
        TITLENAME="$1"

        cmx-add $cbsuper -e -a "$AUTHORS" -t "$TITLENAME" -T "korn" -c "cover.jpg"

        # delete leftovers
        garbage "${1}.png"
        garbage concatoutput.jpg
        garbage cover.jpg

}

vsheet-fam() {
    if [ $# -lt 1 ]
    then
        echo -e "generate video sheet and add it to calibre"
        echo -e "\nUsage:\n$0 video.mp4"

        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
      vsheet-super "$arg"
    done
}

vsheet-mofos-single() {
    if [ $# -lt 1 ]
    then
        echo -e "generate video sheet and add it to calibre"
        echo -e "\nUsage:\n$0 video.mp4"

        return 1
    fi

        # get width of video file
	eval $(ffprobe -v error -of flat=s=_ -select_streams v:0 -show_entries stream=height,width "$1")
	get_width=${streams_stream_0_width}
        # generate video sheet
	vcsi "$1" -t -w "$get_width" --background-color 000000 --metadata-font-color ffffff -g 2x5 --end-delay-percent 20

        # convert to jpg
        concat_jpg "$1".png
        # reduce jpg file size
	image-resize-1920x1080 concatoutput.jpg
        # rename to cover.jpg
	mv concatoutput_1920x1080_resized.jpg cover.jpg

        # add to calibre
        AUTHORS=$( echo "$1" | awk -F_ '{print $2,$3}' | sed -e "s/\b\(.\)/\u\1/g" | sed 's/[0-9]*//g' )
        TITLENAME="$1"
        cmx-add $cbsuper -e -a "$AUTHORS" -t "$TITLENAME" -T "korn" -c "cover.jpg"

        # delete leftovers
        garbage "${1}.png"
        garbage concatoutput.jpg
        garbage cover.jpg

}

vsheet-mofos() {
    if [ $# -lt 1 ]
    then
        echo -e "generate video sheet and add it to calibre"
        echo -e "\nUsage:\n$0 video.mp4"

        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
      vsheet-mofos-single "$arg"
    done
}

vsheet-super() {
    if [ $# -lt 1 ]
    then
        echo -e "generate video sheet and add it to calibre"
        echo -e "\nUsage:\n$0 video.mp4"

        return 1
    fi

        # get width of video file
	eval $(ffprobe -v error -of flat=s=_ -select_streams v:0 -show_entries stream=height,width "$1")
	get_width=${streams_stream_0_width}
        # generate video sheet
	vcsi "$1" -t -w "$get_width" --background-color 000000 --metadata-font-color ffffff -g 2x5 --end-delay-percent 20

        # convert to jpg
        concat_jpg "$1".png
        # reduce jpg file size
	image-resize-1920x1080 concatoutput.jpg
        # rename to cover.jpg
	mv concatoutput_1920x1080_resized.jpg cover.jpg

        # add to calibre
        AUTHORS=$( echo "${1%.*}" | awk -F- '{print $1}')
        TITLENAME=$( echo "${1%.*}" | cut -d "-" -f2- )
        # cmx-add $cbsuper -e -a "$AUTHORS" -t "$arg" -T "korn,pov,amatuer" -c "${arg}.jpg"
        # cmx-add $cbsuper -e -t "${1%.*}" -T "korn" -c "cover.jpg"
        cmx-add $cbsuper -e -a "$AUTHORS" -t "$TITLENAME" -T "korn" -c "cover.jpg"

        # delete leftovers
        garbage "${1}.png"
        garbage concatoutput.jpg
        garbage cover.jpg

}


vsheet-arg() {
    if [ $# -lt 1 ]
    then
        echo -e "generate video sheet and add it to calibre"
        echo -e "\nUsage:\n$0 video.mp4"

        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
      vsheet-super "$arg"
    done
}

# http://productivefoss.blogspot.com.au/2015/05/exploring-notification-system-ii-how-to.html?m=1
# http://www.webupd8.org/2016/03/translate-any-text-you-select-on-your.html


publicpickups() {
    if [ $# -lt 1 ]
    then
        echo -e "resize pictures to another resolution"
        echo -e "\nUsage:\n$0 <picture>"
        echo -e "\nexample:\n$0 pic1.png pic2.png pic3.png"
        echo -e "\n$0 *.jpg"

        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        # AUTHORS=$( echo "$arg" | awk -F_ '{print $2 " " $3}' | sed -e "s/\b\(.\)/\u\1/g" )
        AUTHORS=$( echo "$arg" | awk -F_ '{print $2}' | sed -e "s/\b\(.\)/\u\1/g" )
        cmx-add $cbsuper -e -a "$AUTHORS" -t "$arg" -T "korn,pov,amatuer" -c "${arg}.jpg"
    done
}

# http://stackoverflow.com/a/30684898
rename2jpg() {
    for f in * ; do
      if [[ $(file -b --mime-type "$f") = image/jpeg ]] ; then
        mv "$f" "${f/%.*/.jpg}"
      fi
    done
}
# }}}


# http://www.tecmint.com/ffmpeg-commands-for-video-audio-and-image-conversion-in-linux/
yt2banneraudio() {
    if [ $# -lt 2 ]
    then
        echo -e "Use ffmpeg to create a banner audio (audio + image to video)"
        echo -e "\nUsage:\n$0 <image file> <audio file>"
        echo -e "\nExample:\n$0 cover.png file.mp3 \n"

        return 1
    fi
    ffmpeg -loop 1 -i "$1" -i "$2" -c:v libx264 -c:a aac -strict experimental -b:a 192k -shortest "${2%.*}".mp4
}

# convert video to gif animation
# http://superuser.com/a/730389
# http://superuser.com/a/841379
convert_to_gifv() {
    if [ $# -lt 1 ]
    then
        echo -e "convert video to animated gif"
        echo -e "\nUsage:\n$0 <file> <resolution>"
        echo -e "\nexample:\n$0 file.mkv \n"
        echo -e "$0 file.mkv 320\n"
        echo -e "$0 file.mkv 720\n"
        echo -e "$0 file.mkv 1080\n"
        echo -e "Note: animated gif size are usually x2 or x3 the size of the original video file"

        return 1
    fi

    # get video resolution (height)
    eval $(ffprobe -v error -of flat=s=_ -select_streams v:0 -show_entries stream=height,width "$1")
    size=${streams_stream_0_height}

    ffmpeg -i "$1" -vf scale="${2:-$size}":-1 -r 10 -f image2pipe -vcodec ppm - | convert -delay 5 -loop 0 - "${1%.*}"-gifvid"$2".gif
}


imguralbum_cbz() {
	# usage: imguralbum [link] [filename]

	local IMGUR_SAVE_PATH=/tmp

	# make a temp folder
	# mkdir -p "$IMGUR_SAVE_PATH"/"$2"

	#download album
	imguralbum.py "$1" "$IMGUR_SAVE_PATH"/"$2"

	#create zip archive using .cbz extension for comics
	zip -r "${2%/}.cbz" "$IMGUR_SAVE_PATH"/"$2"

	#delete temp folder
	rm -rf "$IMGUR_SAVE_PATH"/"$2"
}



testz()
{
  echo -n "${Red}Here be dragons. Continue?"
  read REPLY

  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    echo "You asked for it..."
  else
    return 1
  fi

  echo "FORMATED"
}


cbrit() { rar a -r "${1%/}.cbr" "$1" ;}
cbzit() { zip -r "${1%/}.cbz" "$1" ;}

#Compression (cd into dir, will compress every single folder)
alias tardir='for i in *; do if [ -d "$i" ]; then tar czf "$i".tar.gz  "$i"; fi; done'
alias rardir='find * -maxdepth 0 -type d -exec rar a {}.rar {} \;'
alias zipdir='find * -maxdepth 0 -type d -exec zip -r {}.zip {} \;'
	#Warning: removes dir after compression (below)
alias rarkill='find * -maxdepth 0 -type d -exec rar a -df {}.rar {} \;'
#http://www.commandlinefu.com/commands/view/5198
# $ ls | while read filename; do tar -czvf "$filename".tar.gz "$filename"; rm "$filename"; done
# compress folder into cbr/cbz



atool-delete() {
	local zipfilename="$1"
	local deletefile="$(atool -l "$zipfilename" | tail -n +4 | head -n -2 | cut -d':' -f2 | cut -d' ' -f4- | sed 's/\ /\\ /g' | sed -n "${2}p")"

	zip -d "$zipfilename" "$deletefile"


	}

atool-zip-delete() { zip -d "$@" \*.txt ;}

lltag-artist() { lltag --yes -a "$1" "$2" ;}
lltag-album() { lltag --yes -A "$1" "$2" ;}
lltag-date() { lltag --yes -d "$1" "$2" ;}
lltag-genre() { lltag --yes -g "$1" "$2" ;}
lltag-comment() { lltag --yes -c "$1" "$2" ;}
lltag-number() { lltag --yes -n "$1" "$2" ;}
lltag-show() { lltag -S "$1" ;}
lltag-rename() { lltag --yes --rename '%n - %t' "$1" ;}


#Mp3 id3 tagger

# #-------- Convert to Archive (ZIP, RAR, TAR, CBR, CBZ) {{{
# #------------------------------------------------------
#
# # to see required install for different formats
# # $ patool formats
# convert2archive-7z() { patool repack "$1" "${1%.*}".7z ;}
# convert2archive-ace() { patool repack "$1" "${1%.*}".ace ;}
# convert2archive-jar() { patool repack "$1" "${1%.*}".jar ;}
# convert2archive-rar() { patool repack "$1" "${1%.*}".rar ;}
# convert2archive-tar() { patool repack "$1" "${1%.*}".tar ;}
# convert2archive-xz() { patool repack "$1" "${1%.*}".xz ;}
# convert2archive-zip() { patool repack "$1" "${1%.*}".zip ;}
# convert2archive-targz() { patool repack "$1" "${1%.*}".tar.gz ;}
# convert2archive-tarbz2() { patool repack "$1" "${1%.*}".tar.bz2 ;}
# convert2archive-tarlzma() { patool repack "$1" "${1%.*}".tar.lzma ;}
#
# archive-create-zip() { patool --verbose create myarchive.zip "$@" ;}
# archive-create-tar() { patool --verbose create myarchive.tar "$@" ;}
# archive-create-targz() { patool --verbose create myarchive.tar.gz "$@" ;}
# archive-create-7z() { patool --verbose create myarchive.7z "$@" ;}


# # https://en.wikipedia.org/wiki/Comic_book_archive
# convert2archive-cbz() {
#     if [ $# -lt 1 ]; then
#         echo -e "Usage: $0 <file_name>"
#         echo -e "\nsingle:   $0 file.gz"
#         echo -e "\nmultiple: $0 file1.gz file2.gz file3.gz"
#         echo -e "\nwildcard: $0 *.gz"
#     return 1
#     fi
#
#     myArray=( "$@" )
#     for arg in "${myArray[@]}"; do
#         if [[ ! -f "${arg%.*}".zip && ! -f "${arg%.*}".cbz ]]; then
#             patool repack "$arg" "${arg%.*}".zip && mv "${arg%.*}".zip "${arg%.*}".cbz
#         else
#             if [[ -f "${arg%.*}".zip ]]; then
#             mv -v -- "${arg%.*}".zip "${arg%.*}".cbz
#             fi
#         fi
#     done
# }
#
# convert2archive-cb7() {
#     if [ $# -lt 1 ]; then
#         echo -e "Usage: $0 <file_name>"
#         echo -e "\nsingle:   $0 file.gz"
#         echo -e "\nmultiple: $0 file1.gz file2.gz file3.gz"
#         echo -e "\nwildcard: $0 *.gz"
#     return 1
#     fi
#
#     myArray=( "$@" )
#     for arg in "${myArray[@]}"; do
#         if [[ ! -f "${arg%.*}".7z && ! -f "${arg%.*}".cb7 ]]; then
#             patool repack "$arg" "${arg%.*}".7z && mv "${arg%.*}".7z "${arg%.*}".cb7
#         else
#             if [[ -f "${arg%.*}".7z ]]; then
#             mv -v -- "${arg%.*}".7z "${arg%.*}".cb7
#             fi
#         fi
#     done
# }
# convert2archive-cba() {
#     if [ $# -lt 1 ]; then
#         echo -e "Usage: $0 <file_name>"
#         echo -e "\nsingle:   $0 file.gz"
#         echo -e "\nmultiple: $0 file1.gz file2.gz file3.gz"
#         echo -e "\nwildcard: $0 *.gz"
#     return 1
#     fi
#
#     myArray=( "$@" )
#     for arg in "${myArray[@]}"; do
#         if [[ ! -f "${arg%.*}".ace && ! -f "${arg%.*}".cba ]]; then
#             patool repack "$arg" "${arg%.*}".ace && mv "${arg%.*}".ace "${arg%.*}".cba
#         else
#             if [[ -f "${arg%.*}".ace ]]; then
#             mv -v -- "${arg%.*}".ace "${arg%.*}".cba
#             fi
#         fi
#     done
# }
# convert2archive-cbt() {
#     if [ $# -lt 1 ]; then
#         echo -e "Usage: $0 <file_name>"
#         echo -e "\nsingle:   $0 file.gz"
#         echo -e "\nmultiple: $0 file1.gz file2.gz file3.gz"
#         echo -e "\nwildcard: $0 *.gz"
#     return 1
#     fi
#
#     myArray=( "$@" )
#     for arg in "${myArray[@]}"; do
#         if [[ ! -f "${arg%.*}".tar && ! -f "${arg%.*}".cbt ]]; then
#             patool repack "$arg" "${arg%.*}".tar && mv "${arg%.*}".tar "${arg%.*}".cbt
#         else
#             if [[ -f "${arg%.*}".tar ]]; then
#             mv -v -- "${arg%.*}".tar "${arg%.*}".cbt
#             fi
#         fi
#     done
# }
# convert2archive-cbr() {
#     if [ $# -lt 1 ]; then
#         echo -e "Usage: $0 <file_name>"
#         echo -e "\nsingle:   $0 file.gz"
#         echo -e "\nmultiple: $0 file1.gz file2.gz file3.gz"
#         echo -e "\nwildcard: $0 *.gz"
#     return 1
#     fi
#
#     myArray=( "$@" )
#     for arg in "${myArray[@]}"; do
#         if [[ ! -f "${arg%.*}".rar && ! -f "${arg%.*}".cbr ]]; then
#             patool repack "$arg" "${arg%.*}".rar && mv "${arg%.*}".rar "${arg%.*}".cbr
#         else
#             if [[ -f "${arg%.*}".rar ]]; then
#             mv -v -- "${arg%.*}".rar "${arg%.*}".cbr
#             fi
#         fi
#     done
# }
#
# # }}}

#-------- i3 / Openbox {{{
#------------------------------------------------------
# wallpaper path


setwallpaper() {
ConnectedMonitor="$(xrandr | awk '/ connected/ {print $1}' | head -n 1)"
PATH_WALLPAPER=~/Pictures/Wallpapers

	# find current running windows manager
	CURRENT_WM="$(wmctrl -m | grep "Name:" | awk '{print $2}')"

	# mate
	if [ $CURRENT_WM = Marco ]; then
	gsettings set org.mate.background picture-filename "$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
	fi

	# xfce
	# tutorial video: http://www.youtube.com/watch?v=tL9uVT8D6k4
	if [[ $DESKTOP_SESSION = Xfwm4 ]] || [[ $DESKTOP_SESSION = "Xfce Session" ]]; then
	xfconf-query -c xfce4-desktop -p /backdrop/screen0/monitor"$ConnectedMonitor"/workspace0/last-image -s "$PWD"/"$1"
	fi

	# i3
	if [ $DESKTOP_SESSION = i3 ]; then
	# feh --randomize --bg-fill "$PATH_WALLPAPER"/*
	feh --randomize --bg-fill "$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
	fi

	# gnome shell
	# tutorial video: http://www.youtube.com/watch?v=B_VnPXy3VCw
	if [ $DESKTOP_SESSION = GNOME ]; then
	gsettings set org.gnome.desktop.background picture-uri file://"$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
	fi


	# gnome2
	if [ $DESKTOP_SESSION = GNOME ]; then
	gconftool-2 -t str -s /desktop/gnome/background/picture_filename "$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
	fi

	# lxde
	# tutorial video: http://www.youtube.com/watch?v=5xzfBiHuknk
	if [ $DESKTOP_SESSION = LXDE ]; then
	pcmanfm -w "$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
	fi
	}


chwallpaper() {
ConnectedMonitor="$(xrandr | awk '/ connected/ {print $1}' | head -n 1)"
PATH_WALLPAPER=~/Pictures/Wallpapers

	# find current running windows manager
	CURRENT_WM="$(wmctrl -m | grep "Name:" | awk '{print $2}')"

	# mate
	if [ $CURRENT_WM = Marco ]; then
	gsettings set org.mate.background picture-filename "$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
	fi

	# xfce
	# tutorial video: http://www.youtube.com/watch?v=tL9uVT8D6k4
	if [[ $DESKTOP_SESSION = Xfwm4 ]] || [[ $DESKTOP_SESSION = "Xfce Session" ]]; then
	xfconf-query -c xfce4-desktop -p /backdrop/screen0/monitor"$ConnectedMonitor"/workspace0/last-image -s "$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
	fi

	# i3
	if [ $DESKTOP_SESSION = i3 ]; then
	# feh --randomize --bg-fill "$PATH_WALLPAPER"/*
	feh --randomize --bg-fill "$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
	fi

	# gnome shell
	# tutorial video: http://www.youtube.com/watch?v=B_VnPXy3VCw
	if [ $DESKTOP_SESSION = GNOME ]; then
	gsettings set org.gnome.desktop.background picture-uri file://"$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
	fi


	# gnome2
	if [ $DESKTOP_SESSION = GNOME ]; then
	gconftool-2 -t str -s /desktop/gnome/background/picture_filename "$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
	fi

	# lxde
	# tutorial video: http://www.youtube.com/watch?v=5xzfBiHuknk
	if [ $DESKTOP_SESSION = LXDE ]; then
	pcmanfm -w "$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
	fi
	}


#}}}
#-------- Spell Checking / Translation Related {{{
#------------------------------------------------------
# spell checking
# tutorial video: http://www.youtube.com/watch?v=UEwz5eeaZzc
check-word() { echo "$1" | aspell -a ;}
check-list() { cat "$1" | aspell list ;}
check-file() { aspell check "$1" ;}

#}}}
#-------- Mount RAW IMAGE (DD|Clonezilla) {{{
#------------------------------------------------------
#
# mount raw image like dd
# http://askubuntu.com/a/352686

# sudo kpartx -av disk_image.raw
#   output: add map loop0p1 (252:2): 0 3082240 linear /dev/loop0 2048
# sudo mount /dev/mapper/loop0p2 /tmp/mydisk
#
# # unmount raw image
# sudo umount /tmp/mydisk
# sudo kpartx -d disk_image.raw
unmount-raw() {
    if [ $# -lt 1 ]
    then
        echo -e "mount ISO filesystem images (iso,nrg,bin,mdf,img)"
        echo -e "\nUsage:\n$0 <disc_image>"
        echo -e "\nexample:\n$0 disc_image.iso"
        echo -e "$0 disc_image.iso disc_image2.bin disc_image3.mdf"
        echo -e "$0 *.iso"
        return 1
    fi

    # map block device
    myArray=$(sudo kpartx -d "$1" | awk '/loop0/ {print $3}')

    # myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        mkdir -p /tmp/"$arg"
        sudo mount /dev/mapper/"$arg" /tmp/"$arg"
    done


    # if mount was sucessful then cd and ls the mountpoint
    # if [ $? -eq 0 ]; then
	# cd "/tmp/$1" && ls
    # else
    #     return 1
    # fi

}
mount-raw() {
    if [ $# -lt 1 ]
    then
        echo -e "mount ISO filesystem images (iso,nrg,bin,mdf,img)"
        echo -e "\nUsage:\n$0 <disc_image>"
        echo -e "\nexample:\n$0 disc_image.iso"
        echo -e "$0 disc_image.iso disc_image2.bin disc_image3.mdf"
        echo -e "$0 *.iso"
        return 1
    fi

    # map block device
    myArray=$(sudo kpartx -av "$1" | awk '/loop0/ {print $3}')

    # myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        mkdir -p /tmp/"$arg"
        sudo mount /dev/mapper/"$arg" /tmp/"$arg"
    done


    # if mount was sucessful then cd and ls the mountpoint
    # if [ $? -eq 0 ]; then
	# cd "/tmp/$1" && ls
    # else
    #     return 1
    # fi

}

# }}}
#-------- nq - Job Queue Utility {{{
#------------------------------------------------------
# DEMO: 
# DESC: unix command line queue utility
# LINK: https://github.com/chneukirchen/nq

# set default tempfiles queue location
alias nq='NQDIR=/tmp nq'
alias fq='NQDIR=/tmp fq'
alias tq='NQDIR=/tmp tq'
alias nq-clear="find /tmp -maxdepth 1 -type f -iname ',*' | xargs rm"

# }}}
#-------- Task Spooler (Queue Jobs) {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# REFF: http://askubuntu.com/a/18210
# LINK: http://quvi.sourceforge.net/
alias tss='TS_SOCKET=/tmp/tlm-stuff tsp'

# }}}
#-------- Mount Disc Images (ISO|NRG|BIN|MDF|IMG) {{{
#------------------------------------------------------


mount-img() {
  if [ $# -lt 1 ]; then
    echo -e "mount image to access files"
    echo -e "\nUsage: $0 <img_file>"
    echo -e "\nExample: $0 foo.img"
    return 1
  fi

    mkdir -p /tmp/"$2"    
    sudo cryptsetup luksOpen /dev/"$2" "$labelname"
    sudo mount /dev/mapper/"$labelname" /tmp/"$2"

  # if mount was sucessful then cd and ls the mountpoint
  if [ $? -eq 0 ]; then
    cd "/tmp/$1" && ls
  else
    return 1
  fi
}

unmount-img() {
  if [ $# -lt 1 ]; then
    echo -e "unmount image"
    echo -e "\nUsage: $0 <img_file>"
    echo -e "\nExample: $0 foo.img"
    return 1
  fi

  sudo umount "/tmp/$1"
  rmdir "/tmp/$1"
}

# }}}
#-------- Mount Archive (ISO|ZIP|RAR|TAR) {{{
#------------------------------------------------------
# http://ubuntuforums.org/showthread.php?t=1207096
mount-archive() {
  if [ $# -lt 1 ]
  then
    echo -e "mount archive files (iso|zip|rar|tar...etc)"
    echo -e "\nUsage:\n$0 <archive>"
    echo -e "\nExample:\n$0 file.zip"
    echo -e "$0 *.zip"
    return 1
  fi

  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    gvfs-mount "archive://$( ( echo -n 'file://' ; readlink -f $arg ; ) | perl -MURI::Escape -lne 'print uri_escape($_)')"
  done

  # if mount was sucessful then cd into gvfs dir and ls the mountpoint
  if [ $? -eq 0 ]; then
    cd "/run/user/$(id -u)/gvfs" && ls
  else
    return 1
  fi
}

unmount-archive() {
  if [ $# -lt 1 ]
  then
    echo -e "unmount archive files (iso|zip|rar|tar)"
    echo -e "\nUsage:\n$0 <mount_point>"
    echo -e "\nExample:\n$0 archive:host=file%253Afoo%bar.zip"
    echo -e "cd /run/user/${UID}/gvfs/ && $0 archive:host=file%253Afoo%bar.zip"
    return 1
  fi

  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    gvfs-mount -u "/run/user/$(id -u)/gvfs/$arg"
  done
}

# }}}

####################
##### OBSOLETE #####
####################
# Code that is still useful but I no longer use it, still here for references

#-------- Recordmydesktop CLI {{{
#------------------------------------------------------
# http://www.pclinuxos.com/forum/index.php/topic,97181.msg822796.html#msg822796
# Screen capture software
# Ctrl+C	Stop
# Ctrl+C x2	Cancle rendering
# BUG: RMD Adjusted recording window, which cuts 10 pixel from the height, thus we have to use offset -x -y
# https://wiki.archlinux.org/index.php/RecordMyDesktop
# http://sourceforge.net/p/recordmydesktop/discussion/590957/thread/cf788e96/
# https://groups.google.com/forum/#!topic/linux.debian.bugs.dist/reE8_9fqqAw
# native reso 1680x1050 -- > rmd reso 1080x1040, offset y axis -y 6
# SOUND LAG? lower the freq; 45000, 44100, 22050
# http://www.kkoncepts.net/blog/fixing-out-sync-audio-and-video-ffmpeg
RMD_OUTPUT=~/Public/screencast/rr_movie_baking.ogv

# Frequency; lower to fix sound lag; 45000, 44100, 22050
RMD_FREQ=22050

# Frames per second
RMD_FPS=30

# Channel (mono = 1 ; dual = 2)
RMD_CHANNELS=1

# SoundCard (pulse for pulseaudio; install pavucontrol to change pulse settings)
#            hw:0,1 for directly communicating with your soundcard
#            to get a list of sound device:
#            	arecord -l
#            	aplay -l
#            	cat /proc/asound/pcm
#            	alsamixer and hit F6
# FF_SOUNDCARD=pulse
# FF_SOUNDCARD=hw:0,1
RMD_SOUNDCARD=hw:3,0

rmd-all() { recordmydesktop --no-wm-check --no-frame --full-shots --fps $RMD_FPS --channels $RMD_CHANNELS --device $RMD_SOUNDCARD --freq $RMD_FREQ --overwrite -o $RMD_OUTPUT ;}

# Benq Monitor; 1680x1050 (make sure 2nd monitor is higher res)
# Initial recording window is set to:
# X:0   Y:0    Width:1680    Height:1050
# Adjusted recording window is set to:
# X:0   Y:0    Width:1680    Height:1056
rmd-benq() { recordmydesktop --no-wm-check --no-frame --full-shots --width 1680 --height 1050 --fps $RMD_FPS --channels $RMD_CHANNELS --device $RMD_SOUNDCARD --freq $RMD_FREQ --overwrite -o $RMD_OUTPUT ;}


# ProscanTV; 1920x1080 --> 1920x1072 ; X offset by 1680
# Initial recording window is set to:
# X:0   Y:0    Width:1920    Height:1080
# Adjusted recording window is set to:
# X:0   Y:4    Width:1920    Height:1072
rmd-proscantv() { recordmydesktop --no-wm-check --no-frame --full-shots -x 1680 --width 1920 --height 1072 --fps $RMD_FPS --channels $RMD_CHAN --device $RMD_DEV --freq $RMD_FREQ --overwrite -o $RMD_OUTPUT ;}

# Examples
# select window
# E1: (select window); recordmydesktop --no-frame --full-shots --fps 30 --channels 2 --freq 44100 --windowid $(xwininfo | awk '/Window id:/ {print $4}') --overwrite -o out.ogv ;}
# E2: recordmydesktop --no-wm-check --no-frame --width 1680 --height 1050 --fps 30 --channels 1 --device hw:3,0 --freq 44100 --overwrite -o out.ogv ;}
#E3: (fullscreen); recordmydesktop --no-frame --full-shots --fps 30 --channels 2 --freq 44100 --overwrite -o out.ogv ;}

#}}}
#-------- Air Comic Server # {{{
#------------------------------------------------------
# tutorial Video: http://www.youtube.com/watch?v=YceW_VcGA4A
# http://gnomewarrior32.blogspot.kr/2013/03/air-comic-server-english.html
ACSJar=~/.scripts/aircomic/AirComicServer.jar
ACSConf=~/.scripts/aircomic/AirComicServer.xml

cfg-aircomicserver() { $EDITOR $ACSConf ;}
aircomicserver() { nohup java -jar $ACSJar -c $ACSConf -n >/dev/null 2>&1& }
aircomicserver-lite() { nohup java -XX:+UseSerialGC -Xms32M -Xminf=5 -Xmaxf=10 -jar $ACSJar -c $ACSConf -n >/dev/null 2>&1& }
aircomicserver-gui() { nohup java -XX:+UseSerialGC -Xms32M -Xminf=5 -Xmaxf=10 -jar $ACSJar -c $ACSConf >/dev/null 2>&1& }
aircomicserver-quit() { kill $(ps -ef | grep '[A]irComicServer.jar' | awk '{print $2}') ;}
# }}}
#-------- Cherry Music Server # {{{
#------------------------------------------------------
# tutorial Video: https://www.youtube.com/watch?v=X2goFerMJDY

BIN_CHERRYMUSIC=~/.scripts/cherrymusic/cherrymusic
cherrymusic() { nohup python $BIN_CHERRYMUSIC --port 8442 >/dev/null 2>&1& }
cherrymusic-setup() { python $BIN_CHERRYMUSIC --setup --port 8442 ;}
cherrymusic-quit() { kill $(ps -ef | grep -i '[C]herrymusic' | awk '{print $2}') ;}
cfg-cherrymusic() { $EDITOR ~/.config/cherrymusic/cherrymusic.conf ;}

# }}}
#-------- Sharelin (Gnutella2 P2P Downloader) {{{
#------------------------------------------------------

# tutorial video: https://www.youtube.com/watch?v=Yi3JKyL-hxk
sharelin-daemon() { sharelin -d ;}
sharelin-quit() { killall sharelin ;}

# }}}
#-------- Aria2c WebUI {{{
#------------------------------------------------------
# downloader for torrents, magnet links, http, ftp, metalinks
# tutorial video: https://www.youtube.com/watch?v=LCr_0zFcbaM
alias magnet-to-torrent="aria2c -q --bt-metadata-only --bt-save-metadata"
aria2c-quit() {
   killall aria2c
   kill $(ps -ef | grep '[h]ttp.server' | awk '{print $2}')
   #kill $(ps -ef | grep '[S]impleHTTPServer' | awk '{print $2}')
}

aria2c-webui() {
    # download location
    DIR_DL=~/Downloads

    # run as daemon
    aria2c --enable-rpc --rpc-listen-all -D -d "$DIR_DL"


    # use python simplehttpserver to host the webui
    # this avoids download the index.html file on each computer
    # https://github.com/ziahamza/webui-aria2

    # path to the webui index.html
    DIR_WEBUI=~/.scripts/webui-aria2/

    # webui-aria2c uses port 6800 so we use 6801 for python_simple_http_server
    PORT=6801
    cd "$DIR_WEBUI"
    nohup python3 -m http.server "$PORT" >/dev/null 2>&1&

    # for older distro
    # nohup python2 -m SimpleHTTPServer "$PORT" >/dev/null 2>&1&

    echo "connect via http://localhost:$PORT or http://ip_address_of_server:$PORT"
}

# }}}
#-------- iPod 5G Device {{{
#------------------------------------------------------
# convert to ipod 5g compatible video format
# tutorial video: http://www.youtube.com/watch?v=gVVeR9KizBk

ipod5g() { HandBrakeCLI -i "$1" -o "${1%.*}.ipod5g.mp4" --preset="iPod" ;}
ipod5g-tsp() { tsp HandBrakeCLI -i "$1" -o "${1%.*}.ipod5g.mp4" --preset="iPod" ;}
ipod5g-rsync() {
# https://gist.github.com/nekobato/5998548
# including trailing slashes on $SRC
# rsync $SRC/Music/ $DEST/media/Ipod
rsync -avrm --delete-excluded --modify-window=2 --include '*/' --include '*.mp3' --exclude '*' "$1" "$2"
}

tsp-handbrake-normal() { tsp HandBrakeCLI -i "$1" -o "${1%.*}.normal.mp4" --preset="Normal" ;}
tsp-handbrake-high() { tsp HandBrakeCLI -i "$1" -o "${1%.*}.high.mp4" --preset="High Profile" ;}

# }}}

####################
##### QUEUE ########
####################
# Code that is working good but needs to be used for a while before including it to the next level up

#-------- FFMPEG X11GRAB Screencasting v2 (Mic + Speakers) {{{
#------------------------------------------------------
# DEMO: http://www.youtube.com/watch?v=mNz5Lrc06_s
# DESC: record desktop using ffmpeg (capture multiple source aka mic/speaker/others...etc)
# REFF: https://ask.fedoraproject.org/en/question/65662/recording-audio-from-mic-and-speakers-from-commandline/
#       https://www.youtube.com/watch?v=mEV2O8C272g (MrWhat record mic & speakers)
#       https://www.youtube.com/watch?v=Xbzh-T2kfJk (MrWhat keep audio synced)
#       https://www.youtube.com/watch?v=ynjFXmcpExE (MrWhat framedrop)

# list all audio sources
pa-sources() { pactl list sources | awk '/Source #/ ||/Name:/ || /Description:/ || /Sample Specification:/' ;}

# ffmpeg location
FFX_RECORDER=/usr/bin/ffmpeg
# FFX_RECORDER=~/Compile/ffmpeg/bin/ffmpeg

# speakers audio source (PC speakers or Headphones)
# note: using headphones since pc speakers will have audio feedback to mic
# FFX_SPEAKER="alsa_output.pci-0000_00_14.2.analog-stereo.monitor"
# FFX_SPEAKER_CH="2"
# FFX_SPEAKER_FREQ="44100"
FFX_SPEAKER="alsa_output.usb-NA_Lenovo_Wireless_Headset_W770-00.analog-stereo.monitor"
FFX_SPEAKER_CH="2"
FFX_SPEAKER_FREQ="32000"

# mic audio source
# note: when routed to pulseaudio the mic is very low
# so open pavucontrol > input device > [name of mic]
# then slide volume all the way to the right
# example: http://i.imgur.com/GFkifqB.png
FFX_MIC="alsa_input.usb-BLUE_MICROPHONES_Blue_Snowball-00.analog-mono"
FFX_MIC_CH="1"
FFX_MIC_FREQ="44100"

# sound system
FFX_SOUNDSYS="pulse"
# FFX_SOUNDSYS="alsa"

# resolution
FFX_RESO_FULL=$(xwininfo -root | grep 'geometry' |awk '{print $2;}' | cut -d\+ -f1)

# output location
FFX_OUTPUT_MOVIE=~/Public/screencast/mm_movie_baking.mkv
FFX_OUTPUT_VIDEO=~/Public/screencast/vv_video_baking.mkv
FFX_OUTPUT_AUDIO=~/Public/screencast/aa_audio_baking.mp3

ffxcast_fullscreen_movie() {
	$FFX_RECORDER \
	-f $FFX_SOUNDSYS -ac $FFX_SPEAKER_CH -ar $FFX_SPEAKER_FREQ -i $FFX_SPEAKER \
	-f $FFX_SOUNDSYS -ac $FFX_MIC_CH -ar $FFX_MIC_FREQ -i $FFX_MIC \
        -thread_queue_size 512 -f x11grab -r 30 -s $FFX_RESO_FULL -i :0.0 \
	-filter_complex "[0]asyncts[spkr],[1]asyncts[mic],[spkr][mic]amix=inputs=2" \
	-c:v libx264 -pix_fmt yuv420p -preset ultrafast -crf 0 \
	-c:a libmp3lame -ac 2 -ar 44100 -b:a 320k \
	-y $FFX_OUTPUT_MOVIE
}

# -vcodec libx264 -pix_fmt yuv444p -preset ultrafast -crf 0 \
# -acodec libmp3lame -ab 128k -ar 44100 -threads 0 -y $FF_OUTPUT_MOVIE

# ffmpeg \
# -f pulse -ac 2 -ar 44100 -i alsa_input.usb-BLUE_MICROPHONE_Blue_Snow­ball_201306-00-Snowball.analog-stereo \
# -f pulse -ac 2 -ar 44100 -i alsa_output.pci-0000_00_1b.0.analog-ster­eo.monitor \
# -f pulse -ac 2 -ar 44100 -i alsa_output.usb-Logitech_Inc_Logitech_US­B_Headset_H540_00000000-00-H540.iec958-s­tereo.monitor \
# -f x11grab -framerate 30 -video_size 1920x1080 -i :0 \
# -filter_complex \
# "[0]asyncts[m], \
# [1]asyncts[d], \
# [2]asyncts[h], \
# [m][d][h]amix=inputs=3" \
# -c:v libx264 -preset veryfast -crf 18 -pix_fmt yuv420p \
# -c:a libmp3lame -ac 2 -ar 44100 -b:a 320k \
# /home/b/Videos/AudioSync/AsyncTS_20150206.mkv

# different PRESET
# 1. -c:v libx264 -preset ultrafast -crf 18: Produced a 120.9 MB file at ~34-48% CPU load
# 2. -c:v libx264 -preset superfast -crf 18: Produced a 40.4 MB file at ~48-53% CPU load
# 3. -c:v libx264 -preset veryfast -crf 18: Produced a 26.1 MB file at ~62-78% CPU load

# different CRF
# 1. -c:v libx264 -preset ultrafast -crf 0 (Lossless): Produced a 471.7 MB file at ~32-50% CPU load
# 2. -c:v libx264 -preset ultrafast -crf 18: Produced a 120.9 MB file at ~34-48% CPU load
# 3. -c:v libx264 -preset ultrafast -crf 23: Produced a 67.1 MB file at ~32-45% CPU load
# 4. -c:v libx264 -preset ultrafast -crf 28: Produced a 31.1 MB file at ~30-40% CPU load

# image quality each setting produces (images are zoomed to in 285%)
# https://imgur.com/XF6t2Cv


# }}}
#-------- Alias Custom {{{
#------------------------------------------------------
# alias sudo='sudo -i'
# alias sudo='sudo '					# make aliases work with sudo
# alias ps="ps aux | grep -v grep | grep "
# alias ff="find . |grep "
# alias pp="ps aux |grep "
# alias oo="xdg-open "

# For emergencies
alias asdf='setxkbmap fr bepo'

alias xclipin='xclip -sel c -in <'
alias xclipout='xclip -sel c -out >'
alias psg='ps aux|grep -v grep|grep -i '
psgrep() { ps axuf | grep -v grep | grep "$@" -i --color=auto; }
alias sshxforwarding='ssh -XCc blowfish-cbc,arcfour'
alias sshxtrusted='ssh -Y'
alias stackexchange='lynx http://column80.com'		# lookup information
alias srb='surfraw -browser=$BROWSER'			# use for surfraw bookmarks
alias xev-keycode="xev | grep 'keycode\|button'"
# alias weechat='weechat-curses'
alias lsd='ls -1d */'					# ls folders only
alias l='ls -l'
alias lsf='ls --color=always -p | grep -v '/$''		# ls files only
alias lsa='ls -GghA'
alias lsx='ls -lX'
# alias lst='ls -Ggthrc'				# ls by time/changes, newest at bottom



# }}}
#-------- Functions {{{
#------------------------------------------------------

unlock() { keepassc -d ~/.keepass/masterlock.kdb ;}


# change font size (guake terminal)
# tutorial video: http://www.youtube.com/watch?v=i9aKFgxOjwQ
chfontsize() {
  # guake
  gconftool-2 --set '/apps/guake/style/font/style' --type string "Monospace ${1:-16}"
  
  #gnome-terminal
  dconf write /org/gnome/terminal/legacy/profiles:/$(dconf list /org/gnome/terminal/legacy/profiles:/)font "'Monospace ${1:-16}'"
}



# view markdown as manpages
# http://blog.metamatt.com/blog/2013/01/09/previewing-markdown-files-from-the-terminal/
mdless(){ pandoc -s -f markdown -t man "$*" | groff -T utf8 -man | less ;}

# quickly cd out of directories using numbers, example: up 2
up() { local x='';for i in $(seq ${1:-1});do x="$x../"; done;cd $x; }

# show file access permission
# http://unix.stackexchange.com/a/46921
file-permission() { stat --format '%a %n' "$@" ;}

# display mime of file application/zip, application/x-tar
file-type() { file --mime-type -b "$@" ;}

# call vim help page from shell prompt
function :h { vim +":h $1" +'wincmd o' +'nnoremap q :q!<CR>' ;}

# searches for manual locally or online
manned() {
  for arg in "$@"; do man $arg 2> /dev/null \
  || $arg -H 2> /dev/null || $arg -h 2> /dev/null \
  || $arg --help-all 2> /dev/null || $arg --help 2> /dev/null \
  || help $arg 2> /dev/null \
  || $BROWSERCLI "http://manned.org/browse/search?q=$@" 2> /dev/null \
  || $BROWSER "http://manned.org/browse/search?q=$@" 2> /dev/null \
  || open "http://manned.org/browse/search?q=$@" 2> /dev/null \
  || xdg-open "http://manned.org/browse/search?q=$@"
  done
}

# search commandlinefu.com
cmdfu() { curl "http://www.commandlinefu.com/commands/matching/$(echo "$@" \
	| sed 's/ /-/g')/$(echo -n $@ | base64)/plaintext" ;}

# display one random command from commandlinefu.com
cmdfu-random() { echo -e "`curl -sL http://www.commandlinefu.com/commands/random/json|sed -re 's/.*,"command":"(.*)","summary":"([^"]+).*/\\x1b[1;32m\2\\n\\n\\x1b[1;33m\1\\x1b[0m/g'`\n" ;}

# convert doc/docx to pdf (dont upload sensitive data)
# tutorial video: http://www.youtube.com/watch?v=r90IdQwF-hs
doc2pdf() { curl -# -F inputDocument=@"$1" http://www.doc2pdf.net/convert/document.pdf > "${1%.*}.pdf" ;}

# w3m browser with inline images
# https://plus.google.com/102499719144563443986/posts/Vja8W69iHoi
# tutorial video: http://www.youtube.com/watch?v=R2bMUtCOGko
w3mimg() { w3m -o imgdisplay=/usr/lib/w3m/w3mimgdisplay $1 ;}

#}}}
#-------- Clipboard and Upload {{{
#------------------------------------------------------
# DEMO: http://www.youtube.com/watch?v=fKP0FLp3uW0 (xclip)
# 	https://www.youtube.com/watch?v=Ww7Sl4d8F8A (pastebinit)
# DESC: copy/paste for linux machines (Mac style)

alias pbcopy='xclip -selection clipboard'	# copy to clipboard, ctrl+c, ctrl+shift+c
alias pbpaste='xclip -selection clipboard -o'	# paste from clipboard, ctrl+v, ctrl+shitt+v
alias pbselect='xclip -selection primary -o'	# paste from highlight, middle click, shift+insert
alias pbnoformatting='xclip -selection clipboard -o | xclip -selection clipboard'


# dump text from clipboard to pastebin server and copy link
alias pbdumpslexy='pbpaste | pastebinit -b "slexy.org" | pbcopy && echo "URL has been copied to clipboard" && pbpaste'
alias pbdumpsprungeus="pbpaste | curl -F 'sprunge=<-' http://sprunge.us | pbcopy && echo 'URL has been copied to clipboard' && pbpaste"
alias pbdumpixio="pbpaste | curl -F 'f:1=<-' ix.io | pbcopy && echo 'URL has been copied to clipboard' && pbpaste"


alias pbuploadslexy='pbpaste | pastebinit -b "slexy.org" | pbcopy && echo "URL has been copied to clipboard" && pbpaste'

alias pbuploadsprungeus="cat "$@" | curl -F 'sprunge=<-' http://sprunge.us | pbcopy && echo 'URL has been copied to clipboard' && pbpaste"
alias pbuploadixio="cat "$1" | curl -F 'f:1=<-' ix.io | pbcopy && echo 'URL has been copied to clipboard' && pbpaste"



# }}}
#-------- Screenshot {{{
#------------------------------------------------------
# DEMO: http://www.youtube.com/watch?v=Hh8G1aBp8gc
# DESC: take screenshot fullscreen, single window or draw a box
export PATH_SCREENSHOT=~/Pictures/screenshots
pix() { scrot -d 2 "$PATH_SCREENSHOT/fullscr_`date +'%F_%Hh%Ms%S'`.png" ;}
pix-area() { sleep 2 && scrot -s "$PATH_SCREENSHOT/windowed_`date +'%F_%Hh%Ms%S'`.png" ;}

# }}}
#-------- Fuzzy Finder {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/playlist?list=PLqv94xWU9zZ2fMsMMDF4PjtNHCeBFbggD
# DESC: interactive fuzzy string matching
# LINK:  https://github.com/junegunn/fzf

# clipboard cli
# remove
fzf-anamnesis() {
  selected="$(anamnesis -l 1000 | tail -n +3 | awk -F" u" '{print $2}' | sed 's/^.//' | sed 's/\\n.)$//' | sed 's/.)$//' | sed '/^$/d' | sed 's/^ *//' | tac | fzf --tac --no-sort -e -i )"
  echo -n "$selected" | xclip -selection clipboard
}

anamnesis-clear() {
  anamnesis --stop
  rm -rf ~/.local/share/anamnesis
  anamnesis --start
}


fzf-dmenu() {
  # note: xdg-open has a bug with .desktop files, so we cant use that shit
  selected="$(ls /usr/share/applications | fzf -e -i )"
  nohup `grep '^Exec' "/usr/share/applications/$selected" | tail -1 | sed 's/^Exec=//' | sed 's/%.//'` >/dev/null 2>&1&
  # disown if exit 0 successfully
  if [[ $? = 0 ]] ; then disown; fi
}

fzf-surfraw() { surfraw "$(cat ~/.config/surfraw/bookmarks | sed '/^$/d' | sort -n | fzf -e -i )" ;}
fzf-surfrawtor() { surfraw -browser=tor-browser-en "$(cat ~/.config/surfraw/bookmarks | sed '/^$/d' | sort -n | fzf -e -i )" ;}

# alias srb='surfraw -browser=$BROWSER'			# use for surfraw bookmarks

fzf-locate() {
  xdg-open "$(locate "*" | fzf -e -i )"
  
  # some programs require a longer time to load
  sleep 1.5
  
  # if cancle or fail then exit
  # if [ $? -ne 0 ]
  # then
  #  	exit
  # fi
}

fzf-playonlinux() { playonlinux --run '$(ls ~/.PlayOnLinux/shortcuts | fzf -e -i )' ;}

# http://www.reddit.com/r/commandline/comments/3abtup/fzfr_fzf_bash_function/
fzfr() { fzf -m -x | xargs -d'\n' -r "$@" ; }

# edit single line snippet
cfg-snippetrc() { $EDITOR ~/.snippetrc ;}
cfg-multisnippetrc() { $EDITOR ~/.multisnippet/"$(ls ~/.multisnippet | fzf -e -i)" ;}
multisnippet() { $EDITOR ~/.multisnippet/"$1" ;}
fzf-snippet() {
  selected="$(cat ~/.snippetrc | sed '/^$/d' | sort -n | fzf -e -i )"
  # remove tags, leading and trailing spaces, also no newline
  echo "$selected" | sed -e s/\;\;\.\*\$// | sed 's/^[ \t]*//;s/[ \t]*$//' | tr -d '\n' | xclip -selection clipboard
}

fzf-multisnippet() {
  # location of snippets
  dir=~/.multisnippet
  
  # merge filename and tags into single line
  results=$(for FILE in $dir/*
  do
    getname=$(basename $FILE)
    gettags=$(head -n 1 $FILE)
    echo "$getname \t $gettags"
  done)
  
  # copy content into clipboard without tags
  filename=$(echo "$(echo $results | fzf -e -i )" | cut -d' ' -f 1)
  sed 1d $dir/$filename | xclip -selection clipboard
}

#}}}
#-------- Flexget (Torrent RSS) {{{
#------------------------------------------------------
# DEMO: http://www.youtube.com/playlist?list=PLqv94xWU9zZ0pVGrgKtMuhFHun8-MahSY
# LINK: http://flexget.com/
# DESC: auto download torrent similar to how a DVR works

alias flexget='~/.virtualenv/flexget/bin/flexget'
flexget-list() { flexget series list && flexget movie-queue list waiting && flexget movie-queue list downloaded ;}
flexget-check() { flexget check ;}			# check if config file has any errors
flexget-test() { flexget --test execute ;}		# dry run
flexget-execute() { flexget execute ;}
flexget-cron() { flexget execute --cron ;}		# skip writing to logs
flexget-version() { flexget -V ;}
flexget-learnall() { flexget execute --learn ;}		#bypass dling old torrents
flexget-add() { flexget movie-queue add "$@" ;}
flexget-del() { flexget movie-queue del "$@" ;}
flexget-forget() { flexget movie-queue forget "$@" ;}	# allow redownloading on waiting list

#}}}
#-------- Convert to iOS (iPod, Macs, iPhone, Apple TV) {{{
#------------------------------------------------------
# https://trac.handbrake.fr/wiki/BuiltInPresets

convert2iOS-ipod() {
    if [ $# -lt 1 ]; then
        echo -e "HandBrake's low resolution settings for the iPod (5G and up)"
        echo -e "Optimized for great playback on the iPod screen, with smaller file size."
        echo -e "\nUsage: $0 <file_name>"
        echo -e "\nsingle:   $0 file.avi"
        echo -e "\nmultiple: $0 file1.avi file2.avi file3.avi"
        echo -e "\nwildcard: $0 *.avi"
        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        while [ ! -f "${arg%.*}".ipod.mp4 ]
        do
            HandBrakeCLI -i "$arg" -o "${arg%.*}.ipod.mp4" --preset="iPod"
        done
    done
}
convert2iOS-universal() {
    if [ $# -lt 1 ]; then
        echo -e "HandBrake's universally compatible, full resolution settings for all current Apple devices: iPod (6G and up), iPhone, AppleTV, and Macs"
        echo -e "\nUsage: $0 <file_name>"
        echo -e "\nsingle:   $0 file.avi"
        echo -e "\nmultiple: $0 file1.avi file2.avi file3.avi"
        echo -e "\nwildcard: $0 *.avi"
        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        while [ ! -f "${arg%.*}".universal.mp4 ]
        do
            HandBrakeCLI -i "$arg" -o "${arg%.*}.universal.mp4" --preset="Universal"
        done
    done
}

convert2iOS-iphone() {
    if [ $# -lt 1 ]; then
        echo -e "HandBrake's settings for all iPhones and iPod Touches going back to the original iPhone 2G."
        echo -e "\nUsage: $0 <file_name>"
        echo -e "\nsingle:   $0 file.avi"
        echo -e "\nmultiple: $0 file1.avi file2.avi file3.avi"
        echo -e "\nwildcard: $0 *.avi"
        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        while [ ! -f "${arg%.*}".iphone.mp4 ]
        do
            HandBrakeCLI -i "$arg" -o "${arg%.*}.iphone.mp4" --preset="iPhone & iPod touch"
        done
    done
}

convert2iOS-ipodtouch() {
    if [ $# -lt 1 ]; then
        echo -e "HandBrake's settings for all iPhones and iPod Touches going back to the original iPhone 2G."
        echo -e "\nUsage: $0 <file_name>"
        echo -e "\nsingle:   $0 file.avi"
        echo -e "\nmultiple: $0 file1.avi file2.avi file3.avi"
        echo -e "\nwildcard: $0 *.avi"
        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        while [ ! -f "${arg%.*}".ipodtouch.mp4 ]
        do
            HandBrakeCLI -i "$arg" -o "${arg%.*}.ipodtouch.mp4" --preset="iPhone & iPod touch"
        done
    done
}

convert2iOS-ipad() {
    if [ $# -lt 1 ]; then
        echo -e "Usage: $0 <file_name>"
        echo -e "\nsingle:   $0 file.avi"
        echo -e "\nmultiple: $0 file1.avi file2.avi file3.avi"
        echo -e "\nwildcard: $0 *.avi"
        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        while [ ! -f "${arg%.*}".ipad.mp4 ]
        do
            HandBrakeCLI -i "$arg" -o "${arg%.*}.ipad.mp4" --preset="iPad"
        done
    done
}

convert2iOS-appletv() {
    if [ $# -lt 1 ]; then
        echo -e "HandBrake's settings for the AppleTV and 2009's iPhone and iPod Touch lineup. Provides a good balance between quality and file size, and pushes the devices to their limits. Includes Dolby Digital 5.1 AC3 sound for the AppleTV."
        echo -e "\nUsage: $0 <file_name>"
        echo -e "\nsingle:   $0 file.avi"
        echo -e "\nmultiple: $0 file1.avi file2.avi file3.avi"
        echo -e "\nwildcard: $0 *.avi"
        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        while [ ! -f "${arg%.*}".appletv.mp4 ]
        do
            HandBrakeCLI -i "$arg" -o "${arg%.*}.appletv.mp4" --preset="AppleTV"
        done
    done
}

convert2iOS-appletv2() {
    if [ $# -lt 1 ]; then
        echo -e "Usage: $0 <file_name>"
        echo -e "\nsingle:   $0 file.avi"
        echo -e "\nmultiple: $0 file1.avi file2.avi file3.avi"
        echo -e "\nwildcard: $0 *.avi"
        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        while [ ! -f "${arg%.*}".appletv2.mp4 ]
        do
            HandBrakeCLI -i "$arg" -o "${arg%.*}.appletv2.mp4" --preset="AppleTV 2"
        done
    done
}

convert2iOS-appletv3() {
    if [ $# -lt 1 ]; then
        echo -e "Usage: $0 <file_name>"
        echo -e "\nsingle:   $0 file.avi"
        echo -e "\nmultiple: $0 file1.avi file2.avi file3.avi"
        echo -e "\nwildcard: $0 *.avi"
        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        while [ ! -f "${arg%.*}".appletv3.mp4 ]
        do
            HandBrakeCLI -i "$arg" -o "${arg%.*}.appletv3.mp4" --preset="AppleTV 3"
        done
    done
}

# }}}
#-------- Convert to Devices (Other, Gaming Device) {{{
#------------------------------------------------------
# http://develop.participatoryculture.org/index.php/ConversionMatrix

convert2psp() {
    if [ $# -lt 1 ]; then
        echo -e "Usage: $0 <file_name>"
        echo -e "\nsingle:   $0 file.avi"
        echo -e "\nmultiple: $0 file1.avi file2.avi file3.avi"
        echo -e "\nwildcard: $0 *.avi"
        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        while [ ! -f "${arg%.*}".psp.mp4 ]
        do
            ffmpeg -i "$arg" -s 320x240 -b:v 512000 -ar 24000 -ab 64000 -f psp -r 29.97 -strict experimental "${arg%.*}".psp.mp4
        done
    done
}

convert2windowsphone8() {
if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <file_name>"
    echo -e "\nsingle:   $0 file.avi"
    echo -e "\nmultiple: $0 file1.avi file2.avi file3.avi"
    echo -e "\nwildcard: $0 *.avi"
    return 1
fi

myArray=( "$@" )
for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".windowsphone8.mp4 ]
    do
        HandBrakeCLI -i "$arg" -o "${arg%.*}.windowsphone8.mp4" --preset="Windows Phone 8"
    done
done
}

# }}}
#-------- VimWiki {{{
#------------------------------------------------------
wikimd()     { $EDITOR ~/.vimwiki/wikimd/index.md ;}
# }}}
#-------- Slice Videos {{{
#------------------------------------------------------

# movie = both audio & video
# audiotrack = audio only
# videotrack = video only

# mplayer OSD in milliseconds
mplayer-milliseconds() { mplayer -osd-fractions 1 -osdlevel 3 "$1" -ss "${2:-00:00:00}" ;}

slice_movie() {
    if [ $# -lt 5 ]
    then
        echo -e "Use ffmpeg to slice movie (video & audio tracks) with beginning and endpoint with accurate milliseconds"
        echo -e "\nUsage:\n$0 file hh:mm:ss ms hh:mm:ss ms"
        echo -e "\nexample:\n$0 file.mp4 00:01:00 00 00:05:00 00 \n"

        return 1
    fi

    # code
    BEGINTIME=${2}
    ENDTIME=${4}

    # Convert the times to seconds from the Epoch
    SEC1=`date +%s -d ${BEGINTIME}`
    SEC2=`date +%s -d ${ENDTIME}`

    # Use expr to do the math
    DIFFSEC=`expr ${SEC2} - ${SEC1}`
    DURATIONTIME=`date +%H:%M:%S -ud @${DIFFSEC}`

    ffmpeg -i "$1" -ss ${BEGINTIME}."$3" -t ${DURATIONTIME}."$5" -codec:v copy -codec:a copy "${1%.*}"-"$0"-`date +'%F_%Hh%Ms%S'`."${1##*.}"

}

slice_videotrack() {
    if [ $# -lt 5 ]
    then
        echo -e "Use ffmpeg to slice videotrack (no audio) with beginning and endpoint with accurate milliseconds"
        echo -e "\nUsage:\n$0 file hh:mm:ss ms hh:mm:ss ms"
        echo -e "\nexample:\n$0 file.mp4 00:01:00 00 00:05:00 00 \n"

        return 1
    fi

    BEGINTIME=${2}
    ENDTIME=${3}

    SEC1=`date +%s -d ${BEGINTIME}`
    SEC2=`date +%s -d ${ENDTIME}`

    DIFFSEC=`expr ${SEC2} - ${SEC1}`
    DURATIONTIME=`date +%H:%M:%S -ud @${DIFFSEC}`

    ffmpeg -i "$1" -ss ${BEGINTIME}."$3" -t ${DURATIONTIME}."$5" -an -codec:v copy "${1%.*}"-"$0"-`date +'%F_%Hh%Ms%S'`."${1##*.}"

}

slice_audiotrack() {
    if [ $# -lt 5 ]
    then
        echo -e "Use ffmpeg to slice audiotrack (no video) with beginning and endpoint with accurate milliseconds"
        echo -e "\nUsage:\n$0 file hh:mm:ss ms hh:mm:ss ms"
        echo -e "\nexample:\n$0 file.mp4 00:01:00 00 00:05:00 00 \n"

        return 1
    fi

    BEGINTIME=${2}
    ENDTIME=${3}

    SEC1=`date +%s -d ${BEGINTIME}`
    SEC2=`date +%s -d ${ENDTIME}`

    DIFFSEC=`expr ${SEC2} - ${SEC1}`
    DURATIONTIME=`date +%H:%M:%S -ud @${DIFFSEC}`

    ffmpeg -i "$1" -ss ${BEGINTIME}."$3" -t ${DURATIONTIME}."$5" -vn -codec:a copy "${1%.*}"-"$0"-`date +'%F_%Hh%Ms%S'`."${1##*.}"
}

# }}}
#-------- Virtualbox CLI {{{
#------------------------------------------------------
# DESC: Virtualbox is a general-purpose full virtualizer for x86 hardware, targeted at server, desktop and embedded use
# https://www.howtoforge.com/tutorial/running-virtual-machines-with-virtualbox-5.1-on-a-headless-ubuntu-16.04-lts-server/

vbx-list() {
  echo "===Available VM==="
  vboxmanage list vms
  echo "\n===Running VM====="
  vboxmanage list runningvms
}

vbx-dvdrom() {
  if [ $# -lt 2 ]; then
    echo -e "Mount an ISO Image as a DVDROM/CDROM Image on a Running Virtualbox VM"
    echo -e "\nUsage: $0 <vmname> <iso_image>"
    echo -e "\nExample: $0 'Windows 7' 'foobar.iso'"
    echo "\n===Running VM====="
    vboxmanage list runningvms
    return 1
  fi

  vboxmanage storageattach "$1" --storagectl IDE --port 1 --device 0 --type dvddrive --medium "$2"
}

vbx-start() {
  # Set to endless loop
  while true
  do
    # Set the prompt for the select command
    PS3="Type a number to select or 'Ctrl+C' to quit: "
    
    # Create a list to display on menu
    IFS=$'\n'
    fileList=($(vboxmanage list vms | cut -d '{' -f1 | sed 's/ *$//'))
    unset IFS
    
    # Show a menu and ask for input. If the user entered a valid choice then execute command
    select fileName in $fileList; do
      if [ -n "$fileName" ]; then
        # remove quotes from filename
        vm_name=($(echo "${fileName}" | sed 's:\"::g' ))
        vboxmanage startvm "$vm_name" --type headless
        echo -e "${Green} $vm_name Has Been Started ${Color_Off}"
      fi
      break
    done
  done
}

vbx-quit() {
  # Set to endless loop
  while true
  do
    # Set the prompt for the select command
    PS3="Type a number to select or 'Ctrl+C' to quit: "
    
    # Create a list to display on menu
    IFS=$'\n'
    fileList=($(vboxmanage list runningvms | cut -d '{' -f1 | sed 's/ *$//'))
    unset IFS
    
    # Show a menu and ask for input. If the user entered a valid choice then execute command
    select fileName in $fileList; do
      if [ -n "$fileName" ]; then
        # remove quotes from filename
        vm_name=($(echo "${fileName}" | sed 's:\"::g' ))
        vboxmanage controlvm "$vm_name" acpipowerbutton
        echo -e "${Yellow} $vm_name Is Shutting Down ${Color_Off}"
      fi
      break
    done
  done
}

vbx-forcequit() {
  # Set to endless loop
  while true
  do
    # Set the prompt for the select command
    PS3="Type a number to select or 'Ctrl+C' to quit: "
    
    # Create a list to display on menu
    IFS=$'\n'
    fileList=($(vboxmanage list runningvms | cut -d '{' -f1 | sed 's/ *$//'))
    unset IFS
    
    # Show a menu and ask for input. If the user entered a valid choice then execute command
    select fileName in $fileList; do
      if [ -n "$fileName" ]; then
        # remove quotes from filename
        vm_name=($(echo "${fileName}" | sed 's:\"::g' ))
        vboxmanage controlvm "$vm_name" poweroff
        echo -e "${Red} $vm_name Power Cable Has Been Pulled ${Color_Off}"
      fi
      break
    done
  done
}
# }}}
#-------- rDesktop v2 (Remote Desktop) [last updated July 29, 2016] {{{
#------------------------------------------------------

rdesktop-winxp() { 
  ipaddr=192.168.1.150
  port=3389
  username=administrator
  resolution=1920x1020

  until nc -vzw 2 "$ipaddr" "$port"; do sleep 2; done
  rdesktop -u "$username" -g "$resolution" "$ipaddr":"$port" -r sound:local
}

rdesktop-win7() { 
  ipaddr=192.168.1.152
  port=3389
  username=bonster
  resolution=1920x1020

  until nc -vzw 2 "$ipaddr" "$port"; do sleep 2; done
  rdesktop -u "$username" -g "$resolution" "$ipaddr":"$port" -r sound:local
}

rdesktop-mintmate64() { 
  ipaddr=192.168.1.206
  port=3389
  username=bonster
  resolution=1920x1020

  until nc -vzw 2 "$ipaddr" "$port"; do sleep 2; done
  rdesktop -u "$username" -g "$resolution" "$ipaddr":"$port" -r sound:local
}

rdesktop-fedoramate64() { 
  ipaddr=192.168.1.52
  port=3389
  username=bonster
  resolution=1920x1020

  until nc -vzw 2 "$ipaddr" "$port"; do sleep 2; done
  rdesktop -u "$username" -g "$resolution" "$ipaddr":"$port" -r sound:local
}

# }}}
#-------- Webcam {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=oYTE3docGLA
# DESC: using external player to display webcam

# mplayer to display webcam
# hit 's' to take screenshot, will save in current folder
# hit 'S' to take series of screenshot, will save in current folder
# hit 'f' to toggle fullscreen
# hit 'T' to toggle stay-on-top
# hit 'q' or 'Esc' to quit
# https://wiki.archlinux.org/index.php/Webcam_Setup#MPlayer
webcam-list() { v4l2-ctl --list-formats-ext && v4l2-ctl --list-devices ;}
webcam-mplayer() { mplayer tv:// -tv driver=v4l2:width=640:height=360:device=/dev/video0 -fps 30 -vf screenshot -ontop -geometry "99%:95%" ;}
webcam-mplayer-noborder() { mplayer tv:// -tv driver=v4l2:width=640:height=360:device=/dev/video0 -fps 30 -vf screenshot -geometry "98%:98%" -ontop -noborder ;}
webcam-mplayer-screenshot() { mplayer tv:// -tv driver=v4l2:width=1920:height=1080:device=/dev/video0 -fps 30 -vf screenshot -ontop ;}

# DESC: use webcam to scan for barcode/qrcode
zbarcam-v4l() {
  # barcode/qrcode reader using webcam
  # this is for webcam that was not supported by default
  # https://fitzcarraldoblog.wordpress.com/2012/10/05/installing-and-using-zbar-in-linux-to-scan-bar-codes-with-your-webcam/
  # requires: v4l-utils
  LD_PRELOAD=/usr/lib/libv4l/v4l1compat.so zbarcam /dev/video0
}
# }}}
#-------- Sound Effects {{{
#------------------------------------------------------
# http://whatnotlinux.blogspot.com/2011/12/enterprise-ambiance.html
ambiance-whitenoise() { play -n -c1 synth whitenoise band -n 100 20 band -n 50 20 gain +25  fade h 1 864000 1 ;}
ambiance-whitenoisewider() { play -n -c2 synth whitenoise band -n 100 24 band -n 300 100 gain +20 ;}
ambiance-pinknoise() { play -c2 -n synth pinknoise band -n 280 80 band -n 60 25 gain +20 treble +40 500 bass -3 20 flanger 4 2 95 50 .3 sine 50 lin ;}

#}}}
#-------- Archive Manager CLI {{{
#------------------------------------------------------
archive-append() { atool -a "$@" ;}
archive-extract() { atool -x "$@" ;}
archive-list() { atool -l "$1" | less -N ;}
archive-search() { atool -l "$1" | grep -i "$2" ;}

# create archive
archive-create-7z() { atool -a archive.7z "$@" ;}
archive-create-zip() { atool -a archive.zip "$@" ;}
archive-create-rar() { atool -a archive.rar "$@" ;}
archive-create-tar() { atool -a archive.tar "$@" ;}
archive-create-targz() { atool -a archive.tar.gz "$@" ;}
archive-create-cbz() { atool -a archive.zip "$@" && mv -- archive.zip archive.cbz ;}
archive-create-cbr() { atool -a archive.rar "$@" && mv -- archive.rar archive.cbr ;}

# converting archive
convert2archive-tar() { arepack -F .tar -e "$@" ;}
convert2archive-zip() { arepack -F .zip -e "$@" ;}
convert2archive-rar() { arepack -F .rar -e "$@" ;}
convert2archive-targz() { arepack -F .tar.gz -e "$@" ;}
convert2archive-7z() { arepack -F .7z -e "$@" ;}
convert2archive-cbz() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    if [[ ! -f "${arg%%.*}".zip && ! -f "${arg%%.*}".cbz ]]; then
      arepack -F .zip -e "$arg" && mv -- "${arg%%.*}".zip "${arg%%.*}".cbz
    else
      if [[ -f "${arg%%.*}".zip && ! -f "${arg%%.*}".cbz ]]; then
        mv -v -- "${arg%%.*}".zip "${arg%%.*}".cbz
      fi
    fi
  done
}
convert2archive-cbr() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    if [[ ! -f "${arg%%.*}".rar && ! -f "${arg%%.*}".cbr ]]; then
      arepack -F .rar -e "$arg" && mv -- "${arg%%.*}".rar "${arg%%.*}".cbr
    else
      if [[ -f "${arg%%.*}".rar && ! -f "${arg%%.*}".cbr ]]; then
        mv -v -- "${arg%%.*}".rar "${arg%%.*}".cbr
      fi
    fi
  done
}

#}}}
#-------- Detox Filename Cleanup {{{
#------------------------------------------------------
# DESC: cleanup filename to different styles

# eg. FOO BAR LinuX.TAR.GZ --> foo_bar_linux.tar.gz
detox-unix() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    filter_name=$(echo "$arg" | sed 's/%20/ /g' | sed 's/ /_/g' | tr '[:upper:]' '[:lower:]')
    mv -- "$arg" "$filter_name"
  done
}

# eg. FOO BAR LinuX.TAR.GZ --> Foo Bar Linux.tar.gz
detox-human() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    filter_name=$(echo "$arg" | sed 's/%20/ /g' | sed 's/_/ /g' | tr '[:upper:]' '[:lower:]' | sed 's/\b\([[:alpha:]]\)\([[:alpha:]]*\)\b/\u\1\L\2/g' | sed -e "s/'\(.\)/'\l\1/g" | sed -e "s/\.\(.\)/\.\l\1/g" )
    mv -- "$arg" "$filter_name"
  done
}

detox-human-dash() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    filter_name=$(echo "$arg" | sed 's/%20/ /g' | sed 's/_/ /g' | sed 's/-/ /g' | tr '[:upper:]' '[:lower:]' | sed 's/\b\([[:alpha:]]\)\([[:alpha:]]*\)\b/\u\1\L\2/g' | sed -e "s/'\(.\)/'\l\1/g" | sed -e "s/\.\(.\)/\.\l\1/g" )
    mv -- "$arg" "$filter_name"
  done
}

# }}}
#-------- Music Tagging CLI {{{
#------------------------------------------------------
tag-encoding-v2.3() { eyeD3 --encoding=utf8 --to-v2.3 "$@" ;}
tag-encoding-v2.4() { eyeD3 --encoding=utf8 --to-v2.4 "$@" ;}
tag-show() { eyeD3 "$@" ;}
tag-album() { eyeD3 -A "$1" "${@:2}" ;}
tag-albumartist() { eyeD3 -b "$1" "${@:2}" ;}
tag-artist() { eyeD3 -a "$1" "${@:2}" ;}
tag-title() { eyeD3 -t "$1" "${@:2}" ;}
tag-number() { eyeD3 -n "$1" "${@:2}" ;}
tag-genre() { eyeD3 -G "$1" "${@:2}" ;}
tag-listgenre() { eyeD3 --plugin=genres ;}
tag-year() { eyeD3 -Y "$1" "${@:2}" ;}
tag-comment() { eyeD3 -c "$1" "${@:2}" ;}
tag-image-remove() { eyeD3 --remove-all-images "$@" ;}
tag-image-add() { eyeD3 --add-image "$1":FRONT_COVER "${@:2}" ;}
tag-image-extract() { eyeD3 --write-images=. "$@" ;}

# use existing music tags to rename filename
tag-to-filename-num-title() { eyeD3 --rename '$track:num - $title' "$@" ;}
tag-to-filename-artist-album-num-title() { eyeD3 --rename '$artist - $album - $track:num - $title' "$@" ;}
tag-to-filename-artist-title() { eyeD3 --rename '$artist - $title' "$@" ;}
tag-to-filename-artist-album-title() { eyeD3 --rename '$artist - $album - $title' "$@" ;}


# use existing filename to fill in music tags
# 05 Desperado.mp3 --> fill in track/title
tag-filltag-from-filename-num-space-title() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    tracknum=$(echo "${arg%.*}" | cut -d ' ' -f1 | awk '{$1=$1};1' )
    titlename=$(echo "${arg%.*}" | cut -d ' ' -f2- | awk '{$1=$1};1' )
    eyeD3 --track "$tracknum" --title "$titlename" "$arg"
  done
}

# 05 - Desperado.mp3 --> fill in track/title
tag-filltag-from-filename-num-dash-title() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    tracknum=$(echo "${arg%.*}" | awk -F' - ' '{print $1}' | awk '{$1=$1};1' )
    titlename=$(echo "${arg%.*}" | awk -F' - ' '{print $2}' | awk '{$1=$1};1' )
    eyeD3 --track "$tracknum" --title "$titlename" "$arg"
  done
}

# Rihanna - Desperado.mp3 --> fill in artist/albumartist/title
tag-filltag-from-filename-artist-dash-title() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    artistname=$(echo "${arg%.*}" | awk -F' - ' '{print $1}' | awk '{$1=$1};1' )
    titlename=$(echo "${arg%.*}" | awk -F' - ' '{print $2}' | awk '{$1=$1};1' )
    eyeD3 --artist "$artistname" --title "$titlename" "$arg"
  done
}

# Desperado.mp3 --> fill in title
tag-filltag-from-filename-titleonly() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    eyeD3 --title "${arg%.*}" "$arg"
  done
}

# }}}
#-------- IPTV - Manual {{{
#------------------------------------------------------

IPTVPLAYER=cvlc
iptv-new-aljazeera() { "$IPTVPLAYER" 'rtmp://aljazeeraflashlivefs.fplive.net:1935/aljazeeraflashlive-live?videoId=883816736001&lineUpId=&pubId=665003303001&playerId=751182905001&affiliateId=/aljazeera_eng_high?videoId=883816736001&lineUpId=&pubId=665003303001&playerId=751182905001&affiliateId=.flv live=1' ;}

iptv-news-abc() { "$IPTVPLAYER" 'http://abclive.abcnews.com/i/abc_live1@136327/master.m3u8?b=500,300,700,900,1200#preview-http://abclive.abcnews.com/i/abc_live1@136327/master.m3u8?b=400' ;}

iptv-sports-motorsport() { "$IPTVPLAYER" 'http://motorsport.hopto.org:8080/' ;}
iptv-sports-pac12() { "$IPTVPLAYER" 'http://xrxs.net/video/live-p12baya-2328.m3u8' ;}
iptv-music-hearttv() { "$IPTVPLAYER" 'http://ooyalahd2-f.akamaihd.net/i/globalradio02_delivery@156522/master.m3u8' ;}
iptv-tv-planetgreen() { "$IPTVPLAYER" 'http://80.80.160.168/live/4/live.m3u8' ;}
iptv-tv-trtworld() { "$IPTVPLAYER" 'http://trtcanlitv-lh.akamaihd.net/i/TRTWORLD_1@321783/index_1500_av-p.m3u8?sd=10&rebase=on' ;}
iptv-music-vevo() { "$IPTVPLAYER" 'http://vevoplaylist-live.hls.adaptive.level3.net/vevo/ch1/06/prog_index.m3u8' ;}
iptv-music-virgintv() { "$IPTVPLAYER" 'http://wow01.105.net/live/virgin1/chunklist.m3u8' ;}

iptv-education-university-of-californiatv() { "$IPTVPLAYER" 'rtmp://ucsdtv-wowza.ucsd.edu:1935/live/live_800' ;}

#}}}


####################
##### DEAD LIST ####
####################
# Code that just went dead due to changes in API
#  waiting to see if changes can be made to bring it back to life

#-------- Imgur Upload {{{
#------------------------------------------------------
# DEMO: http://www.youtube.com/watch?v=7-9uYSGyvU0
# DESC: upload to imgur.com
# REFF: http://www.commandlinefu.com/commands/view/9341
upl-imgur() {
	curl -\# -F image=@"$1" -F "key=1913b4ac473c692372d108209958fd15" \
	http://api.imgur.com/2/upload.xml | grep -Eo "<original>(.)*</original>" \
	| grep -Eo "http://i.imgur.com/[^<]*"
}

# }}}

####################
##### TESTING ######
####################
# New code dump, stuff I am creating or copy from others


#-------- Clonezilla CLI (Autorun LiveCD/USB) {{{
#------------------------------------------------------

# ///Note/// Due to the limitations of program mkisofs
# ocs-iso can not process an image file larger than 4.5 GB.
# For this reason, if your image is larger than 4.5 GB
# ocs-iso will refuse to process it.
# http://clonezilla.org/make-live-recovery-manually.php
# http://clonezilla.org/show-live-doc-content.php?topic=clonezilla-live/doc/04_Create_Recovery_Clonezilla
# https://rbgeek.wordpress.com/2013/04/16/part-2-creation-of-autorun-recovery-clonezilla-live-cddvd-from-image/#more-8366
clonezilla-create-recoveryiso() {
	if [ $# -lt 2 ]; then
		echo -e "create recovery autorun cd using existing clonezilla sarge image recovery-iso-zip feature in clonezilla"
		echo -e "\nUsage: $0 <existing_image> <device>"
		echo -e "\nExample: $0 mydesktop sdx"
		echo -e "\nNote: <device> is the harddrive that is on the machine this livecd is going to restore to (sdx)"
		echo -e "Note2: <output_file> will be saved to your current path"
		return 1
	fi
        # set current pwd as the output path
        sudo sed -i 's:ocsroot=.*:ocsroot='\""$PWD"\"':g' /etc/drbl/drbl.conf

        # the exisiting image you have already made with clonezilla aka sarge-image
        SARGE_IMAGE="$1"

        # device that the autorun cd will restore the image to (sdx for linux or hdx for windows)
        # use "ask_user" if you want the user to select the device
        DEVICE_DRIVE="$2"


        # convert sarge_image to ISO livecd
sudo ocs-iso -g en_US.UTF-8 -t -k NONE -e "-g auto -e1 auto -e2 -c -r -j2 -p true restoredisk $SARGE_IMAGE $DEVICE" "$SARGE_IMAGE"

        # set output file permissions to everyone
	# sudo chmod -R 777 "$OUTPUT_FILE"
}

# }}}
# #-------- Environment Variable {{{
# #------------------------------------------------------
# export HISTCONTROL=ignoreboth			#Remove Extra Commands
# export HISTCONTROL=erasedups			#Erase duplicates across the whole history
# HISTCONTROL=ignorespace				#Space follow by a cmd,will not be saved in history
# HISTCONTROL=ignoredups				#Rm Dupes, the continuous repeated entry from history
# HISTFILESIZE=3000				#Bash history size limit
# HISTSIZE=1000
# export HISTTIMEFORMAT="%d/%m/%y %T "		#History list shows digital time and date
# # Set 256 Colors
# # http://blog.sanctum.geek.nz/256-colour-terminals/
# # if [ -e /usr/share/terminfo/x/xterm-256color ]; then
# #    export TERM='xterm-256color'
# # fi
#
# #}}}
#-------- Weechat XDCC {{{
#------------------------------------------------------
# http://nibl.co.uk/bots.php?search=

xdcc-nibl() {
    if [ $# -lt 1 ]
    then
        echo -e "Download XDCC files from using weechat from (#nibl @ irc.rizon.net)"
        echo -e "Search using http://nibl.co.uk/bots.php?search="
        echo -e "\nUsage:\n$0 </msg>"
        echo -e "\nexample:\n$0 '/msg AHQ[Turtle] xdcc send #1721'"

        return 1
    fi

    echo "irc.rizon.#nibl *$1" > "$(ls ~/.weechat/weechat_fifo*)"
}




# }}}
#-------- Slrn (Text Base News Client) {{{
#------------------------------------------------------
# https://wiki.archlinux.org/index.php/Slrn
# http://news.gmane.org/search.php?match=linux
#
export NNTPSERVER='news.gmane.org'

# }}}

#-------- Battery Status {{{
#------------------------------------------------------
# https://www.reddit.com/r/debian/comments/41sw7g/checking_battery_status_in_terminal/cz68iwq
alias batterystatus="upower -i /org/freedesktop/UPower/devices/........ | grep time"
alias batteryshow='cat /sys/class/power_supply/BAT1/status'
# }}}
#-------- Binary / Shell Scripts {{{
#------------------------------------------------------


# lightweight image viewer
# tutorial video: https://www.youtube.com/watch?v=OMOIZlOEfb8
# https://wiki.archlinux.org/index.php/Feh#File_Browser_Image_Launcher
feh-browser() { ~/.scripts/feh_browser.sh $@ -B white -g 1280x800 & }
feh-slideshow() { ~/.scripts/feh_browser.sh $@ -B white -g 1280x800 -D 3 & }

# http://code.google.com/p/imgur-cli
# imgur image uploader http://imgur.com
imgur() { python2 ~/.scripts/imgur-cli/imgur.py $@ ;}

# manual tiling (similar compiz grid plugin)
# tutorial video: https://www.youtube.com/watch?v=ZF76DELEpjM
# http://ssokolow.com/quicktile
quicktile() { python2.7 ~/.config/quicktile/quicktile.py $@ ;}
quicktile-daemonize() { nohup python2.7 ~/.config/quicktile/quicktile.py -d >/dev/null 2>&1& }
quicktile-kill () { kill $(ps -ef | grep '[q]uicktile.py' | awk '{print $2}') ;}

# http://bash.cyberciti.biz/multimedia/linux-rip-audio-cd/
rip-audio-cd() { ~/.scripts/rip_audio_cd.sh ;}

# screenshot gallery generator
# tutorial video: https://www.youtube.com/watch?v=_4G4nMUTzX8
# http://cli-apps.org/content/show.php/Movie+Thumbnailer?content=74676
shot() { ~/.scripts/shot.sh -n 30 -r 80% -s $@ ;}

# take screenshot fullscreen, window, area selection using import command
# http://en.gentoo-wiki.com/wiki/Screenshot
sshot() { ~/.scripts/screenshot.sh area ;}

# Vim as a pager ( similar to the less command )
# tutorial video: https://www.youtube.com/watch?v=RefWl8I3nBg
	# issue: gg hotkey does not jump to exact line
	vlessold() { /usr/share/vim/vim73/macros/less.sh "$1" ;}

	# http://technotales.wordpress.com/2009/05/24/using-vim-as-a-pager/
	# vim readonly; to force write use :w!
	vless() { vim -R "$@" ;}

# https://bitbucket.org/antocuni/tty2gif
# convert ttyrec to gif files
tty2gif() { python3 ~/.scripts/tty2gif/tty2gif.py $@ ;}

# https://github.com/saironiq/shellscripts/blob/master/wolframalpha_com/wa.sh
# http://www.wolframalpha.com
wolframalpha() { ~/.scripts/shellscripts/wolframalpha_com/was.sh ;}

#}}}
#-------- Copy Move {{{
#------------------------------------------------------
cpr() {
	if [ $# -lt 1 ]; then
        echo -e "rsync copying files using task spooler queue"
        echo -e "\nUsage:\n$0 [-h help] [-t task-spooler] <source> <destination>"
        echo -e "\nInclude Parent Folder:\n$0 <source> <destination>"
        echo -e "\nExclude Parent Folder:\n$0 <source>/ <destination>"
        echo -e "\nRequirements: rsync task-spooler"
        return 1
	else
		case "$1" in
		  -t) tsp rsync -a "$@" ;;
		  -h) $0 ;;
		  -*) $0 ;;
		  *) rsync -av --progress "$@" ;;
		esac
	fi
}
mvr() {
	if [ $# -lt 1 ]; then
        echo -e "rsync moving files using task spooler queue"
        echo -e "\nUsage:\n$0 [-h help] [-t task-spooler] <source> <destination>"
        echo -e "\nInclude Parent Folder:\n$0 <source> <destination>"
        echo -e "\nExclude Parent Folder:\n$0 <source>/ <destination>"
        echo -e "\nRequirements: rsync task-spooler"
        return 1
	else
		case "$1" in
		  -t) tsp rsync -a --remove-source-files "$@" ;;
		  -h) $0 ;;
		  -*) $0 ;;
		  *) rsync -av --progress --remove-source-files "$@" ;;
		esac
	fi
}
# }}}
#-------- VirtualEnv (Python Isolated Environment) {{{
#------------------------------------------------------

# tutorial video: https://www.youtube.com/watch?v=n8ZzqsFeHOI
virtwrap-create() {
	mkdir -p ~/.virtualenv
	cd ~/.virtualenv
	virtualenv "$1" -p "${2:-python}"
	source "$1"/bin/activate
}
virtwrap-activate() {
	cd ~/.virtualenv
	source "$1"/bin/activate
}

# }}}
#-------- Convert to Image {{{
#------------------------------------------------------
# pdftoppm convert pdf to images
# http://askubuntu.com/a/50180
convert_pdf_to_png() {
    if [ $# -lt 1 ]
    then
        echo -e "convert PDF document to PNG image (default dpi is 150)"
        echo -e "\nUsage:\n$0 <pdf> <dpi> <startingpage> <endingpage>"
        echo -e "\nall pages to images:\n$0 file.pdf"
        echo -e "\nchange dpi (common dpi are 150, 300, 600):\n$0 file.pdf 300"
        echo -e "\nsingle page to image:\n$0 file.pdf 300 5"
        echo -e "\nmultiple pages to images:\n$0 file.pdf 300 5 12"

        return 1
    fi
    pdftoppm -png "$1" "${1%.*}"-"${2:-150}"DPI -r "${2:-150}" -f "$3" -l "${4:-$3}"
}

convert_pdf_to_jpg() {
    if [ $# -lt 1 ]
    then
        echo -e "convert PDF document to JPEG image (default dpi is 150)"
        echo -e "\nUsage:\n$0 <pdf> <dpi> <startingpage> <endingpage>"
        echo -e "\nall pages to images:\n$0 file.pdf"
        echo -e "\nchange dpi (common dpi are 150, 300, 600):\n$0 file.pdf 300"
        echo -e "\nsingle page to image:\n$0 file.pdf 300 5"
        echo -e "\nmultiple pages to images:\n$0 file.pdf 300 5 12"

        return 1
    fi
    pdftoppm -jpeg "$1" "${1%.*}"-"${2:-150}"DPI -r "${2:-150}" -f "$3" -l "${4:-$3}"
}

convert_pdf_to_tiff() {
    if [ $# -lt 1 ]
    then
        echo -e "convert PDF document to TIFF image (default dpi is 150)"
        echo -e "\nUsage:\n$0 <pdf> <dpi> <startingpage> <endingpage>"
        echo -e "\nall pages to images:\n$0 file.pdf"
        echo -e "\nchange dpi (common dpi are 150, 300, 600):\n$0 file.pdf 300"
        echo -e "\nsingle page to image:\n$0 file.pdf 300 5"
        echo -e "\nmultiple pages to images:\n$0 file.pdf 300 5 12"

        return 1
    fi
    pdftoppm -tiff "$1" "${1%.*}"-"${2:-150}"DPI -r "${2:-150}" -f "$3" -l "${4:-$3}"
}

convert_pdf_to_pgm-grayscale() {
    if [ $# -lt 1 ]
    then
        echo -e "convert PDF document to PGM Grayscale image (default dpi is 150)"
        echo -e "\nUsage:\n$0 <pdf> <dpi> <startingpage> <endingpage>"
        echo -e "\nall pages to images:\n$0 file.pdf"
        echo -e "\nchange dpi (common dpi are 150, 300, 600):\n$0 file.pdf 300"
        echo -e "\nsingle page to image:\n$0 file.pdf 300 5"
        echo -e "\nmultiple pages to images:\n$0 file.pdf 300 5 12"

        return 1
    fi
    pdftoppm -gray "$1" "${1%.*}"-"${2:-150}"DPI -r "${2:-150}" -f "$3" -l "${4:-$3}"
}

convert_pdf_to_pbm-monochrome() {
    if [ $# -lt 1 ]
    then
        echo -e "convert PDF document to PBM Monochrome image (default dpi is 150)"
        echo -e "\nUsage:\n$0 <pdf> <dpi> <startingpage> <endingpage>"
        echo -e "\nall pages to images:\n$0 file.pdf"
        echo -e "\nchange dpi (common dpi are 150, 300, 600):\n$0 file.pdf 300"
        echo -e "\nsingle page to image:\n$0 file.pdf 300 5"
        echo -e "\nmultiple pages to images:\n$0 file.pdf 300 5 12"

        return 1
    fi
    pdftoppm -mono "$1" "${1%.*}"-"${2:-150}"DPI -r "${2:-150}" -f "$3" -l "${4:-$3}"
}

# }}}
#-------- Disk Image to ISO {{{
#------------------------------------------------------

#  https://github.com/helmuthdu/dotfiles/blob/master/.bashrc
convert2discimage_iso () {
    if [[ $# == 0 || $1 == "--help" || $1 == "-h" ]]; then
      echo -e "Converts raw|bin|cue|ccd|img|mdf|nrg disc image to ISO"
      echo -e "Usage: $0 <disc_image>"
    fi
    for i in $*; do
      if [[ ! -f "$i" ]]; then
        echo "'$i' is not a valid file; jumping it"
      else
        echo -n "converting $i..."
        # OUT=`echo $i | cut -d '.' -f 1`
        case $i in
              *.raw ) bchunk "$i" "${i%.*}.iso" ;; #raw=bin
        *.bin|*.cue ) bchunk "${i%.*}.bin" "${i%.*}.cue" "${i%.*}.iso" ;; # bin,cue
        *.ccd|*.img ) ccd2iso "${i%.*}.img" "${i%.*}.iso" ;; # Clone CD images
              *.mdf ) mdf2iso "$i" "${i%.*}.iso" ;; # Alcohol images
              *.nrg ) nrg2iso "$i" "${i%.*}.iso" ;; # Nero images
                  * ) echo "$0 don't know de extension of '$i'";;
        esac
        if [[ $? != 0 ]]; then
          echo -e "${R}ERROR!${W}"
        else
          echo -e "${G}done!${W}"
        fi
      fi
    done
}

# https://help.ubuntu.com/community/ManageDiscImages#CloneCD.2FIMG_Images
convert_to_iso() {
 if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<bin|cue|img|nrg|mdf|mds>"
 else
    if [ -f "$1" ] ; then
        NAME=${1%.*}
        #mkdir $NAME && cd $NAME
        case "$1" in
          *.bin)       bchunk "$1" "${1%.*}".cue "${1%.*}".iso ;; # bin/cue
          *.cue)       bchunk "${1%.*}".bin "$1" "${1%.*}".iso ;; # bin/cue
          *.img)       ccd2iso "$1" "${1%.*}".iso ;; # CloneCD/IMG
          *.nrg)       nrg2iso "$1" "${1%.*}".iso ;;
          *.mdf)       mdf2iso "$1" "${1%.*}".iso ;;
          *.mds)       mdf2iso "${1%.*}".mdf "${1%.*}".iso ;;
          *)           echo "$0: '$1' - unsupported format" ;;
        esac
    else
        echo "'$1' - file does not exist"
    fi
fi
}

# ex() -- Extract compressed files (tarballs, zip, etc)
ex() {
    for file in "$@"; do
        if [ -f "$file" ]; then
            local file_type=$(file -bizL "$file")
            case "$file_type" in
                *application/x-tar*|*application/zip*|*application/x-zip*|*application/x-cpio*)
                    bsdtar -x -f "$file" ;;
                *application/x-gzip*)
                    gunzip -d -f "$file" ;;
                *application/x-bzip*)
                    bunzip2 -f "$file" ;;
                *application/x-rar*)
                    7z x "$file" ;;
                *application/octet-stream*)
                    local file_type=$(file -bzL "$file")
                    case "$file_type" in
                        7-zip*) 7z x "$file" ;;
                        *) echo -e "Unknown filetype for '$file'\n$file_type" ;;
                    esac ;;
                *)
                    echo -e "Unknown filetype for '$file'\n$file_type" ;;
            esac
        else
            echo "'$file' is not a valid file"
        fi
    done
}


# }}}
#-------- Convert to Documents {{{
#------------------------------------------------------
convert_images_to_pdf() {
    if [ $# -lt 1 ]
    then
        echo -e "convert images into one single pdf"
        echo -e "\nUsage:\n$0 <images>"
        echo -e "\nexample:\n$0 image1.jpg image2.jpg image3.jpg"
        echo -e "\n$0 *.jpg"
        echo -e "\n$0 *.png"

        return 1
    fi
    convert "$@" "${1%.*}"-`date +'%F_%Hh%Ms%S'`.pdf
}


# Using libreoffice
convert_to_html() { soffice --headless --convert-to "html:XHTML Writer File:UTF8" "$1" ;}
convert_to_txt() { soffice --headless --convert-to "txt:Text (encoded):UTF8" "$1" ;}


# convert_to_pdfo() {
#  if [ -z "$1" ]; then
#     # display usage if no parameters given
#     echo "Usage: extract <path/file_name>.<bin|cue|img|nrg|mdf|mds>"
#  else
#     if [ ! -f "${1%.*}".pdf ] ; then
#         NAME=${1%.*}
#         case "$1" in
#           *.doc|*.docx)    soffice --headless --convert-to pdf "$@" ;;
#           *.ppt|*.pptx)    soffice --headless --convert-to pdf "$@" ;;
#           *.xls|*.xlsx)    soffice --headless --convert-to pdf "$@" ;;
#           *.txt|*.rtf)     soffice --headless --convert-to pdf "$@" ;;
#           *.html)          soffice --headless --convert-to pdf "$@" ;;
#           *.epub)          soffice --headless --convert-to pdf "$@" ;;
#           *.cbr|*.cbz|*.cb7|*.cbt|*.cba)    ebook-convert "$1" .pdf ;;
#           *.jpg|*.jpeg)    convert "$@" "${1%.*}"-`date +'%F_%Hh%Ms%S'`.pdf ;;
#           *.pbm|*.pgm)     convert "$@" "${1%.*}"-`date +'%F_%Hh%Ms%S'`.pdf ;;
#           *.png)           convert "$@" "${1%.*}"-`date +'%F_%Hh%Ms%S'`.pdf ;;
#           *)               echo "'$1' - unsupported format or file does not exist" ;;
#         esac
#     else
#         echo "'${1%.*}.pdf' - file exist, skipping to prevent overwrite"
#     fi
# fi
# }

# http://duff-johnson.com/2014/02/17/the-8-most-popular-document-formats-on-the-web/
convert_to_pdf() {
	if [ $# -lt 1 ]; then
		echo -e "Usage: $0 <file_name>.<doc|docx|ppt|pptx|xls|xlsx|txt|rtf|html|epub|cbr|cbz|cbt|cb7|cba|jpg|jpeg|pbm|pgm|png>"
		echo -e "\nsingle:   $0 file.doc"
		echo -e "\nmultiple: $0 file1.jpg file2.jpg file3.jpg"
		echo -e "\nwildcard: $0 *.png"
		echo -e "\nRequirement: calibre imagemagick libreoffice"
        return 1
	else
		if [ ! -f "${1%.*}".pdf ] ; then
		NAME=${1%.*}
		case "$1" in
		  *.doc|*.docx)    soffice --headless --convert-to pdf "$@" ;;
		  *.ppt|*.pptx)    soffice --headless --convert-to pdf "$@" ;;
		  *.xls|*.xlsx)    soffice --headless --convert-to pdf "$@" ;;
		  *.txt|*.rtf)     soffice --headless --convert-to pdf "$@" ;;
		  *.html)          soffice --headless --convert-to pdf "$@" ;;
		  *.epub)          soffice --headless --convert-to pdf "$@" ;;
		  *.cbr|*.cbz|*.cb7|*.cbt|*.cba)    ebook-convert "$1" .pdf ;;
		  *.jpg|*.jpeg|*.pbm|*.pgm|*.png)   convert "$@" "${1%.*}"-`date +'%F_%Hh%Ms%S'`.pdf ;;
		  *)               echo "'$1' - unsupported format or file does not exist" ;;
		esac
		else
			echo "'${1%.*}.pdf' - file exist, skipping to prevent overwrite"
		fi
	fi
}

# }}}
#-------- Convert to Android (Smartphone, Tablet) {{{
#------------------------------------------------------
# http://develop.participatoryculture.org/index.php/ConversionMatrix
# https://trac.handbrake.fr/wiki/BuiltInPresets

ANDROID_DEVICE=(-acodec aac -ab 160k -vcodec libx264 -preset slow -profile:v baseline -level 30 -maxrate 10000000 -bufsize 10000000 -f mp4 -threads 0 -strict experimental)
convert2devices-android_720pnd()  { ffmpeg -i "$1" -s 1280x720  ${ANDROID_DEVICE[*]} "${1%.*}".android720p.mp4 ;}
convert2devices-android_1080p() { ffmpeg -i "$1" -s 1920x1080 ${ANDROID_DEVICE[*]} "${1%.*}".android1080p.mp4 ;}

convert2droid-kindlefire() {
	if [ $# -lt 1 ]; then
		echo -e "Usage: $0 <file_name>"
		echo -e "\nsingle:   $0 file.avi"
		echo -e "\nmultiple: $0 file1.avi file2.avi file3.avi"
		echo -e "\nwildcard: $0 *.avi"
		return 1
	fi

	myArray=( "$@" )
	for arg in "${myArray[@]}"; do
		while [ ! -f "${arg%.*}".kindlefire.mp4 ]
		do
			ffmpeg -i "$arg" -s 1024x600 -acodec aac -ab 96k -vcodec libx264 -preset slow -f mp4 -crf 22 -strict experimental "${arg%.*}".kindlefire.mp4
		done
	done
}

convert2droid-androidtablet() {
	if [ $# -lt 1 ]; then
		echo -e "A preset for Midrange Andriud Tablet devices."
		echo -e "\nUsage: $0 <file_name>"
		echo -e "\nsingle:   $0 file.avi"
		echo -e "\nmultiple: $0 file1.avi file2.avi file3.avi"
		echo -e "\nwildcard: $0 *.avi"
		return 1
	fi

	myArray=( "$@" )
	for arg in "${myArray[@]}"; do
		while [ ! -f "${arg%.*}".androidtablet.mp4 ]
		do
			HandBrakeCLI -i "$arg" -o "${arg%.*}.androidtablet.mp4" --preset="Android Tablet"
		done
	done
}

convert2droid-android() {
	if [ $# -lt 1 ]; then
		echo -e "A preset for Midrange android devices."
		echo -e "\nUsage: $0 <file_name>"
		echo -e "\nsingle:   $0 file.avi"
		echo -e "\nmultiple: $0 file1.avi file2.avi file3.avi"
		echo -e "\nwildcard: $0 *.avi"
		return 1
	fi

	myArray=( "$@" )
	for arg in "${myArray[@]}"; do
		while [ ! -f "${arg%.*}".android.mp4 ]
		do
			HandBrakeCLI -i "$arg" -o "${arg%.*}.android.mp4" --preset="Android"
		done
	done
}
convert2droid-high() {
	if [ $# -lt 1 ]; then
		echo -e "HandBrake's general-purpose preset for High Profile H.264 video, with all the bells and whistles."
		echo -e "\nUsage: $0 <file_name>"
		echo -e "\nsingle:   $0 file.avi"
		echo -e "\nmultiple: $0 file1.avi file2.avi file3.avi"
		echo -e "\nwildcard: $0 *.avi"
		return 1
	fi

	myArray=( "$@" )
	for arg in "${myArray[@]}"; do
		while [ ! -f "${arg%.*}".high.mp4 ]
		do
			HandBrakeCLI -i "$arg" -o "${arg%.*}.high.mp4" --preset="High Profile"
		done
	done
}

convert2droid-normal() {
	if [ $# -lt 1 ]; then
		echo -e "HandBrake's normal, default settings."
		echo -e "\nUsage: $0 <file_name>"
		echo -e "\nsingle:   $0 file.avi"
		echo -e "\nmultiple: $0 file1.avi file2.avi file3.avi"
		echo -e "\nwildcard: $0 *.avi"
		return 1
	fi

	myArray=( "$@" )
	for arg in "${myArray[@]}"; do
		while [ ! -f "${arg%.*}".normal.mp4 ]
		do
			HandBrakeCLI -i "$arg" -o "${arg%.*}.normal.mp4" --preset="Normal"
		done
	done
}

# }}}
#-------- Demuxing {{{
#------------------------------------------------------

demux-videotrack() { ffmpeg -i "$1" -an -codec:v copy "${1%.*}"."$0"."${1##*.}" ;}
demux-audiotrack() { ffmpeg -i "$1" -vn -codec:a copy "${1%.*}"."$0"."${1##*.}" ;}

# demux_subs
# demux_fonts/attachments

# }}}
#-------- Plowshare {{{
#------------------------------------------------------
# d/l cyberlocker files like rapidshare, mediafire ..etc
# tutorial video: http://www.youtube.com/watch?v=5AzFdX-EyeI
# http://code.google.com/p/plowshare/
# PPA: https://launchpad.net/~plowsharepackagers
plowdown-depositfiles() { plowdown -r 3 --max-rate 900K -m ~/.config/plowshare/depositfiles.txt ;}
plowdown-uploaded() { plowdown -r 3 --max-rate 900K -m ~/.config/plowshare/uploaded.txt ;}
plowdown-netloadin() { plowdown -r 3 --max-rate 900K -m ~/.config/plowshare/netloadin.txt ;}
plowdown-rapidgator() { plowdown -r 3 --max-rate 900K -m ~/.config/plowshare/rapidgator.txt ;}
plowdown-rapidshare() { plowdown -r 3 --max-rate 900K -m ~/.config/plowshare/rapidshare.txt ;}
plowdown-random() { plowdown -r 3 --max-rate 900K -m ~/.config/plowshare/random.txt ;}
alias plowup='plowup turbobit'

#}}}
# concat  = joinning files in a series (like a train)
# convert = change one format to another
# slice   = cut files into peices (video, sound, both)
# mux     = flatting files such as video and audio track in parallel
# demux   = extraction of video or sound tracks
# split   = split into peiceses (archive into peices like zip, rar)
# combine = join files together again (usually for splited archive files like 001, zip ..etc)
#-------- Rip Disc to Files {{{
#------------------------------------------------------

#http://www.reddit.com/r/commandline/comments/19ept5/open_discussion_cool_trick_thursday_what_are_your/c8neljz
convert_audiocd_to_mp3() { cdparanoia -B ; for f in *.wav ; do sox -S $f "${f%.wav}.mp3" ; rm $f ; done ;}
convert_audiocd_to_flac() { cdparanoia -B ; for f in *.wav ; do sox -S $f "${f%.wav}.flac" ; rm $f ; done ;}
convert_audiocd_to_ogg() { cdparanoia -B ; for f in *.wav ; do sox -S $f "${f%.wav}.ogg" ; rm $f ; done ;}
convert_audiocd_to_iso() { use dd or ddrescure or readom ;}


# has CDDB tags?
ripit-mydefault() {
	ripit -o ~/Downloads -p 0 -c 0 --nointeraction "$@"
	# -p ; playlist (m3u file) 0=disable
	# --nointeraction; use 1st CDDB it finds
	# -c ; 0 - Lame (for mp3), 1 - Oggenc, 2 - Flac, 3 - Faac,
	# 	4 - mp4als, 5 - Musepack, 6 - Wavpack, 7 - ffmpeg
	# $@ ; specfic tracks like 1-4,5,8
}

rip_to_mp3() { mkdir -p ~/Downloads/audiocd ; ripit -o ~/Downloads/audiocd -p 0 -c 0 --nointeraction "$@" ;}
rip_to_ogg() { mkdir -p ~/Downloads/audiocd ; ripit -o ~/Downloads/audiocd -p 0 -c 1 --nointeraction "$@" ;}
rip_to_flac() { mkdir -p ~/Downloads/audiocd ; ripit -o ~/Downloads/audiocd -p 0 -c 2 --nointeraction "$@" ;}
rip_to_aac() { mkdir -p ~/Downloads/audiocd ; ripit -o ~/Downloads/audiocd -p 0 -c 3 --nointeraction "$@" ;}

# }}}
#-------- Hardcoded Subtitles to Videos {{{
#------------------------------------------------------
# https://trac.ffmpeg.org/wiki/HowToBurnSubtitlesIntoVideo
# https://www.bunkus.org/videotools/mkvtoolnix/samples/
# install ttf-ms-fonts
# ffmpeg with --enable-libass

convert_to_ass() { ffmpeg -i "$1" "${1%.*}".ass ;} # srt --> ass
convert_to_srt() { ffmpeg -i "$1" "${1%.*}".srt ;} # ass --> srt

# The first 2 are alpha
# AABBGGRR = &HAABBGGRR

# usage: aliasname filename subtitles(srt/ass)
# convert_to_hardsubs() { ffmpeg -y -i "$1" -vf subtitles="$2":force_style="'Fontsize=35;FontName=DejaVu Serif,PrimaryColour=&H5014F0FF'" -codec:v libx264 -preset medium -crf 22 -codec:a aac -qscale:a 6 -strict experimental "${1%.*}"-hardsubs.mp4 ;}

convert_to_hardsubs() {
if [ $# -lt 2 ]
then
	echo -e "Use ffmpeg to hardcode subtitles into one movietrack"
	echo -e "\nUsage:\n$0 [file] [subtitle (srt/ass)] [fontsize (25)] [color code (yellow)] [fontname (dejavu sans mono)]"
	echo -e "\nexample:\n$0 file.mp4 file.srt"
	echo -e "$0 file.mp4 file.srt 30 5000FF14 Arial \n"
	echo -e "kml color code: http://www.zonums.com/gmaps/kml_color/"


	exit 1
fi

ffmpeg -y -i "$1" -vf subtitles="$2":force_style="'Fontsize=${3:-25},PrimaryColour=&H${4:-5014F0FF},FontName=${5:-DejaVu Sans Mono}'" -codec:v libx264 -preset medium -crf 22 -codec:a aac -qscale:a 6 -strict experimental "${1%.*}"-hardsubs.mp4
}

# 1min video testing
convert_to_testing() { ffmpeg -y -i "$1" -ss 00:05:00 -t 00:01:00 -vf subtitles="$2":force_style="'Fontsize=35;FontName=DejaVu Serif,PrimaryColour=&H5014F0FF'" -codec:v libx264 -preset medium -crf 22 -codec:a aac -qscale:a 6 -strict experimental "${1%.*}"-testing.mp4 ;}


# }}}
#-------- Concatenate Files {{{
#------------------------------------------------------

# tutorial video: http://www.youtube.com/watch?v=eQoOk5Xbt3M
concat_pdf() {
    if [ $# -lt 1 ]
    then
        echo -e "concatenate multiple pdf files into one single pdf"
        echo -e "\nUsage:\n$0 <pdfs>"
        echo -e "\nexample:\n$0 file1.pdf file2.pdf file3.pdf"
        echo -e "\n$0 *.pdf"

        return 1
    fi
	gs -dBATCH -dNOPAUSE -sDEVICE=pdfwrite -sOutputFile="${1%.*}"-`date +'%F_%Hh%Ms%S'`_concat.pdf -f "$@"
}

concat_png() {
    if [ $# -lt 1 ]
    then
        echo -e "concatenate multiple images into one single png"
        echo -e "\nUsage:\n$0 <images>"
        echo -e "\nexample:\n$0 file1.jpg file2.png file3.jpeg"
        echo -e "\n$0 *.jpg"
        echo -e "\n$0 *.png"

        return 1
    fi
	convert -append "$@" concatoutput.png
}
concat_jpg() {
    if [ $# -lt 1 ]
    then
        echo -e "concatenate multiple images into one single jpg"
        echo -e "\nUsage:\n$0 <images>"
        echo -e "\nexample:\n$0 file1.jpg file2.png file3.jpeg"
        echo -e "\n$0 *.jpg"
        echo -e "\n$0 *.png"

        return 1
    fi
	convert -append "$@" concatoutput.jpg
}

# }}}

#-------- Concatenate Videos {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# REFF: http://askubuntu.com/a/18210
# LINK: http://quvi.sourceforge.net/

# DEMO: https://www.youtube.com/watch?v=EAWGFJoZXAU
concat2video-avi() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <file>"
    echo -e "\nExample: \n$0 file1.avi file2.avi file3.avi"
    echo -e "$0 *.avi"
    echo -e "\nrequires package: transcode"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}"-movie.mp4 ]
    do
      avimerge -o "${1%.*}".concat.avi -i "$arg"
    done
done
}


# VIDEOCODEC="Xvid"
# AUDIOCODEC="MP3"
# for FIL in `ls *mp4 | sort` ; do
# avidemux2 --video-codec $VIDEOCODEC --audio-codec $AUDIOCODEC --force-alt-h264 --load "$FIL" --save ${FIL%.*}.avi --quit
# done


# concat_movie() {
# 	appendfile=$(echo "$@" | sed 's: : --append :g')
# 	avidemux2_cli --nogui --audio-codec copy --video-codec copy --output-format "${1##*.}" --load $(echo $appendfile) --save "${1%.*}"-appended."${1##*.}"
# }
#
concat2video-movie() {
	avidemux2_cli --nogui --force-alt-h264 \
	--audio-codec copy --video-codec copy --output-format "${1##*.}" \
	--load "$1" --append "$2" --append "$3" --append "$4" \
	--append "$5" --append "$6" --append "$7" --append "$8" \
	--save "${1%.*}"-appended."${1##*.}"
}

concat2video-mp4() {
	avidemux2_cli --nogui --force-alt-h264 \
	--audio-codec copy --video-codec copy --output-format "${1##*.}" \
	--load "$1" --append "$2" --append "$3" --append "$4" \
	--append "$5" --append "$6" --append "$7" --append "$8" \
	--save "${1%.*}"-appended."${1##*.}"
}


# }}}


#-------- Extract Files {{{
#------------------------------------------------------

# http://www.linuxjournal.com/content/tech-tip-extract-pages-pdf
extract_pdf() {
    if [ $# -lt 2 ]
    then
        echo -e "convert images into one single pdf"
        echo -e "\nUsage:\n$0 <input file> <startingpage> <endingpage>"
        echo -e "\nexample:\n$0 file.pdf 6"
        echo -e "\n$0 file.pdf 13 26"

        return 1
    fi

    gs -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -dSAFER -dFirstPage="${2}" -dLastPage="${3:-$2}" -sOutputFile="${1%.pdf}"_p"${2}"-p"${3:-$2}".pdf "${1}"
}

# }}}
#-------- Muxing {{{
#------------------------------------------------------
mux_to_mkv() {
	# mkvmerge -o newfile.mkv part1.mkv +part2.mkv
	# appendfile=$echo ${@} | sed 's: : +:g')
	appendfile=$(echo "$@" | sed 's: : +:g')
        # appendfile=$(echo "$@" | sed 's/ /\ +/g')

	mkvmerge -o "${1%.*}".mux.mkv $(echo $appendfile)
	echo $appendfile

	}

# }}}
#-------- Web Search Prefix {{{
#------------------------------------------------------
# Custom seaches
gg-comic() { sitelist=$(echo "avaxhome.ws h33t.com mycomicpost.com bdcomics.bdgamers.net" \
	  	| sed 's/ /\+OR\+site\:/g')
	url=$(echo "https://encrypted.google.com/search?hl=en&q=$@+site:$sitelist"\
		| sed 's/ /+/g'); $BROWSER $url; }
gg-cyberlocker() { sitelist=$(echo "hotfile.com rapidshare.com mediafire.com
	uploading.com depositfiles.com zshare.net filepost.com filefactory.com
	2shared.com zippyshare.com slingfile.com wuala.com filetram.com
	4shared.com rabidfiles.com" \
		| sed 's/ /\+OR\+site\:/g')
	url=$(echo "https://encrypted.google.com/search?hl=en&q=$@+site:$sitelist"\
		| sed 's/ /+/g'); $BROWSER $url; }
gg-dojin() { sitelist=$(echo "hentairules.net fakku.net hentaifromhell.net" \
		| sed 's/ /\+OR\+site\:/g')
	url=$(echo "https://encrypted.google.com/search?hl=en&q=$@+site:$sitelist"\
		| sed 's/ /+/g'); $BROWSER $url; }
gg-icons() { sitelist=$(echo "iconseeker.com iconarchive.com iconfinder.com
	deviantart.com veryicon.com iconspedia.com" \
		| sed 's/ /\+OR\+site\:/g')
	url=$(echo "https://encrypted.google.com/search?hl=en&q=$@+site:$sitelist"\
		| sed 's/ /+/g'); $BROWSER $url; }
gg-keygen() { sitelist=$(echo "crack.ms/cracks/crack.ms?id" \
		| sed 's/ /\+OR\+site\:/g')
	url=$(echo "https://encrypted.google.com/search?hl=en&q=$@+site:$sitelist"\
		| sed 's/ /+/g'); $BROWSER $url; }
gg-music() { url=$(echo "https://encrypted.google.com/search?hl=en&q=
	intitle:index.of+mp3+"$@"+-html+-htm+-txt"\
		| sed 's/ /+/g'); $BROWSER $url; }
gg-packages() { sitelist=$(echo "sourceforge.net github.com archlinux.org/packages
	freecode.com/projects gnome.org/extension python.org/pypi gentoo.org/package" \
		| sed 's/ /\+OR\+site\:/g')
	url=$(echo "https://encrypted.google.com/search?hl=en&q=$@+site:$sitelist"\
		| sed 's/ /+/g'); $BROWSER $url; }
gg-pastebin() { sitelist=$(echo "pastebin.com paste2.org pastie.org snipt.net
	heypasteit.com/clip pastee.org shell-fu.org commandlinefu.com catonmat.net
	linuxconfig.net github.com bitbucket.org slexy.org stackoverflow.com
	askubuntu.com superuser.com dotfiles.org dotshare.it gitorious.org
	serverfault.com wikia.com stackexchange.com" \
		| sed 's/ /\+OR\+site\:/g')
	url=$(echo "https://encrypted.google.com/search?hl=en&q=$@+site:$sitelist"\
		| sed 's/ /+/g'); $BROWSER $url; }
gg-piratebay() { url=$(echo "http://thepiratebay.org/search/$@" \
		| sed 's/ /+/g'); $BROWSER $url; }
gg-porn() { sitelist=$(echo "youporn.com redtube.com xvideos.com xhamster.com
	tube8.com grayvee.com pornhub.com/view_video.php?viewkey tnaflix.com
	youjizz.com hardsextube.com/video drtuber.com/video pornoxo.com limesteam.com
       	motherless.com xnxx.com cliphunter.com extremetube.com/video" \
		| sed 's/ /\+OR\+site\:/g')
	url=$(echo "https://encrypted.google.com/search?hl=en&q=$@+site:$sitelist"\
		| sed 's/ /+/g'); $BROWSER $url; }
gg-reader() { url=$(echo "https://encrypted.google.com/reader/view/#search/$@" \
		| sed 's/ /+/g'); $BROWSER $url; }
gg-search() { url=$(echo "https://encrypted.google.com/search?hl=en&q=$@" \
		| sed 's/ /+/g'); $BROWSER $url; }
gg-serial() { sitelist=$(echo "freeserials.com/serials/download.php?id= serials.ws/d.php?n" \
		| sed 's/ /\+OR\+site\:/g')
	url=$(echo "https://encrypted.google.com/search?hl=en&q=$@+site:$sitelist"\
		| sed 's/ /+/g'); $BROWSER $url; }
gg-torrent() { sitelist=$(echo "eztv.it thepiratebay.se torrentzap.com fenopy.com
	torrindex.com h33t.com tokyotosho.info nyaa.eu" \
		| sed 's/ /\+OR\+site\:/g')
	url=$(echo "https://encrypted.google.com/search?hl=en&q=$@+site:$sitelist"\
		| sed 's/ /+/g'); $BROWSER $url; }
gg-translate() {
	$BROWSER http://translate.google.com/#auto/en/"$*" ;}

#}}}
#-------- Internet Videos - Castalba.tv {{{
#------------------------------------------------------
# http://castalba.tv/channels
# Animation, Documentary, Entertainment, Sports, News

# sample of fail capture links
#rtmpdump -r "rtmp://live.castalba.tv/calive" -a "calive" -f "LNX 11,2,202,243" -W "http://static.castalba.tv/player.swf" -p "http://castalba.tv/channel/6768" -y "174956" -o 174956.flv

CTVPLAYER=mplayer
ctv-news-aljazeera() { rtmpdump -v -r "rtmp://aljazeeraflashlivefs.fplive.net/aljazeeraflashlive-live" \
	-a "aljazeeraflashlive-live" \
	-f "LNX 11,2,202,261" \
	-W "http://static.castalba.tv/player.swf" \
	-p "http://castalba.tv/channel/4182" \
	-y "aljazeera_eng_low" | "$CTVPLAYER" - ;}

#}}}
#-------- GNOME 2 configs {{{
#------------------------------------------------------

# function h-framebuffer() {
# echo -e '
# mplayer -vo fbdev -fs -vf scale=1280:-3 FileName
# mplayer -vo fbdev -fs -vf scale=-3:1024 FileName
#
# on Arch linux use fbdev2
# mplayer -vo fbdev2
#
# vlc video_file
# vlc --vout fb video_file
# '}
# function h-gconf-tweaks() {
# echo -e "
# #Wallpaper Changer
# bash -c 'gconftool-2 -t str -s /desktop/gnome/background/picture_filename "$(find ~/Pictures/Wallpapers -type f | shuf -n1)"'
#
# compiz --replace
# metacity --replace
# emerald --replace
# xkill
# gnome-system-monitor
# gnome-search-tool --hidden
#
# #Dont Dim When Asking for Password
# gconftool-2 --type boolean --set /apps/gksu/disable-grab "True"
# gconftool-2 --set "/apps/metacity/general/button_layout" --type string ":close"
#
# #Button Placement
# gconftool-2 --set "/apps/metacity/general/button_layout" --type string ":minimize,maximize,close"
# gconftool-2 --set "/apps/metacity/general/button_layout" --type string ":close"
#
# #Middle Click Minimize
# gconftool-2 --set "/apps/metacity/general/action_middle_click_titlebar" --type string "minimize"
#
# #Hide Desktop Icon Drives
# gconftool-2 --set "/apps/nautilus/desktop/volumes_visible" --type boolean "false"
#
# #Disable Lock on Idle
# gconftool-2 --set "/apps/gnome-power-manager/lock/gnome_keyring_hibernate" --type boolean "false"
# gconftool-2 --set "/apps/gnome-power-manager/lock/hibernate" --type boolean "false"
# gconftool-2 --set "/apps/gnome-power-manager/lock/suspend" --type boolean "false"
#
# #Enable Metacity Compositing
# gconftool-2 --set '/apps/metacity/general/compositing_manager' --type boolean "true"
#
# #Disable Screensaver
# gconftool-2 --set '/apps/gnome-screensaver/idle_activation_enabled' --type boolean "false"
# gconftool-2 --set '/apps/gnome-screensaver/lock_enabled' --type boolean "false"
#
# #Clock Format
# gconftool-2 --set '/apps/panel/applets/clock_screen0/prefs/format' --type string "custom"
# gconftool-2 --set '/apps/panel/applets/clock_screen0/prefs/custom_format' --type string "%a %b/%d/%y, %I:%M %p"
#
# #AWN Auto Hide
# Set awn setting behavior: Custom | Autohide mode: Fade Out | Icon Effects: Simple
# gconftool-2 --set '/apps/instances/avant-window-navigator/panel-1/panel/intellihide_mode' --type string "0"
#
# #AWN OLD WAY TO AUTO HIDE
# gconftool-2 --set '/apps/awn-applet-taskmanager/intellihide' --type boolean "false"
#
# # Default Open App, LINK CLICK
# gconftool-2 -t string -s /desktop/gnome/url-handlers/magnet/command "/usr/bin/transmission-gtk %s"
# gconftool-2 -s /desktop/gnome/url-handlers/magnet/needs_terminal false -t bool
# gconftool-2 -t bool -s /desktop/gnome/url-handlers/magnet/enabled true
#
#
# "}


# }}}
#-------- Clean Stuff {{{
#------------------------------------------------------

# http://www.commandlinefu.com/commands/view/954
symlinks() { find . -type l ! -exec test -e {} \; -print ;}
symlinks-delete() { find . -type l ! -exec test -e {} \; -print0 | xargs -0 rm ;}
rm-except() {
	find . -type f -not -name '*copy*' | xargs rm
}
rmdir-empty() { find -empty -print -delete ;}
# --// Cleanup //--
cleanup () {
    echo -e '\e[1;31m * Cleaning Thumbnails * \e[1;37m'
    rm -rfv ~/.thumbnails/*
    rm -rfv ~/.cache/thumbnails/*
    echo -e '\e[1;31m * Removing cache * \e[1;37m'
    rm -rfv ~/.cache/chromium/*
    rm -rfv ~/.cache/vlc/*
    echo -e '\e[1;31m * Cleaning Trash * \e[1;37m'
    gvfs-trash --empty
}
d-swiggle() { find . -type f -name '*~' -exec rm -v {} \; ;}
d-url() { find . -type f -iname '*.url' -exec rm -v {} \; ;}
d-thumbsdb() { find . -type f -iname 'Thumbs.db' -exec rm -v {} \; ;}
swiggle() { find . -name *~ -delete ;}
cleanlinks() {
	# not in the repos: inspired by http://www.xfree86.org/4.8.0/cleanlinks.1.html
	# delete empty folder
	find . -type d -empty -print0 | xargs -0 rmdir
	# delete broken symlinks
	find . -type l -xtype l | xargs -l rm
}
# }}}
#-------- Logitech K810 Keyboard {{{
#------------------------------------------------------

k810-battery() { echo Logitech K810 Battery: $(cat /sys/class/power_supply/hid-00:1f:20:a8:08:47-battery/capacity) ;}
k810-resync() { echo -e 'connect 00:1F:20:A8:08:47 \nexit' | bluetoothctl ;}
# }}}
#-------- TMSU (File Tagging CLI) {{{
#------------------------------------------------------

tmsu-add() { tmsu tag --tags "$@" ;}
tmsu-list() { tmsu tags ;}
tmsu-repair() { tmsu repair "$@" ;}
tmsu-search() { tmsu files "$@" ;}
fzf-tmsu() {
	nohup xdg-open "$(tmsu files "$@" | fzf -e -i )" >/dev/null 2>&1&

	# if cancle or fail then exit
	if [ $? -ne 0 ]
	then
	 	exit
	fi
}
# }}}
#-------- Surfraw Bookmarks {{{
#------------------------------------------------------
# surfraw completions testing
# https://blogs.oracle.com/AlejandroVargas/entry/awk_examples
# removes empty line, removes comments, prints 1st word, sort abc ordered
#
showbookmarks() { awk 'NF != 0 && !/#/ {print $1}' ~/.config/surfraw/bookmarks | sort -n ;}

#}}}
#-------- WINE Gaming {{{
#------------------------------------------------------
# get newest version
syu-winetrickz() { cd ~/Programs/appz/winetricks; rm -f winetricks; \
      	wget http://www.kegel.com/wine/winetricks; chmod +x winetricks ;}

# http://wiki.winehq.org/winetricks
# change wineprefix location so winetricks can be use on it
set-wineprefix() {
	WINEPREFIX="$PWD"
	echo "ex: /home/username/.PlayOnLinux/wineprefix/Office2007"
	echo "wineprefix is now set to: $WINEPREFIX"
}


#}}}
#-------- DPKG {{{
#------------------------------------------------------

alias pydeb='sudo python setup.py --command-packages=stdeb.command debianize'
alias dp-installed='dpkg --get-selections | grep $1'
alias dp-deb-show='dpkg --info'			#to examine archive files
alias dp-deb-content='dpkg --contents'		#to list their contents.
whichpkg() { dpkg -S $( which $1 ); }		#lookup for what package uses this command
cmdpkg() { PACKAGE=$(dpkg -S $(which $1) | cut -d':' -f1); echo "[${PACKAGE}]"; dpkg -s "${PACKAGE}" ;}


alias dp-history-install='cat /var/log/dpkg.log | grep "install "'
alias dp-history-upgrade='cat /var/log/dpkg.log | grep upgrade'
alias dp-history-remove='cat /var/log/dpkg.log | grep remove'
dp-history-rollback() { cat /var/log/dpkg.log | grep upgrade | grep "$2" -A10000000 | grep "$3" -B10000000 |awk '{print $4"="$5}';}


dp-hold()
{
echo -n "Please enter the package you wish to put a hold on:
"
read progID
echo "$progID hold" |sudo dpkg --set-selections
}

dp-unhold()
{
echo -n "Please enter the package you wish to remove the hold on:
"
read progID
echo "$progID install" |sudo dpkg --set-selections
}


killkernel() { #Removes all unused kernel, except the newest one
	dpkg -l 'linux-*' | sed '/^ii/!d;/'"$(uname -r \
	| sed "s/\(.*\)-\([^0-9]\+\)/\1/")"'/d;s/^[^ ]* [^ ]* \([^ ]*\).*/\1/;/[0-9]/!d' \
	| xargs sudo apt-get -y purge ;}

# }}}
#-------- Renaming Case {{{
#------------------------------------------------------

alias renameit="ls | rename -v 's/ /_/g'"	#change files with spaces to underscore
single-to-doubles() {
# for bash shell only
	for i in ?.jpg; do mv $i 0$i; done
	for i in ?.png; do mv $i 0$i; done
	for i in ?.PNG; do mv $i 0$i; done
}
doubles-to-triples() {
	for i in ??.jpg; do mv $i 0$i; done
	for i in ??.png; do mv $i 0$i; done
}
string-lowercase() { echo "$@" | tr '[:upper:]' '[:lower:]' ;}	# converts string to lowercase

# http://stackoverflow.com/a/3211670
nametodigit() {
	local a=1
	for i in `ls -v | grep -i "$1"`; do
	  new=$(printf "%04d.$1" "$a") #04 pad to length of 4
	  mv -- "${i}" "${new}"
	  let a=a+1
	done
}

paddy() {
for file in foo[0-9]*.png; do
  # strip the prefix ("foo") off the file name
  postfile=${file#foo}
  # strip the postfix (".png") off the file name
  number=${postfile%.png}
  # subtract 1 from the resulting number
  i=$((number-1))
  # copy to a new name in a new folder
  cp ${file} ../newframes/$(printf foo%08d.png $i)
done
}



# http://www.walkingrandomly.com/?p=2850
# adds leading zeros to digits in filenames

padme() {
	num=`expr match "$1" '[^0-9]*\([0-9]\+\).*'`
	paddednum=`printf "%03d" $num`
	echo ${1/$num/$paddednum}
}

# http://www.walkingrandomly.com/?p=2850
zeropadding() {
	num=`expr match "$1" '[^0-9]*\([0-9]\+\).*'`
	paddednum=`printf "%03d" $num`
	echo ${1/$num/$paddednum}
}



zeropad() { for i in "$@" ;do mv $i `padme $i`; done ;}
# http://www.youtube.com/watch?v=rE7ISiKoNec
#lower case bash/zsh
# lowercase() {
# 	# [bash] https://www.garron.me/en/bits/rename-files-from-uppercase-to-lowercase.html
# 	for i in *; do mv $i `echo $i | tr [:upper:] [:lower:]`; done
# 	# [zsh] https://lorenzod8n.wordpress.com/category/zsh/
# 	for file in *; do mv $file ${file:l}; done
# ;}

# http://stackoverflow.com/a/11824856
lowercase-extension() { find . -name '*.*' -exec sh -c ' a=$(echo "$0" | sed -r "s/([^.]*)\$/\L\1/"); [ "$a" != "$0" ] && mv "$0" "$a" ' {} \; ;}
# }}}
#-------- Keyboard related {{{
#------------------------------------------------------

touchpad-toggle() { synclient TouchpadOff=$(synclient -l | grep -c ‘TouchpadOff.*=.*0’) ;}
lang-toggle() { setxkbmap -option grp:alt_caps_toggle "us,jp" ;}
vim-toggle() {
# https://xpressrazor.wordpress.com/2014/03/30/script-to-toggle-keys
# toggle caplock and esc key
if xmodmap -pke | egrep -i "escape" | egrep -i "keycode.*9.*"; then
 echo "Changing from original to mapped"
 xmodmap -e "clear lock"
 xmodmap -e "keycode 66 = Escape"
 xmodmap -e "keycode 9 = Caps_Lock"
 xmodmap -e "add Lock = Caps_Lock"
else
 echo "Changing back from mapped to original"
 xmodmap -e "clear lock"
 xmodmap -e "keycode 9 = Escape"
 xmodmap -e "keycode 66 = Caps_Lock"
 xmodmap -e "add Lock = Caps_Lock"
fi
}
# }}}
#-------- Function Informations {{{
#------------------------------------------------------

function    osr              { shutdown -r now; }
function    osh              { shutdown -h now; }

function    mfloppy          { mount /dev/fd0 /mnt/floppy; }
function    umfloppy         { umount /mnt/floppy; }

function    mdvd             { mount -t iso9660 -o ro /dev/dvd /mnt/dvd; }
function    umdvd            { umount /mnt/dvd; }

function    mcdrom           { mount -t iso9660 -o ro /dev/cdrom /mnt/cdrom; }
function    umcdrom          { umount /mnt/cdrom; }


function    dub              { du -sclb $@; }
function    duk              { du -sclk $@; }
function    dum              { du -sclm $@; }

function    dfk              { df -PTak $@; }
function    dfm              { df -PTam $@; }
function    dfh              { df -PTah $@; }
function    dfi              { df -PTai $@; }
# }}}
#-------- OCR {{{
#------------------------------------------------------

ocr2clipboard() {
	# folder to dump it to
	DIR=/tmp

	# scale up the image resolution for better ocr-ing
	convert "$1" -resize 5000 "$DIR"/image_out.png
	# ocr the scaled image
	tesseract "$DIR"/image_out.png "$DIR"/result
	# copy to the clipboard
	xclip -selection clipboard -i "$DIR"/result.txt
}
# }}}
#-------- Midi Music {{{
#------------------------------------------------------

midplayer() { adlmidi "$1" > /dev/null 2>&1 ;}
# https://wiki.archlinux.org/index.php/FluidSynth#Standalone_mode
midi-fluidsynth() { fluidsynth -a alsa -m alsa_seq -l -i /usr/share/soundfonts/fluidr3/FluidR3GM.SF2 "$1" ;}
# }}}
#-------- SSD TRIM {{{
#------------------------------------------------------

# http://www.webupd8.org/2013/01/enable-trim-on-ssd-solid-state-drives.html
trim-check() {
#	sudo hdparm -I /dev/sda | grep "TRIM supported"
	sudo hdparm -I /dev/"$1" | awk '/.*TRIM supported.*/{ if ($1 == "*") print "Yes, TRIM is enabled"; else print "No, TRIM is not enabled." ;}'
}
trim-fstrim() { sudo fstrim -v "$1" ;}
gen-cron-trim() { sudo cp ~/.scripts/trim /etc/cron.daily/ ;}
# }}}
#-------- OLD CFG {{{
#------------------------------------------------------

cfg-ghsync() { $EDITOR ~/.scripts/ghsync-script.sh ;}
cfg-dircolors() { $EDITOR ~/.dircolors ;}
cfg-percol() { $EDITOR ~/.percol.d/rc.py ;}
cfg-sourcelist() { sudo $EDITOR /etc/apt/sources.list ;}
cfg-pacman() { sudo $EDITOR /etc/pacman.conf ;}
cfg-pacman-mirrorlist() { sudo $EDITOR /etc/pacman.d/mirrorlist ;}
# http://blog.dotsmart.net/2011/09/30/change-font-size-in-chrome-devtools/
cfg-chromium-devtoolsize() { $EDITOR ~/.config/chromium/Default/User\ StyleSheets/Custom.css ;}
cfg-chromium-noscript() { $EDITOR ~/.config/chromium/Default/Extensions/odjhifogjcknibkahlpidmdajjpkkcfn/*/CHANGE__PASSWORD__HERE.js ;}
cfg-timidity() { sudo $EDITOR /etc/timidity++/timidity.cfg ;}
cfg-xdg-mine() { $EDITOR ~/.local/share/applications/mimeapps.list ;}

# }}}
#-------- IMGUR {{{
#------------------------------------------------------

# imgur album downloader
# https://github.com/alexgisby/imgur-album-downloader
# tutorial video: https://www.youtube.com/watch?v=dW4co9f5Ors
imguralbum() { python ~/.scripts/imgur-album-downloader/imguralbum.py "$@" ;}

imguralbum_cbz() {
	# usage: imguralbum [link] [filename]

	local IMGUR_SAVE_PATH=/tmp

	# make a temp folder
	# mkdir -p "$IMGUR_SAVE_PATH"/"$2"

	#download album
	python ~/.scripts/imgur-album-downloader/imguralbum.py "$1" "$IMGUR_SAVE_PATH"/"$2"

	#create zip archive using .cbz extension for comics
	zip -r "${2%/}.cbz" "$IMGUR_SAVE_PATH"/"$2"

	#delete temp folder
	rm -rf "$IMGUR_SAVE_PATH"/"$2"
}
# }}}

quicksynergy-daemon() { /usr/bin/synergys --daemon --config ~/.quicksynergy/synergy.conf ;}
# mutt background fix
COLORFGBG="default;default"

jdownloader() { nohup java -jar ~/.scripts/JDownloader/JDownloader.jar >/dev/null 2>&1& }


date-global() {
# use tzselect to find timezone listing
    local SHOWTIMEZONE="$(
    alias date='date +"%a %D %l:%M %p"'
    echo "Current Location:" "$(date)"
    echo "USA LosAngeles:" "$(TZ='America/Los_Angeles' date)"
    echo "Canada Alberta:" "$(TZ='America/Edmonton' date)"
    echo "USA NewYork:" "$(TZ='America/New_York' date)"
    echo "EU London:" "$(TZ='Europe/London' date)"
    echo "Bangladesh Dhaka:" "$(TZ='Asia/Dhaka' date)"
    echo "China Xinjiang:" "$(TZ='Asia/Urumqi' date)"
    echo "Vietnam Saigon:" "$(TZ='Asia/Ho_Chi_Minh' date)"
    echo "China Beijing:" "$(TZ='Asia/Shanghai' date)"
    echo "HK HongKong:" "$(TZ='Asia/Hong_Kong' date)"
    echo "Japan Tokyo:" "$(TZ='Asia/Tokyo' date)"
    )"
    echo "$SHOWTIMEZONE" | column -t
}

# http://stackoverflow.com/a/13541721
git-sync-ignorelist() { git rm --cached `git ls-files -i --exclude-from=.gitignore` ;}

mp3cut() {

	# example: cut from 5s to 10s; mpgtx -s file.mp3 "[00:05-00:10]" -b file-output
	mpgtx -s "$1" "["$2":"$3"-"$4":"$5"]" -b "${1%.*}"-output."${1##*.}"

	}

#audiobooks
mpv-saveposition() { mpv --save-position-on-quit "$@" ;}
mplayer-createplaylist() { ls --ignore="*.m3u" --ignore="*.pos" | grep -i "$1" | sort -u > "$1".m3u ;}



#List files only, the advantage is that it works just like normal 'ls' so you could do 'lf -al | grep blah' etc.
lf () {
ls -1p $@ | grep -v '\/$'
}


qrdecode() { zbarimg -S\*.disable -Sqrcode.enable "$1" -q | sed '1s/^[^:]\+://'; }

#checkexist() {
#if which lynx >/dev/null; then
#    echo exists
#else
#    echo does not exist
#fi
#}

pvcp() {
	# a better cp with pv; http://jrenard.info/blog/a-better-cp-with-pv.html
	SOURCE=$1

	if [ -d $2 ]
	then
	    DESTINATION=$2/`basename $SOURCE`
	else
	    DESTINATION=$2
	fi

	pv ${SOURCE} | > ${DESTINATION}
}

# http://www.falsyana.com/2010/linux/cp-mv-with-a-progress-bar/
# http://unix.stackexchange.com/questions/2577/move-files-with-progress-bar
# slower then regular mv or cp
#alias cp='rsync --progress -ah'
#alias mv='rsync --progress -ah --remove-sent-files'



# Readablity CLI
# Removes junk from websites and just give you the body of the post
# requires python2-2.7 & python2-chardet
# https://github.com/buriy/python-readability
# ebook-convert from http://manual.calibre-ebook.com/cli/ebook-convert.html
readability2html() {
	python2.7 -m readability.readability -u "$1" > /tmp/"$2".html
	ebook-convert /tmp/"$2".html ~/Downloads/"$2".epub
}

compile-cpp() { gcc -Wall -o "${1%.*}" "$1" ;}

#mplayer playlist
mplist(){ mplayer -playlist <(tree -aif "$1" | awk '/\.(mp3|wav|ogg|avi|mpg|iso)$/'); }
#mplist(){ mplayer -playlist <(find "$1" -regex '.*\.\(mp3\|wav\|ogg\|avi\|mpg\|iso\)' | sort); }

zombie-process() { ps aux | awk '{ print $8 " " $2 }' | grep -w Z ;}

getexe() {
	TEMPFILE1=$(mktemp)
	TEMPFILE2=$(mktemp)
	INPUTFILE="$1"
	        # Extract raw version resource:
        wrestool --extract --raw --type=version "$INPUTFILE" > $TEMPFILE1

        if [ -s $TEMPFILE1 ]
        then
                # Search for a sane version string.
                # This (especially the final regexp) took me really long time to figure out. Am I that lame?
                VERSION=$(< $TEMPFILE1 \
                        tr '\0, ' '\t.\0' \
                        | sed 's/\t\t/_/g' \
                        | tr -c -d '[:print:]' \
                        | sed -r -n 's/.*Version[^0-9]*([0-9]+\.[0-9]+(\.[0-9][0-9]?)?).*/\1/p'
                )
		echo $VERSION
        fi
}
function etym(){
    for term in "$@"
    do
        url="etymonline.com/index.php?term=$term"
        curl -s $url | grep "<dd " |
                sed -e 's/<a[^>]*>\([^<]*\)<[^>]*>/:\1:/g' -e 's/<[^>]*>//g' |
                fold -sw `[ $COLUMNS -lt 80 ] && echo $COLUMNS || echo 79 `
        echo
    done
}
DISTRO=$(cat /etc/*-release | head -1 | awk -F\" '{print $(NF-1)}')
alias m-windowmanager="wmctrl -m | grep "Name:" | awk '{print $2}'"
mbuffer() {
	mplayer -vo fbdev $1 -fs -subcp ${2:-cp1251} -vf scale=${3:-1280:720}
}
# MPlayer on /dev/ttyN
alias fbmplayer='mplayer -vo fbdev2 -vf scale=1280:1024 "$@"'
lanshare() {
	echo "Test Server: http://127.0.0.1:8000 or http://localhost:8000"
	echo "Server IP (LAN): $(ifconfig eth0 | awk '/inet / {print $2}' | cut -d\: -f2):8000"
	echo "Server IP (WWW): $(curl -s http://checkip.dyndns.org/ | grep -o "[[:digit:].]\+"):8000"
	echo "Hit Ctrl+C to Stop Sharing"
	python2 -m SimpleHTTPServer
}


menu() {
  { tput smcup ; clear; } >/dev/tty
  [ -n "$LINES" ] || local LINES=$(tput lines)
  local val; val=$(slmenu -i -l $((LINES-1)) -p "${1:->}")
  local ret=$?
  tput rmcup > /dev/tty
  printf %s\\n "$val"
  return $ret
}
normalizeaudio()       { sox --norm "$1" "${1%.*}"."$0"."${1##*.}" ;}
# usage: combine-zip file.zip -- join splited zip (z01, z02 ..etc)
unsplit_zip() { zip -s- "$1" -O "${1%.*}"-unsplited.zip ;}

# usage: combine-001 file.avi.001 -- only requires the 1st file
unsplit_001() { lxsplit -j "$1" ;}

# mkvinfo filename.mkv
# mkvextract tracks filename.mkv 2:subs.ass
# mkvextract tracks filename.mkv 2:subs.srt
# mkvextract attachments filename.mkv 1:BAARS___.TTF
# put the font files into ~/.fonts and then run `fc-cache -vf'
# cd to flac
# flac to wav
# wav to cd
# split bin/cue audio

# -b = -b:v
# -av = audio bitrate

# gif, vob, m4v, mov, wmv, wma, vob, cd_mp3, cd_flac, avi
# mp4 subtitles burn in hardcoded

web2png() { CutyCapt --url="$1" --out=web2png_output.png ;}
# url shortener
tiny-isgd() { wget -qO - "http://is.gd/create.php?format=simple&url=$1" ;}
# create qrcode
qrcode() { link=$(echo "http://qrcode.kaywa.com/img.php?s=8&d=$@" | sed 's/ /+/g'); $BROWSER $link ;}
quicktime() { mplayer -rtsp-stream-over-tcp -user-agent QuickTime/7.6.4 ;}	# -cache 3072

# http://sourceforge.net/projects/lesspipe/
# tutorial video: https://www.youtube.com/watch?v=ZEHxG1OhIFo
#export LESSOPEN='|/usr/bin/lesspipe.sh %s'
#export LESS='-R'

# Source-Highlight
#export LESSOPEN='|/usr/bin/src-hilite-lesspipe.sh %s'
#export LESS='R'

# http://zameermanji.com/blog/2012/12/30/using-vim-as-manpager/
# export MANPAGER="/bin/sh -c \"col -b | vim -c 'set ft=man ts=8 nomod nolist nonu noma' -\""

 # Goes up many dirs as the number passed as argument, if none goes up by 1 by default


# REMIND ME, ITS IMPORTANT!
    # usage: remindme <time> <text>
    # e.g.: remindme 10m "omg, the pizza"
    remindme() { sleep $1 && zenity --info --text "$2" & }
  #

# https://github.com/Daenyth/dotfiles/blob/master/.bashrc
# Environment variables
# if have less; then
#     export PAGER='less'
#     unset LESSCHARSET # Fix manpages looking funky
#     export LESS='--ignore-case --line-numbers --hilite-unread  -z-4 --hilite-search --LONG-PROMPT --no-init --quit-if-one-screen --quit-on-intr --RAW-CONTROL-CHARS'
#     # Colorized less, woohoo
#     export LESS_TERMCAP_mb=$'\E[01;31m'
#     export LESS_TERMCAP_md=$'\E[01;31m'
#     export LESS_TERMCAP_me=$'\E[0m'
#     export LESS_TERMCAP_se=$'\E[0m'
#     export LESS_TERMCAP_so=$'\E[01;44;33m'
#     export LESS_TERMCAP_ue=$'\E[0m'
#     export LESS_TERMCAP_us=$'\E[01;32m'
# elif have most; then
#     export PAGER='most'
# else
#     export PAGER='more'
# fi




#
# Run a command x times
# http://www.stefanoforenza.com/how-to-repeat-a-shell-command-n-times/
#
runx() {
    n=$1
    shift
    while [ $(( n -= 1 )) -ge 0 ]
    do
        "$@"
    done
}

# ask() -- ask user a yes/no question
function ask()
{
    echo -n "$@" '[y/N] ' ; read ans
    case "$ans" in
        y*|Y*) return 0 ;;
        *) return 1 ;;
    esac
}


# vim: set filetype=sh:
alias cue2flac="find -type f -name '*.cue' -execdir cue2tracks -R -n 19 -o '%N. %p ─ %t' {} \;"


# Git Shortcuts! ##
# alias g="git"
# alias gr="git rm -rf"
# alias gs="git status"
# alias ga="g add"
# alias gc="git commit -m"
# alias gp="git push origin master"
# alias gl="git pull origin master"

# load rbenv if available
if command -v rbenv >/dev/null; then
  eval "$(rbenv init - --no-rehash)"
fi
# https://github.com/nicknisi/dotfiles/blob/master/zsh/functions.zsh
# print available colors and their numbers
function colours() {
    for i in {0..255}; do
        printf "\x1b[38;5;${i}m colour${i}"
        if (( $i % 5 == 0 )); then
            printf "\n"
        else
            printf "\t"
        fi
    done
}


# Escape UTF-8 characters into their 3-byte format
function escape() {
    printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
    echo # newline
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
    perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
    echo # newline
}




function extract {
 if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
 else
    if [ -f "$1" ] ; then
        NAME=${1%.*}
        #mkdir $NAME && cd $NAME
        case "$1" in
          *.tar.bz2)   tar xvjf ./"$1"    ;;
          *.tar.gz)    tar xvzf ./"$1"    ;;
          *.tar.xz)    tar xvJf ./"$1"    ;;
          *.lzma)      unlzma ./"$1"      ;;
          *.bz2)       bunzip2 ./"$1"     ;;
          *.rar)       unrar x -ad ./"$1" ;;
          *.gz)        gunzip ./"$1"      ;;
          *.tar)       tar xvf ./"$1"     ;;
          *.tbz2)      tar xvjf ./"$1"    ;;
          *.tgz)       tar xvzf ./"$1"    ;;
          *.zip)       unzip ./"$1"       ;;
          *.Z)         uncompress ./"$1"  ;;
          *.7z)        7z x ./"$1"        ;;
          *.xz)        unxz ./"$1"        ;;
          *.exe)       cabextract ./"$1"  ;;
          *)           echo "extract: '$1' - unknown archive method" ;;
        esac
    else
        echo "'$1' - file does not exist"
    fi
fi
}




function thumbify() {
    if [ -f $1 ]; then
        cp $1 thumb-$1
        if [ $2 ]; then
            mogrify -resize $2 thumb-$1
        else
            mogrify -resize 250x250 thumb-$1
        fi
    else
        echo "$1: not a regular file"
    fi
}


alias cadate='TZ=America/Los_Angeles date'
alias frdate='TZ=Europe/Paris date'
alias ozdate='TZ=Australia/Brisbane date'

alias myip='wget -qO- http://ipecho.net/plain ; echo'

# no line wrapping in less
export LESS=$LESS" -S"




# Shortcut to get the disk size of a directory and contents
sizeof() {
    du -ch "$1" | grep total
}

# Shortcut to change directory and list contents
cdls() {
    if [ -d "$1" ]; then
        cd "$1"
        ls
    else
        echo "bash: cl: '$1': Directory not found"
    fi
}



# super stealth background launch
function daemon
{
    (exec "$@" >&/dev/null &)
}

  # Do something and receive a desktop alert when it completes `sudo apt-get install something | alert`
  alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'


  # Search for files and page it
  function search() { find . -iname "*$@*" | less; }
    # nohup "$@" > /dev/null 2>&1 < /dev/null &


            # *.dmg)      hdiutil mount $1                    ;;





function lsofg()
{
    if [ $# -lt 1 ] || [ $# -gt 1 ]; then
        echo "grep lsof"
        echo "usage: losfg [port/program/whatever]"
    else
        lsof | grep -i $1 | less
    fi
}



function psg()
{
    if [ $# -lt 1 ] || [ $# -gt 1 ]; then
        echo "grep running processes"
        echo "usage: psg [process]"
    else
        ps aux | grep USER | grep -v grep
        ps aux | grep -i $1 | grep -v grep
    fi
}

###### convert binaries
# copyright 2007 - 2010 Christopher Bratusek
function bin2all() {
	if [[ $1 ]]; then
		echo "binary $1 = octal $(bin2oct $1)"
		echo "binary $1 = decimal $(bin2dec $1)"
		echo "binary $1 = hexadecimal $(bin2hex $1)"
		echo "binary $1 = base32 $(bin2b32 $1)"
		echo "binary $1 = base64 $(bin2b64 $1)"
		echo "binary $1 = ascii $(bin2asc $1)"
	fi
}

###### DVD to ISO
function dvd2iso()
{
# to get desired device
df -h -x tmpfs -x usbfs
echo -n "Using the information in the terminal window, please enter the appropriate DVD drive:
"
read DVDDEVICE
echo -n "Please enter a name for the ISO file you will create:
"
read XVIDNAME
pv "$DVDDEVICE" | dd of="$XVIDNAME".iso
}

###### DVD to VOB
# requires vobcopy: sudo apt-get install vobcopy
# alias dvd2vob='vobcopy -i /dev/dvd -o ~/ -l'

function daemon()
{
    (exec "$@" >&/dev/null &)
}

function geniso() {
	# copyright 2007 - 2010 Christopher Bratusek
	if [[ $CD_WRITER ]]; then
		dd $DD_OPTS if=$CD_WRITER of="$1"
	else	dd $DD_OPTS if=/dev/dvdrw of="$1"
	fi
}

function lowercase()
{
    for file ; do
        filename=${file##*/}
        case "$filename" in
        */*) dirname==${file%/*} ;;
        *) dirname=.;;
        esac
        nf=$(echo $filename | tr A-Z a-z)
        newname="${dirname}/${nf}"
        if [ "$nf" != "$filename" ]; then
            mv "$file" "$newname"
            echo "lowercase: $file --> $newname"
        else
            echo "lowercase: $file not changed."
        fi
    done
}


# function rip() {
# handbrake -i /dev/dvd -o ${HOME}/${1}.mp4 -L -U -F -f mp4 -e x264 -b 4000 -B 192
# }

##################################################
# Slow down CPU and IO for process and its 	 #
# offsprings					 #
##################################################

###### requires gawk: sudo apt-get install gawk
function slow2() { ionice -c3 renice -n 20 $(pstree `pidof $1` -p -a -u -A|gawk 'BEGIN{FS=","}{print $2}'|cut -f1 -d " ") ; }




##################################################
# ISO-writer					 #
##################################################

function writeiso() {
	# copyright 2007 - 2010 Christopher Bratusek
	if [[ $CD_WRITER ]]; then
		cdrecord dev=$CD_WRITER "$1"
	else	cdrecord deV=/dev/dvdrw "$1"
	fi
}

alias cdcopy='pv /dev/cdrom | dd of=cd.iso'						# to backup a cd from a cdrom drive to an ISO

alias diskcopy='pv /dev/dvd | dd of=disk.iso'						# to backup the disc (cd/dvd/whatever) to an ISO
alias floppycopy='pv /dev/fd0 | dd of=floppy.image'					# to duplicate a floppy disk to hard drive image file
alias partitioncopy='sudo pv /dev/sda1 | dd of=/dev/sda2 bs=4096 conv=notrunc,noerror'	# to duplicate one hard disk partition to another
alias restore-sda='sudo pv /dev/hda | dd of=/dev/sda bs=64k conv=notrunc,noerror'	# to restore from ??? to the existing drive
alias scsicopy='sudo pv /dev/scd0 | dd of=cd.iso'					# if cdrom is scsi}

alias extundelete-d='sudo extundelete "$1" --restore-directory "$2"'		# restore all files possible from specified dir.  ("$2" = path/to/directory)
alias extundelete-f='sudo extundelete "$1" --restore-files "$2"'		# restore list of files (use to restore single file) ("$2" = filename)
alias extundelete-r='sudo extundelete "$1" --restore-all'			# restore all files possible to undelete
alias blankcd='cdrecord -v dev=/dev/cdrom blank=fast gracetime=3'
alias blankdvd='cdrecord -v dev=/dev/dvd blank=fast gracetime=3'
alias rdp='rdesktop -u "$USER" -g 1600x1200 -D -r disk:home=/home -r clipboard:PRIMARYCLIPBOARD'	# quick full screen RDP connection

##################################################
# Remastersys stuff				 #
##################################################

alias remastersys-backup-custom='sudo remastersys backup custom.iso'	# to make a livecd/dvd backup and call the iso custom.iso
alias remastersys-backup='sudo remastersys backup'			# to make a livecd/dvd backup of your system
alias remastersys-clean='sudo remastersys clean'			# to clean up temporary files of remastersys
alias remastersys-dist-cdfs='sudo remastersys dist cdfs'		# to make a distributable livecd/dvd filesystem only
alias remastersys-dist-custom='sudo remastersys dist iso custom.iso'	# to make a distributable iso named custom.iso but only if cdfs is present
alias remastersys-dist='sudo remastersys dist'				# to make a distributable livecd/dvd of your system


# Kill all the tabs in Chrome to free up memory
# [C] explained: http://www.commandlinefu.com/commands/view/402/exclude-grep-from-your-grepped-output-of-ps-alias-included-in-description
alias chromekill="ps ux | grep '[C]hrome Helper --type=renderer' | grep -v extension-process | tr -s ' ' | cut -d ' ' -f2 | xargs kill"


resize_images() {
	if [ $# -lt 1 ]; then
		echo -e "Usage: $0 <file_name>"
		echo -e "\nsingle:   $0 file.m4a"
		echo -e "\nmultiple: $0 file1.m4a file2.m4a file3.m4a"
		echo -e "\nwildcard: $0 *"
		echo -e "\nwildcard: $0 *.jpg"
		return 1
	fi

	myArray=( "${@:2}" )
	for arg in "${myArray[@]}"; do
	convert "$arg" -monitor -resize "$1" "${arg%.*}""$1"_resized."${arg##*.}"
	done
}
# If piping something in, copy it.
# If just doing `clip`, paste it.
function clip { [ -t 0 ] && pbpaste || pbcopy;}


sbg(){
  ("$@" & disown ) >/dev/null 2>&1 </dev/null
  which "$1" >/dev/null 2>&1
}

alias netlisten='lsof -i -P | grep LISTEN'   #listening ports
#internetinfo | Usage: ii
function ii()   # get current host related info
{
    echo -e "\n${RED}Kernel Information:$NC " ; uname -a
    echo -e "\n${RED}Users logged on:$NC " ; w -h
    echo -e "\n${RED}Current date :$NC " ; date
    echo -e "\n${RED}Machine stats :$NC " ; uptime
    echo -e "\n${RED}Memory stats :$NC " ; free
    echo -e "\n${RED}Disk Usage :$NC " ; df -Th
    echo -e "\n${RED}LAN Information :$NC" ; netinfoLAN
    echo
}

dd_clone() {
	if [ $# -lt 2 ]; then
		echo -e "image or clone <image|drive|parition> including free space and verify data"
		echo -e "\nUsage: $0 <input> <output>"
		echo -e "\nExample: $0 /dev/sdX /tmp/output.dd"
		echo -e "\n$0 /dev/sdX /dev/sdY"
		echo -e "\n$0 /tmp/output.img /dev/sdX"
		echo -e "\n$0 /dev/cdrom /tmp/output.iso"
		echo -e "\nList All Drives: sudo fdisk -l"
		echo -e "\nRequirement: pv dcfldd"
		return 1
	fi

	sudo sh -c "
		# clone
		pv -tpreb "$1" | dcfldd of="$2" bs=4M
		# verify data match or mismatch
		dcfldd if="$1" vf="$2"
	"
}

verify_md5sum() { pv "$1" | md5sum ;}



m-disconnect() { nmcli d disconnect enp5s0 ;}
m-connect() { nmcli d connect enp5s0 ;}


lynx-mp3() { lynx -dump "$1" | awk '/http/ && /mp3/ {print $2}' ;}

# nap() {
# 	~/.bin/nap-1.5.4.linux-amd64/nap \
# 	-r \
# 	-s share-it.loginto.me:3456 \
# 	-s 108.19.45.179:7777 \
# 	-s 108.19.45.179:8888 \
# 	-s spica.sytes.net:8888 \
# 	-s 84.24.69.59:6436 \
# 	-s 98.202.75.0:8877 \
# 	-s 87.13.117.33:8888 \
# 	-s 79.103.107.173:5995 \
# 	-s 79.31.239.174:8888 \
#         -s 95.248.174.8:8888 \
#         -s 82.53.30.153:3456 \
#         -s 80.181.212.54:8888 \
# 	"$@"
# }

nap() {	~/.bin/nap-1.5.4.linux-amd64/nap $@ ;}


# http://twit.altervista.org/linux-2/how-to-copy-an-entire-commandline-using-just-the-keyboard.html
# alias copylastcommand='echo "!!" | xclip -selection clipboard'
# alias copylastcommand='history -p !! | xsel -ib'
# alias copylastcommand='$(history -p !-1) | xsel -ib'

color_term() {
    for i in {0..255} ; do
        printf "\x1b[38;5;${i}mcolour${i}\n"
    done
}



mpv-transparent() {
    # prerequisite:
    #   1. enable compositor
    #   2. create devilspie for mpv (window_class, opacity, stick)

    # start devilspie
    # nohup 'devilspie' >/dev/null 2>&1&
    (devilspie) &

    # kill devilspie (after devilspie starts, it still works even if you kill the process)
    (sleep 5 && killall devilspie) &

    # start mpv bottom right corner
    mpv --ontop --no-border --on-all-workspaces --autofit=640x360 --geometry=99%:99% "$@"

    # start mpv bottom left corner
    # mpv --ontop --no-border --on-all-workspaces --autofit=640x360 --geometry=1%:99% "$@"

    # start mpv top right corner
    # mpv --ontop --no-border --on-all-workspaces --autofit=640x360 --geometry=99%:1% "$@"

    # start mpv top left corner
    # mpv --ontop --no-border --on-all-workspaces --autofit=640x360 --geometry=1%:1% "$@"

}


wxfce() {
    # for xfce =>4.12
    # monitor1
    xfconf-query -c xfce4-desktop -p /backdrop/screen0/monitor0/workspace0/last-image -s "$(find ~/Pictures/Wallpapers -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | sort -R | head -1)"

    # monitor2
    xfconf-query -c xfce4-desktop -p /backdrop/screen0/monitor1/workspace0/last-image -s "$(find ~/Pictures/Wallpapers -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | sort -R | head -1)"
}

mpv-secondmonitor() {
  title_name="$(wmctrl -pl | grep $(pidof mpv) | cut -d'-' -f2-)"
  (sleep 5 && wmctrl -r "$title_name" -e 0,1920,0,1920,1080 && wmctrl -r "$title_name" -b toggle,fullscreen) &
  mpv "$@"
}



#-------- Video Thumbnail Gallery {{{
#------------------------------------------------------

vcsi-width-3x5() {
	vcsi "$2" -t -w "$1" --background-color 000000 --metadata-font-color ffffff -g 3x5 --end-delay-percent 20
}
convert2image_jpg() {
    if [ $# -lt 1 ]
    then
        echo -e "convert images to jpg"
        echo -e "\nUsage:\n$0 <picture>"
        echo -e "\nexample:\n$0 pic1.png pic2.bmp pic3.png"
        echo -e "\n$0 *.png"

        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        convert -quality 50% "$arg" "${arg%.*}.jpg"
    done
}

vcsi-1280-3x4() {
    if [ $# -lt 1 ]
    then
        echo -e "vcsi"
        echo -e "\nUsage:\n$0 <picture>"
        echo -e "\nexample:\n$0 pic1.png pic2.png pic3.png"
        echo -e "\n$0 *.jpg"

        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        vcsi "$arg" -t -w 1024 --background-color 000000 --metadata-font-color ffffff -g 2x5 --end-delay-percent 20
    done
}

vcsi-auto-3x5() {
	eval $(ffprobe -v error -of flat=s=_ -select_streams v:0 -show_entries stream=height,width "$1")
	get_width=${streams_stream_0_width}
	vcsi "$1" -t -w "$get_width" --background-color 000000 --metadata-font-color ffffff -g 3x5 --end-delay-percent 20
}

vsheet-tonight-single() {
    if [ $# -lt 1 ]
    then
        echo -e "generate video sheet and add it to calibre"
        echo -e "\nUsage:\n$0 video.mp4"

        return 1
    fi

        # get width of video file
	eval $(ffprobe -v error -of flat=s=_ -select_streams v:0 -show_entries stream=height,width "$1")
	get_width=${streams_stream_0_width}
        # generate video sheet
	vcsi "$1" -t -w "$get_width" --background-color 000000 --metadata-font-color ffffff -g 2x5 --end-delay-percent 20

        # convert to jpg
        concat_jpg "$1".png
        # reduce jpg file size
	image-resize-1920x1080 concatoutput.jpg
        # rename to cover.jpg
	mv concatoutput_1920x1080_resized.jpg cover.jpg

        # add to calibre
        AUTHORS=$(echo "$1" | awk -F'_' '{print $3}' | cut -d' ' -f1,2 )
        TITLENAME="$1"

        cmx-add $cbsuper -e -a "$AUTHORS" -t "$TITLENAME" -T "korn" -c "cover.jpg"

        # delete leftovers
        garbage "${1}.png"
        garbage concatoutput.jpg
        garbage cover.jpg

}

vsheet-tonight() {
    if [ $# -lt 1 ]
    then
        echo -e "generate video sheet and add it to calibre"
        echo -e "\nUsage:\n$0 video.mp4"

        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
      vsheet-tonight-single "$arg"
    done
}

vsheet-fam-single() {
    if [ $# -lt 1 ]
    then
        echo -e "generate video sheet and add it to calibre"
        echo -e "\nUsage:\n$0 video.mp4"

        return 1
    fi

        # get width of video file
	eval $(ffprobe -v error -of flat=s=_ -select_streams v:0 -show_entries stream=height,width "$1")
	get_width=${streams_stream_0_width}
        # generate video sheet
	vcsi "$1" -t -w "$get_width" --background-color 000000 --metadata-font-color ffffff -g 2x5 --end-delay-percent 20

        # convert to jpg
        concat_jpg "$1".png
        # reduce jpg file size
	image-resize-1920x1080 concatoutput.jpg
        # rename to cover.jpg
	mv concatoutput_1920x1080_resized.jpg cover.jpg

        # add to calibre
        AUTHORS=$(echo "$1" | awk -F'_full_hi_' '{print $1}' | cut -d_ -f2- | sed 's:_: :g' | sed -e "s/\b\(.\)/\u\1/g" | sed 's/[0-9]*//g')
        TITLENAME="$1"

        cmx-add $cbsuper -e -a "$AUTHORS" -t "$TITLENAME" -T "korn" -c "cover.jpg"

        # delete leftovers
        garbage "${1}.png"
        garbage concatoutput.jpg
        garbage cover.jpg

}

vsheet-fam() {
    if [ $# -lt 1 ]
    then
        echo -e "generate video sheet and add it to calibre"
        echo -e "\nUsage:\n$0 video.mp4"

        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
      vsheet-super "$arg"
    done
}

vsheet-mofos-single() {
    if [ $# -lt 1 ]
    then
        echo -e "generate video sheet and add it to calibre"
        echo -e "\nUsage:\n$0 video.mp4"

        return 1
    fi

        # get width of video file
	eval $(ffprobe -v error -of flat=s=_ -select_streams v:0 -show_entries stream=height,width "$1")
	get_width=${streams_stream_0_width}
        # generate video sheet
	vcsi "$1" -t -w "$get_width" --background-color 000000 --metadata-font-color ffffff -g 2x5 --end-delay-percent 20

        # convert to jpg
        concat_jpg "$1".png
        # reduce jpg file size
	image-resize-1920x1080 concatoutput.jpg
        # rename to cover.jpg
	mv concatoutput_1920x1080_resized.jpg cover.jpg

        # add to calibre
        AUTHORS=$( echo "$1" | awk -F_ '{print $2,$3}' | sed -e "s/\b\(.\)/\u\1/g" | sed 's/[0-9]*//g' )
        TITLENAME="$1"
        cmx-add $cbsuper -e -a "$AUTHORS" -t "$TITLENAME" -T "korn" -c "cover.jpg"

        # delete leftovers
        garbage "${1}.png"
        garbage concatoutput.jpg
        garbage cover.jpg

}

vsheet-mofos() {
    if [ $# -lt 1 ]
    then
        echo -e "generate video sheet and add it to calibre"
        echo -e "\nUsage:\n$0 video.mp4"

        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
      vsheet-mofos-single "$arg"
    done
}

vsheet-super() {
    if [ $# -lt 1 ]
    then
        echo -e "generate video sheet and add it to calibre"
        echo -e "\nUsage:\n$0 video.mp4"

        return 1
    fi

        # get width of video file
	eval $(ffprobe -v error -of flat=s=_ -select_streams v:0 -show_entries stream=height,width "$1")
	get_width=${streams_stream_0_width}
        # generate video sheet
	vcsi "$1" -t -w "$get_width" --background-color 000000 --metadata-font-color ffffff -g 2x5 --end-delay-percent 20

        # convert to jpg
        concat_jpg "$1".png
        # reduce jpg file size
	image-resize-1920x1080 concatoutput.jpg
        # rename to cover.jpg
	mv concatoutput_1920x1080_resized.jpg cover.jpg

        # add to calibre
        AUTHORS=$( echo "${1%.*}" | awk -F- '{print $1}')
        TITLENAME=$( echo "${1%.*}" | cut -d "-" -f2- )
        # cmx-add $cbsuper -e -a "$AUTHORS" -t "$arg" -T "korn,pov,amatuer" -c "${arg}.jpg"
        # cmx-add $cbsuper -e -t "${1%.*}" -T "korn" -c "cover.jpg"
        cmx-add $cbsuper -e -a "$AUTHORS" -t "$TITLENAME" -T "korn" -c "cover.jpg"

        # delete leftovers
        garbage "${1}.png"
        garbage concatoutput.jpg
        garbage cover.jpg

}


vsheet-arg() {
    if [ $# -lt 1 ]
    then
        echo -e "generate video sheet and add it to calibre"
        echo -e "\nUsage:\n$0 video.mp4"

        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
      vsheet-super "$arg"
    done
}

# http://productivefoss.blogspot.com.au/2015/05/exploring-notification-system-ii-how-to.html?m=1
# http://www.webupd8.org/2016/03/translate-any-text-you-select-on-your.html


publicpickups() {
    if [ $# -lt 1 ]
    then
        echo -e "resize pictures to another resolution"
        echo -e "\nUsage:\n$0 <picture>"
        echo -e "\nexample:\n$0 pic1.png pic2.png pic3.png"
        echo -e "\n$0 *.jpg"

        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        # AUTHORS=$( echo "$arg" | awk -F_ '{print $2 " " $3}' | sed -e "s/\b\(.\)/\u\1/g" )
        AUTHORS=$( echo "$arg" | awk -F_ '{print $2}' | sed -e "s/\b\(.\)/\u\1/g" )
        cmx-add $cbsuper -e -a "$AUTHORS" -t "$arg" -T "korn,pov,amatuer" -c "${arg}.jpg"
    done
}

# http://stackoverflow.com/a/30684898
rename2jpg() {
    for f in * ; do
      if [[ $(file -b --mime-type "$f") = image/jpeg ]] ; then
        mv "$f" "${f/%.*/.jpg}"
      fi
    done
}
# }}}


# http://www.tecmint.com/ffmpeg-commands-for-video-audio-and-image-conversion-in-linux/
yt2banneraudio() {
    if [ $# -lt 2 ]
    then
        echo -e "Use ffmpeg to create a banner audio (audio + image to video)"
        echo -e "\nUsage:\n$0 <image file> <audio file>"
        echo -e "\nExample:\n$0 cover.png file.mp3 \n"

        return 1
    fi
    ffmpeg -loop 1 -i "$1" -i "$2" -c:v libx264 -c:a aac -strict experimental -b:a 192k -shortest "${2%.*}".mp4
}

# convert video to gif animation
# http://superuser.com/a/730389
# http://superuser.com/a/841379
convert_to_gifv() {
    if [ $# -lt 1 ]
    then
        echo -e "convert video to animated gif"
        echo -e "\nUsage:\n$0 <file> <resolution>"
        echo -e "\nexample:\n$0 file.mkv \n"
        echo -e "$0 file.mkv 320\n"
        echo -e "$0 file.mkv 720\n"
        echo -e "$0 file.mkv 1080\n"
        echo -e "Note: animated gif size are usually x2 or x3 the size of the original video file"

        return 1
    fi

    # get video resolution (height)
    eval $(ffprobe -v error -of flat=s=_ -select_streams v:0 -show_entries stream=height,width "$1")
    size=${streams_stream_0_height}

    ffmpeg -i "$1" -vf scale="${2:-$size}":-1 -r 10 -f image2pipe -vcodec ppm - | convert -delay 5 -loop 0 - "${1%.*}"-gifvid"$2".gif
}

tmux-locate-pane() {
  tempfile=/tmp/tmux-locate-pane.txt
  echo "@locate " > "$tempfile"; $EDITOR "$tempfile"; source "$tempfile" 
}

cbrit() { rar a -r "${1%/}.cbr" "$1" ;}
cbzit() { zip -r "${1%/}.cbz" "$1" ;}

#Compression (cd into dir, will compress every single folder)
alias tardir='for i in *; do if [ -d "$i" ]; then tar czf "$i".tar.gz  "$i"; fi; done'
alias rardir='find * -maxdepth 0 -type d -exec rar a {}.rar {} \;'
alias zipdir='find * -maxdepth 0 -type d -exec zip -r {}.zip {} \;'
	#Warning: removes dir after compression (below)
alias rarkill='find * -maxdepth 0 -type d -exec rar a -df {}.rar {} \;'
#http://www.commandlinefu.com/commands/view/5198
# $ ls | while read filename; do tar -czvf "$filename".tar.gz "$filename"; rm "$filename"; done
# compress folder into cbr/cbz



atool-delete() {
	local zipfilename="$1"
	local deletefile="$(atool -l "$zipfilename" | tail -n +4 | head -n -2 | cut -d':' -f2 | cut -d' ' -f4- | sed 's/\ /\\ /g' | sed -n "${2}p")"

	zip -d "$zipfilename" "$deletefile"


	}

atool-zip-delete() { zip -d "$@" \*.txt ;}

# https://www.reddit.com/r/archlinux/comments/42784v/what_are_your_bash_aliasesfunctions_for_ffmpeg/cz88h5f
ffmpeg-stereo () {
        ffmpeg -i "$1" -i "$2" -filter_complex "[0:a][1:a]amerge=inputs=2[aout]" -map "[aout]" -c:a flac "$3"
}

# https://www.reddit.com/r/archlinux/comments/423wr9/is_anyone_having_trouble_with_reflector/
# alias updatemirrors='sudo reflector --verbose --country 'United States' -l 200 -p http --sort rate --save /etc/pacman.d/mirrorlist'

# Shortcut to generate an updated Arch Linux mirrorlist - requires reflector
reflector-generate() {
    reflector --country "United States" -l 200 -p http --sort rate --save "$1"
}

mpd-kill() { kill -9 $(cat ~/.mpd/mpd.pid) ;}
mpd-restart() { kill -9 $(cat ~/.mpd/mpd.pid) && mpd ;}
lltag-artist() { lltag --yes -a "$1" "$2" ;}
lltag-album() { lltag --yes -A "$1" "$2" ;}
lltag-date() { lltag --yes -d "$1" "$2" ;}
lltag-genre() { lltag --yes -g "$1" "$2" ;}
lltag-comment() { lltag --yes -c "$1" "$2" ;}
lltag-number() { lltag --yes -n "$1" "$2" ;}
lltag-show() { lltag -S "$1" ;}
lltag-rename() { lltag --yes --rename '%n - %t' "$1" ;}


#Mp3 id3 tagger

# #-------- Convert to Archive (ZIP, RAR, TAR, CBR, CBZ) {{{
# #------------------------------------------------------
#
# # to see required install for different formats
# # $ patool formats
# convert2archive-7z() { patool repack "$1" "${1%.*}".7z ;}
# convert2archive-ace() { patool repack "$1" "${1%.*}".ace ;}
# convert2archive-jar() { patool repack "$1" "${1%.*}".jar ;}
# convert2archive-rar() { patool repack "$1" "${1%.*}".rar ;}
# convert2archive-tar() { patool repack "$1" "${1%.*}".tar ;}
# convert2archive-xz() { patool repack "$1" "${1%.*}".xz ;}
# convert2archive-zip() { patool repack "$1" "${1%.*}".zip ;}
# convert2archive-targz() { patool repack "$1" "${1%.*}".tar.gz ;}
# convert2archive-tarbz2() { patool repack "$1" "${1%.*}".tar.bz2 ;}
# convert2archive-tarlzma() { patool repack "$1" "${1%.*}".tar.lzma ;}
#
# archive-create-zip() { patool --verbose create myarchive.zip "$@" ;}
# archive-create-tar() { patool --verbose create myarchive.tar "$@" ;}
# archive-create-targz() { patool --verbose create myarchive.tar.gz "$@" ;}
# archive-create-7z() { patool --verbose create myarchive.7z "$@" ;}


# # https://en.wikipedia.org/wiki/Comic_book_archive
# convert2archive-cbz() {
#     if [ $# -lt 1 ]; then
#         echo -e "Usage: $0 <file_name>"
#         echo -e "\nsingle:   $0 file.gz"
#         echo -e "\nmultiple: $0 file1.gz file2.gz file3.gz"
#         echo -e "\nwildcard: $0 *.gz"
#     return 1
#     fi
#
#     myArray=( "$@" )
#     for arg in "${myArray[@]}"; do
#         if [[ ! -f "${arg%.*}".zip && ! -f "${arg%.*}".cbz ]]; then
#             patool repack "$arg" "${arg%.*}".zip && mv "${arg%.*}".zip "${arg%.*}".cbz
#         else
#             if [[ -f "${arg%.*}".zip ]]; then
#             mv -v -- "${arg%.*}".zip "${arg%.*}".cbz
#             fi
#         fi
#     done
# }
#
# convert2archive-cb7() {
#     if [ $# -lt 1 ]; then
#         echo -e "Usage: $0 <file_name>"
#         echo -e "\nsingle:   $0 file.gz"
#         echo -e "\nmultiple: $0 file1.gz file2.gz file3.gz"
#         echo -e "\nwildcard: $0 *.gz"
#     return 1
#     fi
#
#     myArray=( "$@" )
#     for arg in "${myArray[@]}"; do
#         if [[ ! -f "${arg%.*}".7z && ! -f "${arg%.*}".cb7 ]]; then
#             patool repack "$arg" "${arg%.*}".7z && mv "${arg%.*}".7z "${arg%.*}".cb7
#         else
#             if [[ -f "${arg%.*}".7z ]]; then
#             mv -v -- "${arg%.*}".7z "${arg%.*}".cb7
#             fi
#         fi
#     done
# }
# convert2archive-cba() {
#     if [ $# -lt 1 ]; then
#         echo -e "Usage: $0 <file_name>"
#         echo -e "\nsingle:   $0 file.gz"
#         echo -e "\nmultiple: $0 file1.gz file2.gz file3.gz"
#         echo -e "\nwildcard: $0 *.gz"
#     return 1
#     fi
#
#     myArray=( "$@" )
#     for arg in "${myArray[@]}"; do
#         if [[ ! -f "${arg%.*}".ace && ! -f "${arg%.*}".cba ]]; then
#             patool repack "$arg" "${arg%.*}".ace && mv "${arg%.*}".ace "${arg%.*}".cba
#         else
#             if [[ -f "${arg%.*}".ace ]]; then
#             mv -v -- "${arg%.*}".ace "${arg%.*}".cba
#             fi
#         fi
#     done
# }
# convert2archive-cbt() {
#     if [ $# -lt 1 ]; then
#         echo -e "Usage: $0 <file_name>"
#         echo -e "\nsingle:   $0 file.gz"
#         echo -e "\nmultiple: $0 file1.gz file2.gz file3.gz"
#         echo -e "\nwildcard: $0 *.gz"
#     return 1
#     fi
#
#     myArray=( "$@" )
#     for arg in "${myArray[@]}"; do
#         if [[ ! -f "${arg%.*}".tar && ! -f "${arg%.*}".cbt ]]; then
#             patool repack "$arg" "${arg%.*}".tar && mv "${arg%.*}".tar "${arg%.*}".cbt
#         else
#             if [[ -f "${arg%.*}".tar ]]; then
#             mv -v -- "${arg%.*}".tar "${arg%.*}".cbt
#             fi
#         fi
#     done
# }
# convert2archive-cbr() {
#     if [ $# -lt 1 ]; then
#         echo -e "Usage: $0 <file_name>"
#         echo -e "\nsingle:   $0 file.gz"
#         echo -e "\nmultiple: $0 file1.gz file2.gz file3.gz"
#         echo -e "\nwildcard: $0 *.gz"
#     return 1
#     fi
#
#     myArray=( "$@" )
#     for arg in "${myArray[@]}"; do
#         if [[ ! -f "${arg%.*}".rar && ! -f "${arg%.*}".cbr ]]; then
#             patool repack "$arg" "${arg%.*}".rar && mv "${arg%.*}".rar "${arg%.*}".cbr
#         else
#             if [[ -f "${arg%.*}".rar ]]; then
#             mv -v -- "${arg%.*}".rar "${arg%.*}".cbr
#             fi
#         fi
#     done
# }
#
# # }}}

#-------- i3 / Openbox {{{
#------------------------------------------------------
# wallpaper path


setwallpaper() {
ConnectedMonitor="$(xrandr | awk '/ connected/ {print $1}' | head -n 1)"
PATH_WALLPAPER=~/Pictures/Wallpapers

	# find current running windows manager
	CURRENT_WM="$(wmctrl -m | grep "Name:" | awk '{print $2}')"

	# mate
	if [ $CURRENT_WM = Marco ]; then
	gsettings set org.mate.background picture-filename "$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
	fi

	# xfce
	# tutorial video: http://www.youtube.com/watch?v=tL9uVT8D6k4
	if [[ $DESKTOP_SESSION = Xfwm4 ]] || [[ $DESKTOP_SESSION = "Xfce Session" ]]; then
	xfconf-query -c xfce4-desktop -p /backdrop/screen0/monitor"$ConnectedMonitor"/workspace0/last-image -s "$PWD"/"$1"
	fi

	# i3
	if [ $DESKTOP_SESSION = i3 ]; then
	# feh --randomize --bg-fill "$PATH_WALLPAPER"/*
	feh --randomize --bg-fill "$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
	fi

	# gnome shell
	# tutorial video: http://www.youtube.com/watch?v=B_VnPXy3VCw
	if [ $DESKTOP_SESSION = GNOME ]; then
	gsettings set org.gnome.desktop.background picture-uri file://"$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
	fi


	# gnome2
	if [ $DESKTOP_SESSION = GNOME ]; then
	gconftool-2 -t str -s /desktop/gnome/background/picture_filename "$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
	fi

	# lxde
	# tutorial video: http://www.youtube.com/watch?v=5xzfBiHuknk
	if [ $DESKTOP_SESSION = LXDE ]; then
	pcmanfm -w "$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
	fi
	}


chwallpaper() {
ConnectedMonitor="$(xrandr | awk '/ connected/ {print $1}' | head -n 1)"
PATH_WALLPAPER=~/Pictures/Wallpapers

	# find current running windows manager
	CURRENT_WM="$(wmctrl -m | grep "Name:" | awk '{print $2}')"

	# mate
	if [ $CURRENT_WM = Marco ]; then
	gsettings set org.mate.background picture-filename "$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
	fi

	# xfce
	# tutorial video: http://www.youtube.com/watch?v=tL9uVT8D6k4
	if [[ $DESKTOP_SESSION = Xfwm4 ]] || [[ $DESKTOP_SESSION = "Xfce Session" ]]; then
	xfconf-query -c xfce4-desktop -p /backdrop/screen0/monitor"$ConnectedMonitor"/workspace0/last-image -s "$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
	fi

	# i3
	if [ $DESKTOP_SESSION = i3 ]; then
	# feh --randomize --bg-fill "$PATH_WALLPAPER"/*
	feh --randomize --bg-fill "$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
	fi

	# gnome shell
	# tutorial video: http://www.youtube.com/watch?v=B_VnPXy3VCw
	if [ $DESKTOP_SESSION = GNOME ]; then
	gsettings set org.gnome.desktop.background picture-uri file://"$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
	fi


	# gnome2
	if [ $DESKTOP_SESSION = GNOME ]; then
	gconftool-2 -t str -s /desktop/gnome/background/picture_filename "$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
	fi

	# lxde
	# tutorial video: http://www.youtube.com/watch?v=5xzfBiHuknk
	if [ $DESKTOP_SESSION = LXDE ]; then
	pcmanfm -w "$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
	fi
	}


#}}}
#-------- Spell Checking / Translation Related {{{
#------------------------------------------------------
# spell checking
# tutorial video: http://www.youtube.com/watch?v=UEwz5eeaZzc
check-word() { echo "$1" | aspell -a ;}
check-list() { cat "$1" | aspell list ;}
check-file() { aspell check "$1" ;}

#}}}
#-------- Mount RAW IMAGE (DD|Clonezilla) {{{
#------------------------------------------------------
#
# mount raw image like dd
# http://askubuntu.com/a/352686

# sudo kpartx -av disk_image.raw
#   output: add map loop0p1 (252:2): 0 3082240 linear /dev/loop0 2048
# sudo mount /dev/mapper/loop0p2 /tmp/mydisk
#
# # unmount raw image
# sudo umount /tmp/mydisk
# sudo kpartx -d disk_image.raw
unmount-raw() {
    if [ $# -lt 1 ]
    then
        echo -e "mount ISO filesystem images (iso,nrg,bin,mdf,img)"
        echo -e "\nUsage:\n$0 <disc_image>"
        echo -e "\nexample:\n$0 disc_image.iso"
        echo -e "$0 disc_image.iso disc_image2.bin disc_image3.mdf"
        echo -e "$0 *.iso"
        return 1
    fi

    # map block device
    myArray=$(sudo kpartx -d "$1" | awk '/loop0/ {print $3}')

    # myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        mkdir -p /tmp/"$arg"
        sudo mount /dev/mapper/"$arg" /tmp/"$arg"
    done


    # if mount was sucessful then cd and ls the mountpoint
    # if [ $? -eq 0 ]; then
	# cd "/tmp/$1" && ls
    # else
    #     return 1
    # fi

}
mount-raw() {
    if [ $# -lt 1 ]
    then
        echo -e "mount ISO filesystem images (iso,nrg,bin,mdf,img)"
        echo -e "\nUsage:\n$0 <disc_image>"
        echo -e "\nexample:\n$0 disc_image.iso"
        echo -e "$0 disc_image.iso disc_image2.bin disc_image3.mdf"
        echo -e "$0 *.iso"
        return 1
    fi

    # map block device
    myArray=$(sudo kpartx -av "$1" | awk '/loop0/ {print $3}')

    # myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        mkdir -p /tmp/"$arg"
        sudo mount /dev/mapper/"$arg" /tmp/"$arg"
    done


    # if mount was sucessful then cd and ls the mountpoint
    # if [ $? -eq 0 ]; then
	# cd "/tmp/$1" && ls
    # else
    #     return 1
    # fi

}

# }}}
#-------- nq - Job Queue Utility {{{
#------------------------------------------------------
# DEMO: 
# DESC: unix command line queue utility
# LINK: https://github.com/chneukirchen/nq

# set default tempfiles queue location
alias nq='NQDIR=/tmp nq'
alias fq='NQDIR=/tmp fq'
alias tq='NQDIR=/tmp tq'
alias nq-clear="find /tmp -maxdepth 1 -type f -iname ',*' | xargs rm"

# }}}
#-------- Task Spooler (Queue Jobs) {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# REFF: http://askubuntu.com/a/18210
# LINK: http://quvi.sourceforge.net/
alias tss='TS_SOCKET=/tmp/tlm-stuff tsp'
alias tsa='TS_SOCKET=/tmp/tesing tsp'

# }}}
#-------- Mount Device (udisksctl) {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# REFF: http://askubuntu.com/a/18210
# LINK: http://quvi.sourceforge.net/

mount-udisksctl() {
  if [ $# -lt 1 ]
  then
    echo -e "mount device like most GUI file manager"
    echo -e "\nUsage: $0 <device|partition>"
    echo -e "Example: $0 sdx"
    echo -e "         $0 sdx1"
    echo -e "Multiple:$0 sdx sdy sdz"
    echo -e "         $0 sdx*"
    return 1
  fi

  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    udisksctl mount -b /dev/"$arg"
  done
}

unmount-udisksctl() {
  if [ $# -lt 1 ]
  then
    echo -e "mount device like most GUI file manager"
    echo -e "\nUsage: $0 <device|partition>"
    echo -e "Example: $0 sdx"
    echo -e "         $0 sdx1"
    echo -e "Multiple:$0 sdx sdy sdz"
    echo -e "         $0 sdx*"
    return 1
  fi

  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    udisksctl unmount -b /dev/"$arg"
  done
}
# }}}
#-------- Eject Device {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# REFF: http://askubuntu.com/a/18210
# LINK: http://quvi.sourceforge.net/

eject-udisksctl() {
  if [ $# -lt 1 ]
  then
    echo -e "mount using gvfs"
    echo -e "\nUsage:\n$0 <disc_image>"
    echo -e "\nExample:\n$0 disc_image.iso"
    echo -e "$0 disc_image.iso disc_image2.bin disc_image3.mdf"
    echo -e "$0 *.iso"
    return 1
  fi

  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    udisksctl power-off -b /dev/"$arg"
  done
}

# }}}
#-------- Empty Template {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# REFF: http://askubuntu.com/a/18210
# LINK: http://quvi.sourceforge.net/

# }}}
#-------- Empty Template {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# REFF: http://askubuntu.com/a/18210
# LINK: http://quvi.sourceforge.net/

# }}}
#-------- Empty Template {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# REFF: http://askubuntu.com/a/18210
# LINK: http://quvi.sourceforge.net/

# }}}
#-------- Empty Template {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# REFF: http://askubuntu.com/a/18210
# LINK: http://quvi.sourceforge.net/

# }}}
#-------- Empty Template {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# REFF: http://askubuntu.com/a/18210
# LINK: http://quvi.sourceforge.net/

# }}}

#-------- Search for Files {{{
#------------------------------------------------------

@find() {
  if [ $# -lt 1 ]
    then
    echo -e "find files recursively starting from current folder"
    echo -e "\nUsage:     $0 <keywords>"
    echo -e "Example:     $0 dragon ball z"
    echo -e "OR Operator: $0 '(naruto|bleach)'"
    echo -e "             $0 '(naruto|bleach) (mkv|mp4)'"
    echo -e "Extension:   $0 naruto mkv$"
    echo -e "             $0 '(naruto|bleach) (mkv|mp4)$'"
    echo -e "\nQuit vim:\nShift+ZZ or Shift+ZQ"
    return 1
  fi
    keyword=$(echo "$@" |  sed -e 's/ /.*/g' -e 's:|:\\|:g' -e 's:(:\\(:g' -e 's:):\\):g')
    find . -print | grep -i "$keyword" | vim -R -
}

@locate() {
  if [ $# -lt 1 ]
  then
    echo -e "search for files using updatedb"
    echo -e "\nUsage:     $0 <keywords>"
    echo -e "Example:     $0 dragon ball z"
    echo -e "OR Operator: $0 '(naruto|bleach)'"
    echo -e "             $0 '(naruto|bleach) (mkv|mp4)'"
    echo -e "Extension:   $0 naruto mkv$"
    echo -e "             $0 '(naruto|bleach) (mkv|mp4)$'"
    echo -e "\nUpdate Database: sudo updatedb"
    echo -e "\nQuit vim:\nShift+ZZ or Shift+ZQ"
    return 1
  fi
    # escape spaces, pipe and parentheses
    keyword=$(echo "$@" |  sed -e 's/ /.*/g' -e 's:|:\\|:g' -e 's:(:\\(:g' -e 's:):\\):g')
    locate -ir "$keyword" | vim -R -
}

# http://askubuntu.com/questions/460535/how-do-i-tell-locate-to-keep-the-index-of-an-external-hdd
updatedb-external() {
    if [ $# -lt 1 ]
    then
        echo -e "create private updatedb"
        echo -e "\nUsage:\n$0 <filename.db> <path>"
        echo -e "\nexample:\n$0 bingbong /media/bingbong"
        return 1
    fi
    mkdir -p ~/.updatedb
    updatedb -l 0 -o ~/.updatedb/"$1.db" -U "$2"
}

@locate-external() {
  if [ $# -lt 1 ]
  then
    echo -e "locate using private updatedb"
    echo -e "\nUsage:\n$0 <keywords>"
    echo -e "\nexample:\n$0 dragon ball z"
    echo -e "\nending extension:\n$0 naruto mkv$"
    echo -e "\nOR operator:\n$0 '(naruto|blech)'"
    echo -e "$0 '(naruto|bleach) (mkv|mp4)'"
    echo -e "\nupdate database:\nsudo updatedb"
    echo -e "\nquit vim:\nShift+ZZ or Shift+ZQ"
    return 1
  fi
    keyword=$(echo "$@" |  sed -e 's/ /.*/g' -e 's:|:\\|:g' -e 's:(:\\(:g' -e 's:):\\):g')
    locate -d ~/.updatedb/bingbong.db -ir "$keyword" | vim -R -
}


# find starting at current dir and go recursively to sub dir
# @search() {
#     if [ $# -lt 1 ]
#     then
#         echo -e "search for files "
#         echo -e "\nUsage:\n$0 <keywords>"
#         echo -e "\nexample:\n$0 dragon ball z"
#         echo -e "\nending extension:\n$0 naruto mkv$"
#         echo -e "\nOR operator:\n$0 '(naruto|blech)'"
#         echo -e "$0 '(naruto|bleach) (mkv|mp4)'"
#         echo -e "\nupdate database:\nsudo updatedb"
#         echo -e "\nquit vim:\nShift+ZZ or Shift+ZQ"
#         return 1
#     fi
#         keyword=$(echo "*$@*" |  sed -e 's/ /*/g')
# 	find -type f -iname $keyword | vim -R -
# }

# find current dir files bigger than X size
# useage: @size <filesize> <keyword>
@size() {
	keyword=$(echo "*${@:2}*" |  sed -e 's/ /*/g')
	find -type f -size +${1}M -iname $keyword  | vim -R - ;}

# search pdf files in current dir for keywords inside the pdfs
# http://www.commandlinefu.com/commands/view/9189
@pdfgrep() {
    if [ $# -lt 1 ]
    then
        echo -e "search all pdf in current directory recursively for keyword inside the pdfs"
        echo -e "\nUsage:\n$0 <keyword>"
        echo -e "\nexample:\n$0 homework"
        echo -e "\n$0 'school transcript'"

        return 1
    fi
	find -iname \*.pdf -print0 | xargs -0 pdfgrep -in "$@"
}


@surfraw() { cat ~/.config/surfraw/bookmarks | grep -i "$1" | vim -R - ;}

#}}}

# convert2archive-cbr() {
#   myArray=( "$@" )
#   for arg in "${myArray[@]}"; do
#     if [[ ! -f "${arg%%.*}".rar && ! -f "${arg%%.*}".cbr ]]; then
#       arepack -F .rar -e "$arg" && mv -- "${arg%%.*}".rar "${arg%%.*}".cbr
#     else
#       if [[ -f "${arg%%.*}".rar && ! -f "${arg%%.*}".cbr ]]; then
#         mv -v -- "${arg%%.*}".rar "${arg%%.*}".cbr
#       fi
#     fi
#   done
# }



transfer() {
  if [ $# -lt 1 ]; then
    echo -e "URL: https://transfer.sh"
    echo -e "Usage:   $0 <filename>"
    echo -e "Example: $0 file.zip file2.txt file3.jpg"
    return 1
  fi 
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    tmpfile=$( mktemp -t transferXXX )
    if tty -s; then
      basefile=$(basename "$arg" | sed -e 's/[^a-zA-Z0-9._-]/-/g')
      curl --progress-bar --upload-file "$arg" "https://transfer.sh/$basefile" >> $tmpfile
      else curl --progress-bar --upload-file "-" "https://transfer.sh/$arg" >> $tmpfile
    fi
    cat $tmpfile
    rm -f $tmpfile
  done
} 
alias tsp-ranger='TS_SOCKET=/tmp/ranger tsp'

